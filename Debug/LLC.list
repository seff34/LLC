
LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004c50  08004c50  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c50  08004c50  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004c58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          00000138  20000038  20000038  00020038  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e79d  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000207b  00000000  00000000  0002e805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00030880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ba8  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021157  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f260  00000000  00000000  0005321f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c69f6  00000000  00000000  0006247f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128e75  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003644  00000000  00000000  00128ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c08 	.word	0x08004c08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08004c08 	.word	0x08004c08

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2uiz>:
 80008a4:	004a      	lsls	r2, r1, #1
 80008a6:	d211      	bcs.n	80008cc <__aeabi_d2uiz+0x28>
 80008a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ac:	d211      	bcs.n	80008d2 <__aeabi_d2uiz+0x2e>
 80008ae:	d50d      	bpl.n	80008cc <__aeabi_d2uiz+0x28>
 80008b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008b8:	d40e      	bmi.n	80008d8 <__aeabi_d2uiz+0x34>
 80008ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008c6:	fa23 f002 	lsr.w	r0, r3, r2
 80008ca:	4770      	bx	lr
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	4770      	bx	lr
 80008d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008d6:	d102      	bne.n	80008de <__aeabi_d2uiz+0x3a>
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	4770      	bx	lr
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	4770      	bx	lr

080008e4 <INTEGRAL_FORMULA>:

uint16_t MAX_FREQ_VALUE = 1500 ;
uint16_t MIN_FREQ_VALUE = 858 ;


double INTEGRAL_FORMULA(double VALUE){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	ed87 0b00 	vstr	d0, [r7]

	return VALUE;
 80008ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80008f6:	eeb0 0a47 	vmov.f32	s0, s14
 80008fa:	eef0 0a67 	vmov.f32	s1, s15
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <Z1_VALUE>:

double Z1_VALUE() {
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	af00      	add	r7, sp, #0

    z1 = (z1 * axd11) + (z2 * axd12) + (z3 * axd13) + (u * bxd11) + (y * bxd12);
 800090c:	4b37      	ldr	r3, [pc, #220]	; (80009ec <Z1_VALUE+0xe4>)
 800090e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000912:	4b37      	ldr	r3, [pc, #220]	; (80009f0 <Z1_VALUE+0xe8>)
 8000914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000918:	f7ff fc56 	bl	80001c8 <__aeabi_dmul>
 800091c:	4602      	mov	r2, r0
 800091e:	460b      	mov	r3, r1
 8000920:	4614      	mov	r4, r2
 8000922:	461d      	mov	r5, r3
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <Z1_VALUE+0xec>)
 8000926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800092a:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <Z1_VALUE+0xf0>)
 800092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000930:	f7ff fc4a 	bl	80001c8 <__aeabi_dmul>
 8000934:	4602      	mov	r2, r0
 8000936:	460b      	mov	r3, r1
 8000938:	4620      	mov	r0, r4
 800093a:	4629      	mov	r1, r5
 800093c:	f7ff fd74 	bl	8000428 <__adddf3>
 8000940:	4602      	mov	r2, r0
 8000942:	460b      	mov	r3, r1
 8000944:	4614      	mov	r4, r2
 8000946:	461d      	mov	r5, r3
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <Z1_VALUE+0xf4>)
 800094a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800094e:	4b2c      	ldr	r3, [pc, #176]	; (8000a00 <Z1_VALUE+0xf8>)
 8000950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000954:	f7ff fc38 	bl	80001c8 <__aeabi_dmul>
 8000958:	4602      	mov	r2, r0
 800095a:	460b      	mov	r3, r1
 800095c:	4620      	mov	r0, r4
 800095e:	4629      	mov	r1, r5
 8000960:	f7ff fd62 	bl	8000428 <__adddf3>
 8000964:	4602      	mov	r2, r0
 8000966:	460b      	mov	r3, r1
 8000968:	4614      	mov	r4, r2
 800096a:	461d      	mov	r5, r3
 800096c:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <Z1_VALUE+0xfc>)
 800096e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <Z1_VALUE+0x100>)
 8000974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000978:	f7ff fc26 	bl	80001c8 <__aeabi_dmul>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	4620      	mov	r0, r4
 8000982:	4629      	mov	r1, r5
 8000984:	f7ff fd50 	bl	8000428 <__adddf3>
 8000988:	4602      	mov	r2, r0
 800098a:	460b      	mov	r3, r1
 800098c:	4614      	mov	r4, r2
 800098e:	461d      	mov	r5, r3
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <Z1_VALUE+0x104>)
 8000992:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000996:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <Z1_VALUE+0x108>)
 8000998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099c:	f7ff fc14 	bl	80001c8 <__aeabi_dmul>
 80009a0:	4602      	mov	r2, r0
 80009a2:	460b      	mov	r3, r1
 80009a4:	4620      	mov	r0, r4
 80009a6:	4629      	mov	r1, r5
 80009a8:	f7ff fd3e 	bl	8000428 <__adddf3>
 80009ac:	4602      	mov	r2, r0
 80009ae:	460b      	mov	r3, r1
 80009b0:	490e      	ldr	r1, [pc, #56]	; (80009ec <Z1_VALUE+0xe4>)
 80009b2:	e9c1 2300 	strd	r2, r3, [r1]
    z1 = INTEGRAL_FORMULA(z1);
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <Z1_VALUE+0xe4>)
 80009b8:	ed93 7b00 	vldr	d7, [r3]
 80009bc:	eeb0 0a47 	vmov.f32	s0, s14
 80009c0:	eef0 0a67 	vmov.f32	s1, s15
 80009c4:	f7ff ff8e 	bl	80008e4 <INTEGRAL_FORMULA>
 80009c8:	eeb0 7a40 	vmov.f32	s14, s0
 80009cc:	eef0 7a60 	vmov.f32	s15, s1
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <Z1_VALUE+0xe4>)
 80009d2:	ed83 7b00 	vstr	d7, [r3]
    return z1;
 80009d6:	4b05      	ldr	r3, [pc, #20]	; (80009ec <Z1_VALUE+0xe4>)
 80009d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80009e0:	eeb0 0a47 	vmov.f32	s0, s14
 80009e4:	eef0 0a67 	vmov.f32	s1, s15
 80009e8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000058 	.word	0x20000058
 80009f0:	20000000 	.word	0x20000000
 80009f4:	20000060 	.word	0x20000060
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000068 	.word	0x20000068
 8000a00:	20000010 	.word	0x20000010
 8000a04:	20000078 	.word	0x20000078
 8000a08:	20000018 	.word	0x20000018
 8000a0c:	20000070 	.word	0x20000070
 8000a10:	20000020 	.word	0x20000020

08000a14 <CALCULATOR>:
    z3 = (z1 * axd31) + (z2 * axd32) + (z3 * axd33) + (u * bxd31) + (y * bxd31);
    z3 = INTEGRAL_FORMULA(z3);
    return z3;
}

double CALCULATOR(uint16_t *ADC_VALUE){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

	double RESPONSE = 0 ;
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
	z1 = Z1_VALUE();
 8000a28:	f7ff ff6e 	bl	8000908 <Z1_VALUE>
 8000a2c:	eeb0 7a40 	vmov.f32	s14, s0
 8000a30:	eef0 7a60 	vmov.f32	s15, s1
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <CALCULATOR+0xb8>)
 8000a36:	ed83 7b00 	vstr	d7, [r3]
	z2 = Z1_VALUE();
 8000a3a:	f7ff ff65 	bl	8000908 <Z1_VALUE>
 8000a3e:	eeb0 7a40 	vmov.f32	s14, s0
 8000a42:	eef0 7a60 	vmov.f32	s15, s1
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <CALCULATOR+0xbc>)
 8000a48:	ed83 7b00 	vstr	d7, [r3]
	z3 = Z1_VALUE();
 8000a4c:	f7ff ff5c 	bl	8000908 <Z1_VALUE>
 8000a50:	eeb0 7a40 	vmov.f32	s14, s0
 8000a54:	eef0 7a60 	vmov.f32	s15, s1
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <CALCULATOR+0xc0>)
 8000a5a:	ed83 7b00 	vstr	d7, [r3]


	if ( RESPONSE < MIN_FREQ_VALUE )
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <CALCULATOR+0xc4>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe2c 	bl	80006c0 <__aeabi_i2d>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a70:	f7ff fef0 	bl	8000854 <__aeabi_dcmplt>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <CALCULATOR+0x76>
		return MIN_FREQ_VALUE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <CALCULATOR+0xc4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fe0e 	bl	80006a0 <__aeabi_ui2d>
 8000a84:	4602      	mov	r2, r0
 8000a86:	460b      	mov	r3, r1
 8000a88:	e017      	b.n	8000aba <CALCULATOR+0xa6>
	else if ( RESPONSE > MAX_FREQ_VALUE )
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <CALCULATOR+0xc8>)
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fe16 	bl	80006c0 <__aeabi_i2d>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f7ff fef8 	bl	8000890 <__aeabi_dcmpgt>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <CALCULATOR+0xa2>
		return MAX_FREQ_VALUE;
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <CALCULATOR+0xc8>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fdf8 	bl	80006a0 <__aeabi_ui2d>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	e001      	b.n	8000aba <CALCULATOR+0xa6>
	return RESPONSE;
 8000ab6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000aba:	ec43 2b17 	vmov	d7, r2, r3
}
 8000abe:	eeb0 0a47 	vmov.f32	s0, s14
 8000ac2:	eef0 0a67 	vmov.f32	s1, s15
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000058 	.word	0x20000058
 8000ad0:	20000060 	.word	0x20000060
 8000ad4:	20000068 	.word	0x20000068
 8000ad8:	2000002a 	.word	0x2000002a
 8000adc:	20000028 	.word	0x20000028

08000ae0 <TIM_SET_PERIOD>:
#include "formula.h"

uint32_t adc_value[2];
uint16_t PERIOD_VALUE = 0 ;

uint16_t TIM_SET_PERIOD(uint16_t PERIOD_VALUE){
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	80fb      	strh	r3, [r7, #6]
	htim1.Init.Period = PERIOD_VALUE;
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <TIM_SET_PERIOD+0x20>)
 8000aee:	60d3      	str	r3, [r2, #12]
	return PERIOD_VALUE;
 8000af0:	88fb      	ldrh	r3, [r7, #6]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000120 	.word	0x20000120

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fb84 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f830 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f9ae 	bl	8000e70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b14:	f000 f98e 	bl	8000e34 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b18:	f000 f88c 	bl	8000c34 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b1c:	f000 f8fa 	bl	8000d14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_value,1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	490f      	ldr	r1, [pc, #60]	; (8000b60 <main+0x5c>)
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <main+0x60>)
 8000b26:	f000 fd8b 	bl	8001640 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	480e      	ldr	r0, [pc, #56]	; (8000b68 <main+0x64>)
 8000b2e:	f003 f9c7 	bl	8003ec0 <HAL_TIM_PWM_Start_IT>

  TIM_SET_PERIOD(50000);
 8000b32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000b36:	f7ff ffd3 	bl	8000ae0 <TIM_SET_PERIOD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	PERIOD_VALUE = CALCULATOR(&adc_value[0]);
 8000b3a:	4809      	ldr	r0, [pc, #36]	; (8000b60 <main+0x5c>)
 8000b3c:	f7ff ff6a 	bl	8000a14 <CALCULATOR>
 8000b40:	ec53 2b10 	vmov	r2, r3, d0
 8000b44:	4610      	mov	r0, r2
 8000b46:	4619      	mov	r1, r3
 8000b48:	f7ff feac 	bl	80008a4 <__aeabi_d2uiz>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <main+0x68>)
 8000b52:	801a      	strh	r2, [r3, #0]
	TIM_SET_PERIOD(PERIOD_VALUE);
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <main+0x68>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffc1 	bl	8000ae0 <TIM_SET_PERIOD>
	PERIOD_VALUE = CALCULATOR(&adc_value[0]);
 8000b5e:	e7ec      	b.n	8000b3a <main+0x36>
 8000b60:	20000084 	.word	0x20000084
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	20000080 	.word	0x20000080

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b096      	sub	sp, #88	; 0x58
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b7a:	2228      	movs	r2, #40	; 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 f83a 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]
 8000ba2:	615a      	str	r2, [r3, #20]
 8000ba4:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000bc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bc6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fefb 	bl	80029c8 <HAL_RCC_OscConfig>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000bd8:	f000 f9c2 	bl	8000f60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bdc:	230f      	movs	r3, #15
 8000bde:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be0:	2302      	movs	r3, #2
 8000be2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fded 	bl	80037d8 <HAL_RCC_ClockConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c04:	f000 f9ac 	bl	8000f60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000c08:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000c0c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c12:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ffc2 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c26:	f000 f99b 	bl	8000f60 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3758      	adds	r7, #88	; 0x58
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c56:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c70:	4b27      	ldr	r3, [pc, #156]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c7e:	4b24      	ldr	r3, [pc, #144]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c8a:	4b21      	ldr	r3, [pc, #132]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c9e:	4b1c      	ldr	r3, [pc, #112]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000cb2:	f000 fb33 	bl	800131c <HAL_ADC_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f000 f950 	bl	8000f60 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4811      	ldr	r0, [pc, #68]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000ccc:	f001 f854 	bl	8001d78 <HAL_ADCEx_MultiModeConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cd6:	f000 f943 	bl	8000f60 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <MX_ADC1_Init+0xdc>)
 8000cf8:	f000 fd7c 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000d02:	f000 f92d 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b096      	sub	sp, #88	; 0x58
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	615a      	str	r2, [r3, #20]
 8000d38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	222c      	movs	r2, #44	; 0x2c
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 ff59 	bl	8004bf8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d48:	4a39      	ldr	r2, [pc, #228]	; (8000e30 <MX_TIM1_Init+0x11c>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47799;
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d5a:	f64b 22b7 	movw	r2, #47799	; 0xbab7
 8000d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d66:	4b31      	ldr	r3, [pc, #196]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d72:	482e      	ldr	r0, [pc, #184]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d74:	f003 f84c 	bl	8003e10 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f8ef 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d92:	4619      	mov	r1, r3
 8000d94:	4825      	ldr	r0, [pc, #148]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000d96:	f003 fe25 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000da0:	f000 f8de 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8000da8:	2332      	movs	r3, #50	; 0x32
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000dca:	f003 f9b3 	bl	8004134 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dd4:	f000 f8c4 	bl	8000f60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000e0e:	f003 fe57 	bl	8004ac0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000e18:	f000 f8a2 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM1_Init+0x118>)
 8000e1e:	f000 f951 	bl	80010c4 <HAL_TIM_MspPostInit>

}
 8000e22:	bf00      	nop
 8000e24:	3758      	adds	r7, #88	; 0x58
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000120 	.word	0x20000120
 8000e30:	40012c00 	.word	0x40012c00

08000e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6153      	str	r3, [r2, #20]
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_DMA_Init+0x38>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2100      	movs	r1, #0
 8000e56:	200b      	movs	r0, #11
 8000e58:	f001 fa5f 	bl	800231a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e5c:	200b      	movs	r0, #11
 8000e5e:	f001 fa78 	bl	8002352 <HAL_NVIC_EnableIRQ>

}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a33      	ldr	r2, [pc, #204]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a2d      	ldr	r2, [pc, #180]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ed8:	6153      	str	r3, [r2, #20]
 8000eda:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <MX_GPIO_Init+0xe8>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2120      	movs	r1, #32
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f001 fd53 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ef8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4814      	ldr	r0, [pc, #80]	; (8000f5c <MX_GPIO_Init+0xec>)
 8000f0a:	f001 fbd3 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f1e:	2307      	movs	r3, #7
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 fbc2 	bl	80026b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f30:	2320      	movs	r3, #32
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f001 fbb3 	bl	80026b4 <HAL_GPIO_Init>

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	; 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000800 	.word	0x48000800

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f001 f9ae 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fd4:	d14c      	bne.n	8001070 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	4a27      	ldr	r2, [pc, #156]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6153      	str	r3, [r2, #20]
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b22      	ldr	r3, [pc, #136]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <HAL_ADC_MspInit+0xc4>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001006:	2301      	movs	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101c:	f001 fb4a 	bl	80026b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_ADC_MspInit+0xcc>)
 8001024:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0xc8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_ADC_MspInit+0xc8>)
 800103a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001046:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0xc8>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001054:	4809      	ldr	r0, [pc, #36]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001056:	f001 f996 	bl	8002386 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001060:	f7ff ff7e 	bl	8000f60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_ADC_MspInit+0xc8>)
 8001068:	639a      	str	r2, [r3, #56]	; 0x38
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_ADC_MspInit+0xc8>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	200000dc 	.word	0x200000dc
 8001080:	40020008 	.word	0x40020008

08001084 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_TIM_PWM_MspInit+0x38>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10b      	bne.n	80010ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800109c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <HAL_TIM_MspPostInit+0x64>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d11b      	bne.n	800111e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_TIM_MspPostInit+0x68>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_TIM_MspPostInit+0x68>)
 80010ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_TIM_MspPostInit+0x68>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010fe:	2301      	movs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800110e:	2302      	movs	r3, #2
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_TIM_MspPostInit+0x6c>)
 800111a:	f001 facb 	bl	80026b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012c00 	.word	0x40012c00
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f88e 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <DMA1_Channel1_IRQHandler+0x10>)
 800118e:	f001 f9a0 	bl	80024d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000dc 	.word	0x200000dc

0800119c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <SystemInit+0x20>)
 80011a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <SystemInit+0x20>)
 80011a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011dc:	4c0b      	ldr	r4, [pc, #44]	; (800120c <LoopForever+0x16>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ea:	f7ff ffd7 	bl	800119c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f003 fcdf 	bl	8004bb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff fc87 	bl	8000b04 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001204:	08004c58 	.word	0x08004c58
  ldr r2, =_sbss
 8001208:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 800120c:	20000170 	.word	0x20000170

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x28>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x28>)
 800121e:	f043 0310 	orr.w	r3, r3, #16
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f001 f86d 	bl	8002304 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fe9c 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f001 f885 	bl	800236e <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f001 f84d 	bl	800231a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000002c 	.word	0x2000002c
 8001298:	20000034 	.word	0x20000034
 800129c:	20000030 	.word	0x20000030

080012a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000034 	.word	0x20000034
 80012c4:	2000016c 	.word	0x2000016c

080012c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000016c 	.word	0x2000016c

080012e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b09a      	sub	sp, #104	; 0x68
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e172      	b.n	8001622 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	2b00      	cmp	r3, #0
 800134c:	d176      	bne.n	800143c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b00      	cmp	r3, #0
 8001354:	d152      	bne.n	80013fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff fe1f 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d13b      	bne.n	80013fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fe87 	bl	8002098 <ADC_Disable>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12f      	bne.n	80013fc <HAL_ADC_Init+0xe0>
 800139c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d12b      	bne.n	80013fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ac:	f023 0302 	bic.w	r3, r3, #2
 80013b0:	f043 0202 	orr.w	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013d8:	4b94      	ldr	r3, [pc, #592]	; (800162c <HAL_ADC_Init+0x310>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a94      	ldr	r2, [pc, #592]	; (8001630 <HAL_ADC_Init+0x314>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9a      	lsrs	r2, r3, #18
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ee:	e002      	b.n	80013f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f9      	bne.n	80013f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001418:	d110      	bne.n	800143c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f023 0312 	bic.w	r3, r3, #18
 8001422:	f043 0210 	orr.w	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 80df 	bne.w	8001608 <HAL_ADC_Init+0x2ec>
 800144a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 80da 	bne.w	8001608 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 80d2 	bne.w	8001608 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001474:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_ADC_Init+0x318>)
 8001476:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001480:	d102      	bne.n	8001488 <HAL_ADC_Init+0x16c>
 8001482:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <HAL_ADC_Init+0x31c>)
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e002      	b.n	800148e <HAL_ADC_Init+0x172>
 8001488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800148c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d108      	bne.n	80014ae <HAL_ADC_Init+0x192>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Init+0x192>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_ADC_Init+0x194>
 80014ae:	2300      	movs	r3, #0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11c      	bne.n	80014ee <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d107      	bne.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Init+0x1ba>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_ADC_Init+0x1bc>
 80014d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d108      	bne.n	80014ee <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80014dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7e5b      	ldrb	r3, [r3, #25]
 80014f2:	035b      	lsls	r3, r3, #13
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f8:	2a01      	cmp	r2, #1
 80014fa:	d002      	beq.n	8001502 <HAL_ADC_Init+0x1e6>
 80014fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001500:	e000      	b.n	8001504 <HAL_ADC_Init+0x1e8>
 8001502:	2200      	movs	r2, #0
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4313      	orrs	r3, r2
 8001512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001514:	4313      	orrs	r3, r2
 8001516:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d11b      	bne.n	800155a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7e5b      	ldrb	r3, [r3, #25]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d109      	bne.n	800153e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	3b01      	subs	r3, #1
 8001530:	045a      	lsls	r2, r3, #17
 8001532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001534:	4313      	orrs	r3, r2
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	663b      	str	r3, [r7, #96]	; 0x60
 800153c:	e00d      	b.n	800155a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001546:	f043 0220 	orr.w	r2, r3, #32
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155e:	2b01      	cmp	r3, #1
 8001560:	d007      	beq.n	8001572 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	4313      	orrs	r3, r2
 800156c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800156e:	4313      	orrs	r3, r2
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b00      	cmp	r3, #0
 800157e:	d114      	bne.n	80015aa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800158e:	f023 0302 	bic.w	r3, r3, #2
 8001592:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	039a      	lsls	r2, r3, #14
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4313      	orrs	r3, r2
 80015a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015a6:	4313      	orrs	r3, r2
 80015a8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_ADC_Init+0x320>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80015ba:	430b      	orrs	r3, r1
 80015bc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10c      	bne.n	80015e0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f023 010f 	bic.w	r1, r3, #15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
 80015de:	e007      	b.n	80015f0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020f 	bic.w	r2, r2, #15
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f023 0303 	bic.w	r3, r3, #3
 80015fe:	f043 0201 	orr.w	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
 8001606:	e00a      	b.n	800161e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f023 0312 	bic.w	r3, r3, #18
 8001610:	f043 0210 	orr.w	r2, r3, #16
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800161e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001622:	4618      	mov	r0, r3
 8001624:	3768      	adds	r7, #104	; 0x68
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000002c 	.word	0x2000002c
 8001630:	431bde83 	.word	0x431bde83
 8001634:	50000300 	.word	0x50000300
 8001638:	50000100 	.word	0x50000100
 800163c:	fff0c007 	.word	0xfff0c007

08001640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 80b9 	bne.w	80017d2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_ADC_Start_DMA+0x2e>
 800166a:	2302      	movs	r3, #2
 800166c:	e0b4      	b.n	80017d8 <HAL_ADC_Start_DMA+0x198>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001676:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <HAL_ADC_Start_DMA+0x1a0>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 031f 	and.w	r3, r3, #31
 800167e:	2b00      	cmp	r3, #0
 8001680:	f040 80a0 	bne.w	80017c4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fca3 	bl	8001fd0 <ADC_Enable>
 800168a:	4603      	mov	r3, r0
 800168c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 8092 	bne.w	80017ba <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016aa:	4b4d      	ldr	r3, [pc, #308]	; (80017e0 <HAL_ADC_Start_DMA+0x1a0>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_ADC_Start_DMA+0x80>
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016be:	d115      	bne.n	80016ec <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d027      	beq.n	800172a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016ea:	e01e      	b.n	800172a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001700:	d004      	beq.n	800170c <HAL_ADC_Start_DMA+0xcc>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a37      	ldr	r2, [pc, #220]	; (80017e4 <HAL_ADC_Start_DMA+0x1a4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d10e      	bne.n	800172a <HAL_ADC_Start_DMA+0xea>
 800170c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001722:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001736:	d106      	bne.n	8001746 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173c:	f023 0206 	bic.w	r2, r3, #6
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
 8001744:	e002      	b.n	800174c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_ADC_Start_DMA+0x1a8>)
 800175a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_ADC_Start_DMA+0x1ac>)
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_ADC_Start_DMA+0x1b0>)
 800176a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	221c      	movs	r2, #28
 8001772:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68da      	ldr	r2, [r3, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0201 	orr.w	r2, r2, #1
 8001792:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3340      	adds	r3, #64	; 0x40
 800179e:	4619      	mov	r1, r3
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f000 fe36 	bl	8002414 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0204 	orr.w	r2, r2, #4
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e00d      	b.n	80017d6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017c2:	e008      	b.n	80017d6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017d0:	e001      	b.n	80017d6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017d2:	2302      	movs	r3, #2
 80017d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	50000300 	.word	0x50000300
 80017e4:	50000100 	.word	0x50000100
 80017e8:	08001f05 	.word	0x08001f05
 80017ec:	08001f7f 	.word	0x08001f7f
 80017f0:	08001f9b 	.word	0x08001f9b

080017f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b09b      	sub	sp, #108	; 0x6c
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x22>
 8001812:	2302      	movs	r3, #2
 8001814:	e2a5      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x56e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 8289 	bne.w	8001d40 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d81c      	bhi.n	8001870 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	461a      	mov	r2, r3
 800184a:	231f      	movs	r3, #31
 800184c:	4093      	lsls	r3, r2
 800184e:	43db      	mvns	r3, r3
 8001850:	4019      	ands	r1, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa00 f203 	lsl.w	r2, r0, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
 800186e:	e063      	b.n	8001938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b09      	cmp	r3, #9
 8001876:	d81e      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	3b1e      	subs	r3, #30
 800188c:	221f      	movs	r2, #31
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	4019      	ands	r1, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	3b1e      	subs	r3, #30
 80018a8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
 80018b4:	e040      	b.n	8001938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b0e      	cmp	r3, #14
 80018bc:	d81e      	bhi.n	80018fc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	3b3c      	subs	r3, #60	; 0x3c
 80018d2:	221f      	movs	r2, #31
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	4019      	ands	r1, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	3b3c      	subs	r3, #60	; 0x3c
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
 80018fa:	e01d      	b.n	8001938 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	3b5a      	subs	r3, #90	; 0x5a
 8001910:	221f      	movs	r2, #31
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	4019      	ands	r1, r3
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	3b5a      	subs	r3, #90	; 0x5a
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 80e5 	bne.w	8001b12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d91c      	bls.n	800198a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6999      	ldr	r1, [r3, #24]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	3b1e      	subs	r3, #30
 8001962:	2207      	movs	r2, #7
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6898      	ldr	r0, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	3b1e      	subs	r3, #30
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	619a      	str	r2, [r3, #24]
 8001988:	e019      	b.n	80019be <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6959      	ldr	r1, [r3, #20]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	2207      	movs	r2, #7
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6898      	ldr	r0, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	3b01      	subs	r3, #1
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d84f      	bhi.n	8001a80 <HAL_ADC_ConfigChannel+0x28c>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_ADC_ConfigChannel+0x1f4>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a1b 	.word	0x08001a1b
 80019f0:	08001a3d 	.word	0x08001a3d
 80019f4:	08001a5f 	.word	0x08001a5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019fe:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <HAL_ADC_ConfigChannel+0x484>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	0691      	lsls	r1, r2, #26
 8001a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a18:	e07e      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a20:	4b95      	ldr	r3, [pc, #596]	; (8001c78 <HAL_ADC_ConfigChannel+0x484>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	0691      	lsls	r1, r2, #26
 8001a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a3a:	e06d      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a42:	4b8d      	ldr	r3, [pc, #564]	; (8001c78 <HAL_ADC_ConfigChannel+0x484>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	0691      	lsls	r1, r2, #26
 8001a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a5c:	e05c      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_ADC_ConfigChannel+0x484>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	0691      	lsls	r1, r2, #26
 8001a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a70:	430a      	orrs	r2, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a7e:	e04b      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	069b      	lsls	r3, r3, #26
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d107      	bne.n	8001aa4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aa2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	069b      	lsls	r3, r3, #26
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ac6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ace:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	069b      	lsls	r3, r3, #26
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d107      	bne.n	8001aec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001af2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	069b      	lsls	r3, r3, #26
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10a      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b10:	e001      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b12:	bf00      	nop
 8001b14:	e000      	b.n	8001b18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d108      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x344>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d101      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x344>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x346>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f040 810b 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d00f      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2201      	movs	r2, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b66:	e049      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	409a      	lsls	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b09      	cmp	r3, #9
 8001b88:	d91c      	bls.n	8001bc4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6999      	ldr	r1, [r3, #24]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	3b1b      	subs	r3, #27
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4019      	ands	r1, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6898      	ldr	r0, [r3, #8]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b1b      	subs	r3, #27
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	619a      	str	r2, [r3, #24]
 8001bc2:	e01b      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6959      	ldr	r1, [r3, #20]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	4413      	add	r3, r2
 8001bd6:	2207      	movs	r2, #7
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4019      	ands	r1, r3
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6898      	ldr	r0, [r3, #8]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4613      	mov	r3, r2
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4413      	add	r3, r2
 8001bf0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_ADC_ConfigChannel+0x488>)
 8001bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b10      	cmp	r3, #16
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d015      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c18:	2b11      	cmp	r3, #17
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	f040 8092 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 808b 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c48:	d102      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x45c>
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_ADC_ConfigChannel+0x48c>)
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e002      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x462>
 8001c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c54:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d10f      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x490>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d108      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x490>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e007      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x492>
 8001c76:	bf00      	nop
 8001c78:	83fff000 	.word	0x83fff000
 8001c7c:	50000300 	.word	0x50000300
 8001c80:	50000100 	.word	0x50000100
 8001c84:	2300      	movs	r3, #0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d150      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d010      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d107      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x4b8>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x4b8>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_ADC_ConfigChannel+0x4ba>
 8001cac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d13c      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d11d      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x502>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc2:	d118      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd0:	4b27      	ldr	r3, [pc, #156]	; (8001d70 <HAL_ADC_ConfigChannel+0x57c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <HAL_ADC_ConfigChannel+0x580>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0c9a      	lsrs	r2, r3, #18
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ce6:	e002      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f9      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cf4:	e02e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b11      	cmp	r3, #17
 8001cfc:	d10b      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x522>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d06:	d106      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d12:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d14:	e01e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d11a      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d28:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d2a:	e013      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d3e:	e00a      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d52:	e000      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d54:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	376c      	adds	r7, #108	; 0x6c
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	2000002c 	.word	0x2000002c
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b099      	sub	sp, #100	; 0x64
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d90:	d102      	bne.n	8001d98 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001d92:	4b5a      	ldr	r3, [pc, #360]	; (8001efc <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	e002      	b.n	8001d9e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d9c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0a2      	b.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e09b      	b.n	8001eee <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d17f      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d179      	bne.n	8001ecc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dd8:	4b49      	ldr	r3, [pc, #292]	; (8001f00 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001dda:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d040      	beq.n	8001e66 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001df6:	035b      	lsls	r3, r3, #13
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfe:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d108      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e20:	2300      	movs	r3, #0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d15c      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001e42:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d14b      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e50:	f023 030f 	bic.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6811      	ldr	r1, [r2, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e62:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e64:	e03c      	b.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001e66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e70:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d123      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001eb4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d112      	bne.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec2:	f023 030f 	bic.w	r3, r3, #15
 8001ec6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ec8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eca:	e009      	b.n	8001ee0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ede:	e000      	b.n	8001ee2 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3764      	adds	r7, #100	; 0x64
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	50000100 	.word	0x50000100
 8001f00:	50000300 	.word	0x50000300

08001f04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d126      	bne.n	8001f6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d115      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d111      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff f9bb 	bl	80012e0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f6a:	e004      	b.n	8001f76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	4798      	blx	r3
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f7ff f9b1 	bl	80012f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001f92:	bf00      	nop
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f043 0204 	orr.w	r2, r3, #4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff f9a1 	bl	8001308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d108      	bne.n	8001ffc <ADC_Enable+0x2c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <ADC_Enable+0x2c>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <ADC_Enable+0x2e>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d143      	bne.n	800208a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <ADC_Enable+0xc4>)
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f043 0210 	orr.w	r2, r3, #16
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e02f      	b.n	800208c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800203c:	f7ff f944 	bl	80012c8 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002042:	e01b      	b.n	800207c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002044:	f7ff f940 	bl	80012c8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d914      	bls.n	800207c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d00d      	beq.n	800207c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e007      	b.n	800208c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d1dc      	bne.n	8002044 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	8000003f 	.word	0x8000003f

08002098 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <ADC_Disable+0x2c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <ADC_Disable+0x2c>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <ADC_Disable+0x2e>
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d047      	beq.n	800215a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030d 	and.w	r3, r3, #13
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10f      	bne.n	80020f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0202 	orr.w	r2, r2, #2
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2203      	movs	r2, #3
 80020ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80020f0:	f7ff f8ea 	bl	80012c8 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020f6:	e029      	b.n	800214c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f043 0210 	orr.w	r2, r3, #16
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	f043 0201 	orr.w	r2, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e023      	b.n	800215c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002114:	f7ff f8d8 	bl	80012c8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d914      	bls.n	800214c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f043 0210 	orr.w	r2, r3, #16
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e007      	b.n	800215c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d0dc      	beq.n	8002114 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	db0b      	blt.n	80021f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	f003 021f 	and.w	r2, r3, #31
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <__NVIC_EnableIRQ+0x38>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	2001      	movs	r0, #1
 80021ea:	fa00 f202 	lsl.w	r2, r0, r2
 80021ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d0:	d301      	bcc.n	80022d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00f      	b.n	80022f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <SysTick_Config+0x40>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022de:	210f      	movs	r1, #15
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f7ff ff8e 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <SysTick_Config+0x40>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <SysTick_Config+0x40>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010

08002304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff29 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800232c:	f7ff ff3e 	bl	80021ac <__NVIC_GetPriorityGrouping>
 8002330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	6978      	ldr	r0, [r7, #20]
 8002338:	f7ff ff8e 	bl	8002258 <NVIC_EncodePriority>
 800233c:	4602      	mov	r2, r0
 800233e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff5d 	bl	8002204 <__NVIC_SetPriority>
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	4603      	mov	r3, r0
 800235a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800235c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff31 	bl	80021c8 <__NVIC_EnableIRQ>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff ffa2 	bl	80022c0 <SysTick_Config>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e037      	b.n	800240c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f940 	bl	8002674 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}  
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Start_IT+0x20>
 8002430:	2302      	movs	r3, #2
 8002432:	e04a      	b.n	80024ca <HAL_DMA_Start_IT+0xb6>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002442:	2b01      	cmp	r3, #1
 8002444:	d13a      	bne.n	80024bc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f8d4 	bl	8002618 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 020e 	orr.w	r2, r2, #14
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e00f      	b.n	80024aa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 020a 	orr.w	r2, r2, #10
 8002498:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0204 	bic.w	r2, r2, #4
 80024a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e005      	b.n	80024c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024c4:	2302      	movs	r3, #2
 80024c6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
} 
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2204      	movs	r2, #4
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d024      	beq.n	8002544 <HAL_DMA_IRQHandler+0x72>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01f      	beq.n	8002544 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0204 	bic.w	r2, r2, #4
 8002520:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	2104      	movs	r1, #4
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002542:	e065      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	2202      	movs	r2, #2
 800254a:	409a      	lsls	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d02c      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdc>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d027      	beq.n	80025ae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 020a 	bic.w	r2, r2, #10
 800257a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	2102      	movs	r1, #2
 800258e:	fa01 f202 	lsl.w	r2, r1, r2
 8002592:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d035      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025ac:	e030      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2208      	movs	r2, #8
 80025b4:	409a      	lsls	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d028      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d023      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020e 	bic.w	r2, r2, #14
 80025d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e0:	2101      	movs	r1, #1
 80025e2:	fa01 f202 	lsl.w	r2, r1, r2
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	4798      	blx	r3
    }
  }
}  
 800260e:	e7ff      	b.n	8002610 <HAL_DMA_IRQHandler+0x13e>
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
 8002624:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2101      	movs	r1, #1
 8002630:	fa01 f202 	lsl.w	r2, r1, r2
 8002634:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d108      	bne.n	8002658 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002656:	e007      	b.n	8002668 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	60da      	str	r2, [r3, #12]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <DMA_CalcBaseAndBitshift+0x34>)
 8002684:	4413      	add	r3, r2
 8002686:	4a09      	ldr	r2, [pc, #36]	; (80026ac <DMA_CalcBaseAndBitshift+0x38>)
 8002688:	fba2 2303 	umull	r2, r3, r2, r3
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	009a      	lsls	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	bffdfff8 	.word	0xbffdfff8
 80026ac:	cccccccd 	.word	0xcccccccd
 80026b0:	40020000 	.word	0x40020000

080026b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c2:	e14e      	b.n	8002962 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8140 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d005      	beq.n	80026f4 <HAL_GPIO_Init+0x40>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d130      	bne.n	8002756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4013      	ands	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272a:	2201      	movs	r2, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43db      	mvns	r3, r3
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	091b      	lsrs	r3, r3, #4
 8002740:	f003 0201 	and.w	r2, r3, #1
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d017      	beq.n	8002792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	4313      	orrs	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 809a 	beq.w	800295c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a54      	ldr	r2, [pc, #336]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_GPIO_Init+0x2cc>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	3302      	adds	r3, #2
 8002848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4013      	ands	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286a:	d013      	beq.n	8002894 <HAL_GPIO_Init+0x1e0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_GPIO_Init+0x2d4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00d      	beq.n	8002890 <HAL_GPIO_Init+0x1dc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a45      	ldr	r2, [pc, #276]	; (800298c <HAL_GPIO_Init+0x2d8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <HAL_GPIO_Init+0x1d8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a44      	ldr	r2, [pc, #272]	; (8002990 <HAL_GPIO_Init+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d101      	bne.n	8002888 <HAL_GPIO_Init+0x1d4>
 8002884:	2303      	movs	r3, #3
 8002886:	e006      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002888:	2305      	movs	r3, #5
 800288a:	e004      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 800288c:	2302      	movs	r3, #2
 800288e:	e002      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_GPIO_Init+0x1e2>
 8002894:	2300      	movs	r3, #0
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	f002 0203 	and.w	r2, r2, #3
 800289c:	0092      	lsls	r2, r2, #2
 800289e:	4093      	lsls	r3, r2
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a6:	4937      	ldr	r1, [pc, #220]	; (8002984 <HAL_GPIO_Init+0x2d0>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43db      	mvns	r3, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d8:	4a2e      	ldr	r2, [pc, #184]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028de:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002902:	4a24      	ldr	r2, [pc, #144]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002956:	4a0f      	ldr	r2, [pc, #60]	; (8002994 <HAL_GPIO_Init+0x2e0>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	f47f aea9 	bne.w	80026c4 <HAL_GPIO_Init+0x10>
  }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	f000 bef4 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 816a 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029f2:	4bb3      	ldr	r3, [pc, #716]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029fe:	4bb0      	ldr	r3, [pc, #704]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d159      	bne.n	8002abe <HAL_RCC_OscConfig+0xf6>
 8002a0a:	4bad      	ldr	r3, [pc, #692]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a16:	d152      	bne.n	8002abe <HAL_RCC_OscConfig+0xf6>
 8002a18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a1c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a2c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	fab3 f383 	clz	r3, r3
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d102      	bne.n	8002a4a <HAL_RCC_OscConfig+0x82>
 8002a44:	4b9e      	ldr	r3, [pc, #632]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0xae>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a62:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a66:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a72:	4b93      	ldr	r3, [pc, #588]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a7a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a7e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a8a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 810c 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x2fc>
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 8106 	bne.w	8002cc4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f000 be86 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x110>
 8002aca:	4b7d      	ldr	r3, [pc, #500]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7c      	ldr	r2, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e030      	b.n	8002b3a <HAL_RCC_OscConfig+0x172>
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x134>
 8002ae2:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a76      	ldr	r2, [pc, #472]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b74      	ldr	r3, [pc, #464]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a73      	ldr	r2, [pc, #460]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01e      	b.n	8002b3a <HAL_RCC_OscConfig+0x172>
 8002afc:	1d3b      	adds	r3, r7, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x15a>
 8002b08:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6c      	ldr	r2, [pc, #432]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a69      	ldr	r2, [pc, #420]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e00b      	b.n	8002b3a <HAL_RCC_OscConfig+0x172>
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a66      	ldr	r2, [pc, #408]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b64      	ldr	r3, [pc, #400]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a63      	ldr	r2, [pc, #396]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3a:	4b61      	ldr	r3, [pc, #388]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	f023 020f 	bic.w	r2, r3, #15
 8002b42:	1d3b      	adds	r3, r7, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	495d      	ldr	r1, [pc, #372]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d059      	beq.n	8002c0c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fbb6 	bl	80012c8 <HAL_GetTick>
 8002b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b62:	f7fe fbb1 	bl	80012c8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d902      	bls.n	8002b78 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	f000 be29 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
 8002b78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d102      	bne.n	8002baa <HAL_RCC_OscConfig+0x1e2>
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x20e>
 8002baa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bae:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bc6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bd2:	4b3b      	ldr	r3, [pc, #236]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bda:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bde:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bea:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f042 0220 	orr.w	r2, r2, #32
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	f002 021f 	and.w	r2, r2, #31
 8002bfe:	2101      	movs	r1, #1
 8002c00:	fa01 f202 	lsl.w	r2, r1, r2
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0ab      	beq.n	8002b62 <HAL_RCC_OscConfig+0x19a>
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fb5c 	bl	80012c8 <HAL_GetTick>
 8002c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c16:	f7fe fb57 	bl	80012c8 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d902      	bls.n	8002c2c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	f000 bdcf 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
 8002c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c30:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c34:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c40:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_OscConfig+0x296>
 8002c58:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	e015      	b.n	8002c8a <HAL_RCC_OscConfig+0x2c2>
 8002c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c62:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c76:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c7a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c86:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_RCC_OscConfig+0x2f8>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c8e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c92:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c9e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1ab      	bne.n	8002c16 <HAL_RCC_OscConfig+0x24e>
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2fe>
 8002cc0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 816f 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cd6:	4bd0      	ldr	r3, [pc, #832]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ce2:	4bcd      	ldr	r3, [pc, #820]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d16c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x400>
 8002cee:	4bca      	ldr	r3, [pc, #808]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d166      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x400>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d102      	bne.n	8002d2a <HAL_RCC_OscConfig+0x362>
 8002d24:	4bbc      	ldr	r3, [pc, #752]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	e013      	b.n	8002d52 <HAL_RCC_OscConfig+0x38a>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d4e:	4bb2      	ldr	r3, [pc, #712]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	2202      	movs	r2, #2
 8002d54:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d58:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d5c:	fa92 f2a2 	rbit	r2, r2
 8002d60:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d64:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d68:	fab2 f282 	clz	r2, r2
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	f002 021f 	and.w	r2, r2, #31
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d002      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f000 bd1b 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4ba0      	ldr	r3, [pc, #640]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	21f8      	movs	r1, #248	; 0xf8
 8002da4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dac:	fa91 f1a1 	rbit	r1, r1
 8002db0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002db4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002db8:	fab1 f181 	clz	r1, r1
 8002dbc:	b2c9      	uxtb	r1, r1
 8002dbe:	408b      	lsls	r3, r1
 8002dc0:	4995      	ldr	r1, [pc, #596]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e0f5      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8085 	beq.w	8002ede <HAL_RCC_OscConfig+0x516>
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002de6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fa62 	bl	80012c8 <HAL_GetTick>
 8002e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fa5d 	bl	80012c8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f000 bcd5 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
 8002e20:	2302      	movs	r3, #2
 8002e22:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x488>
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b0>
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e68:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e74:	4b68      	ldr	r3, [pc, #416]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e7e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e8a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0af      	beq.n	8002e0a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	21f8      	movs	r1, #248	; 0xf8
 8002eba:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ec2:	fa91 f1a1 	rbit	r1, r1
 8002ec6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002eca:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ece:	fab1 f181 	clz	r1, r1
 8002ed2:	b2c9      	uxtb	r1, r1
 8002ed4:	408b      	lsls	r3, r1
 8002ed6:	4950      	ldr	r1, [pc, #320]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e06a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5ec>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002ef0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002efe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	461a      	mov	r2, r3
 8002f06:	2300      	movs	r3, #0
 8002f08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f9dd 	bl	80012c8 <HAL_GetTick>
 8002f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f14:	f7fe f9d8 	bl	80012c8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d902      	bls.n	8002f2a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	f000 bc50 	b.w	80037ca <HAL_RCC_OscConfig+0xe02>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <HAL_RCC_OscConfig+0x592>
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	e013      	b.n	8002f82 <HAL_RCC_OscConfig+0x5ba>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f72:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f7e:	4b26      	ldr	r3, [pc, #152]	; (8003018 <HAL_RCC_OscConfig+0x650>)
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2202      	movs	r2, #2
 8002f84:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f88:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f8c:	fa92 f2a2 	rbit	r2, r2
 8002f90:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f94:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f98:	fab2 f282 	clz	r2, r2
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	f042 0220 	orr.w	r2, r2, #32
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	f002 021f 	and.w	r2, r2, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1af      	bne.n	8002f14 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80da 	beq.w	8003178 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d069      	beq.n	80030a2 <HAL_RCC_OscConfig+0x6da>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fd8:	fa93 f3a3 	rbit	r3, r3
 8002fdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x654>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7fe f966 	bl	80012c8 <HAL_GetTick>
 8002ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003000:	e00e      	b.n	8003020 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe f961 	bl	80012c8 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d906      	bls.n	8003020 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e3d9      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	10908120 	.word	0x10908120
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003032:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003036:	2202      	movs	r2, #2
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800304e:	2202      	movs	r2, #2
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	fa93 f2a3 	rbit	r2, r3
 800305c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003060:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4ba5      	ldr	r3, [pc, #660]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003066:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800306a:	2102      	movs	r1, #2
 800306c:	6019      	str	r1, [r3, #0]
 800306e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	fa93 f1a3 	rbit	r1, r3
 8003078:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800307c:	6019      	str	r1, [r3, #0]
  return result;
 800307e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2101      	movs	r1, #1
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0b0      	beq.n	8003002 <HAL_RCC_OscConfig+0x63a>
 80030a0:	e06a      	b.n	8003178 <HAL_RCC_OscConfig+0x7b0>
 80030a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	fa93 f2a3 	rbit	r2, r3
 80030b4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030b8:	601a      	str	r2, [r3, #0]
  return result;
 80030ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030be:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b8c      	ldr	r3, [pc, #560]	; (80032fc <HAL_RCC_OscConfig+0x934>)
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	461a      	mov	r2, r3
 80030d0:	2300      	movs	r3, #0
 80030d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d4:	f7fe f8f8 	bl	80012c8 <HAL_GetTick>
 80030d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e009      	b.n	80030f2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe f8f3 	bl	80012c8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e36b      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 80030f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030f6:	2202      	movs	r2, #2
 80030f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800310e:	2202      	movs	r2, #2
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	fa93 f2a3 	rbit	r2, r3
 800311c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003126:	2202      	movs	r2, #2
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	fa93 f2a3 	rbit	r2, r3
 8003134:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003138:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313a:	4b6f      	ldr	r3, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800313c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003142:	2102      	movs	r1, #2
 8003144:	6019      	str	r1, [r3, #0]
 8003146:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	fa93 f1a3 	rbit	r1, r3
 8003150:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003154:	6019      	str	r1, [r3, #0]
  return result;
 8003156:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1b2      	bne.n	80030de <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003178:	1d3b      	adds	r3, r7, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8158 	beq.w	8003438 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003188:	2300      	movs	r3, #0
 800318a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318e:	4b5a      	ldr	r3, [pc, #360]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d112      	bne.n	80031c0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319a:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 80031a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a4:	61d3      	str	r3, [r2, #28]
 80031a6:	4b54      	ldr	r3, [pc, #336]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b4f      	ldr	r3, [pc, #316]	; (8003300 <HAL_RCC_OscConfig+0x938>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11a      	bne.n	8003202 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031cc:	4b4c      	ldr	r3, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x938>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4b      	ldr	r2, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x938>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d8:	f7fe f876 	bl	80012c8 <HAL_GetTick>
 80031dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	e009      	b.n	80031f6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031e2:	f7fe f871 	bl	80012c8 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e2e9      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b42      	ldr	r3, [pc, #264]	; (8003300 <HAL_RCC_OscConfig+0x938>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ef      	beq.n	80031e2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003202:	1d3b      	adds	r3, r7, #4
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d106      	bne.n	800321a <HAL_RCC_OscConfig+0x852>
 800320c:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	e02f      	b.n	800327a <HAL_RCC_OscConfig+0x8b2>
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10c      	bne.n	800323e <HAL_RCC_OscConfig+0x876>
 8003224:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a33      	ldr	r2, [pc, #204]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	4b31      	ldr	r3, [pc, #196]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	e01d      	b.n	800327a <HAL_RCC_OscConfig+0x8b2>
 800323e:	1d3b      	adds	r3, r7, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b05      	cmp	r3, #5
 8003246:	d10c      	bne.n	8003262 <HAL_RCC_OscConfig+0x89a>
 8003248:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800324e:	f043 0304 	orr.w	r3, r3, #4
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	4b28      	ldr	r3, [pc, #160]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	e00b      	b.n	800327a <HAL_RCC_OscConfig+0x8b2>
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	6213      	str	r3, [r2, #32]
 800326e:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d06b      	beq.n	800335c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fe f820 	bl	80012c8 <HAL_GetTick>
 8003288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328e:	f7fe f81b 	bl	80012c8 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e291      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 80032a6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032aa:	2202      	movs	r2, #2
 80032ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032c2:	2202      	movs	r2, #2
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	fa93 f2a3 	rbit	r2, r3
 80032d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032d4:	601a      	str	r2, [r3, #0]
  return result;
 80032d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f043 0302 	orr.w	r3, r3, #2
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d109      	bne.n	8003304 <HAL_RCC_OscConfig+0x93c>
 80032f0:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_RCC_OscConfig+0x930>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	e014      	b.n	8003320 <HAL_RCC_OscConfig+0x958>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	10908120 	.word	0x10908120
 8003300:	40007000 	.word	0x40007000
 8003304:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003308:	2202      	movs	r2, #2
 800330a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fa93 f2a3 	rbit	r2, r3
 8003316:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	4bbb      	ldr	r3, [pc, #748]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003324:	2102      	movs	r1, #2
 8003326:	6011      	str	r1, [r2, #0]
 8003328:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	fa92 f1a2 	rbit	r1, r2
 8003332:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003336:	6011      	str	r1, [r2, #0]
  return result;
 8003338:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	fab2 f282 	clz	r2, r2
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f002 021f 	and.w	r2, r2, #31
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f202 	lsl.w	r2, r1, r2
 8003354:	4013      	ands	r3, r2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d099      	beq.n	800328e <HAL_RCC_OscConfig+0x8c6>
 800335a:	e063      	b.n	8003424 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fd ffb4 	bl	80012c8 <HAL_GetTick>
 8003360:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	e00b      	b.n	800337e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fd ffaf 	bl	80012c8 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e225      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 800337e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003382:	2202      	movs	r2, #2
 8003384:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	fa93 f2a3 	rbit	r2, r3
 8003390:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033ac:	601a      	str	r2, [r3, #0]
  return result;
 80033ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d102      	bne.n	80033ce <HAL_RCC_OscConfig+0xa06>
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	e00d      	b.n	80033ea <HAL_RCC_OscConfig+0xa22>
 80033ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033d2:	2202      	movs	r2, #2
 80033d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	fa93 f2a3 	rbit	r2, r3
 80033e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b89      	ldr	r3, [pc, #548]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033ee:	2102      	movs	r1, #2
 80033f0:	6011      	str	r1, [r2, #0]
 80033f2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	fa92 f1a2 	rbit	r1, r2
 80033fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003400:	6011      	str	r1, [r2, #0]
  return result;
 8003402:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1a0      	bne.n	8003366 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003424:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b77      	ldr	r3, [pc, #476]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4a76      	ldr	r2, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	1d3b      	adds	r3, r7, #4
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 81c2 	beq.w	80037c8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b71      	ldr	r3, [pc, #452]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	f000 819c 	beq.w	800378a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003452:	1d3b      	adds	r3, r7, #4
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b02      	cmp	r3, #2
 800345a:	f040 8114 	bne.w	8003686 <HAL_RCC_OscConfig+0xcbe>
 800345e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	fa93 f2a3 	rbit	r2, r3
 8003472:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003476:	601a      	str	r2, [r3, #0]
  return result;
 8003478:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800347c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003488:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	461a      	mov	r2, r3
 8003490:	2300      	movs	r3, #0
 8003492:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fd ff18 	bl	80012c8 <HAL_GetTick>
 8003498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	e009      	b.n	80034b2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349e:	f7fd ff13 	bl	80012c8 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e18b      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 80034b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	fa93 f2a3 	rbit	r2, r3
 80034c6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034ca:	601a      	str	r2, [r3, #0]
  return result;
 80034cc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d102      	bne.n	80034ec <HAL_RCC_OscConfig+0xb24>
 80034e6:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	e01b      	b.n	8003524 <HAL_RCC_OscConfig+0xb5c>
 80034ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	fa93 f2a3 	rbit	r2, r3
 8003500:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800350a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	fa93 f2a3 	rbit	r2, r3
 800351a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b3a      	ldr	r3, [pc, #232]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003528:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	fa92 f1a2 	rbit	r1, r2
 8003538:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800353c:	6011      	str	r1, [r2, #0]
  return result;
 800353e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	fab2 f282 	clz	r2, r2
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	f042 0220 	orr.w	r2, r2, #32
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f002 021f 	and.w	r2, r2, #31
 8003554:	2101      	movs	r1, #1
 8003556:	fa01 f202 	lsl.w	r2, r1, r2
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d19e      	bne.n	800349e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	430b      	orrs	r3, r1
 8003576:	4925      	ldr	r1, [pc, #148]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003578:	4313      	orrs	r3, r2
 800357a:	604b      	str	r3, [r1, #4]
 800357c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fa93 f2a3 	rbit	r2, r3
 8003590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003594:	601a      	str	r2, [r3, #0]
  return result;
 8003596:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800359a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	461a      	mov	r2, r3
 80035ae:	2301      	movs	r3, #1
 80035b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b2:	f7fd fe89 	bl	80012c8 <HAL_GetTick>
 80035b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ba:	e009      	b.n	80035d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035bc:	f7fd fe84 	bl	80012c8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0fc      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 80035d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	fa93 f2a3 	rbit	r2, r3
 80035e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035e8:	601a      	str	r2, [r3, #0]
  return result;
 80035ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f0:	fab3 f383 	clz	r3, r3
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_RCC_OscConfig+0xc48>
 8003604:	4b01      	ldr	r3, [pc, #4]	; (800360c <HAL_RCC_OscConfig+0xc44>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e01e      	b.n	8003648 <HAL_RCC_OscConfig+0xc80>
 800360a:	bf00      	nop
 800360c:	40021000 	.word	0x40021000
 8003610:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003614:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003618:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f2a3 	rbit	r2, r3
 8003624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800362e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	fa93 f2a3 	rbit	r2, r3
 800363e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	4b63      	ldr	r3, [pc, #396]	; (80037d4 <HAL_RCC_OscConfig+0xe0c>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800364c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003650:	6011      	str	r1, [r2, #0]
 8003652:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	fa92 f1a2 	rbit	r1, r2
 800365c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003660:	6011      	str	r1, [r2, #0]
  return result;
 8003662:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d09b      	beq.n	80035bc <HAL_RCC_OscConfig+0xbf4>
 8003684:	e0a0      	b.n	80037c8 <HAL_RCC_OscConfig+0xe00>
 8003686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800368a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369e:	601a      	str	r2, [r3, #0]
  return result;
 80036a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	461a      	mov	r2, r3
 80036b8:	2300      	movs	r3, #0
 80036ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036bc:	f7fd fe04 	bl	80012c8 <HAL_GetTick>
 80036c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c4:	e009      	b.n	80036da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c6:	f7fd fdff 	bl	80012c8 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e077      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
 80036da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fa93 f2a3 	rbit	r2, r3
 80036ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f2:	601a      	str	r2, [r3, #0]
  return result;
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_RCC_OscConfig+0xd4c>
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_RCC_OscConfig+0xe0c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0xd84>
 8003714:	f107 0320 	add.w	r3, r7, #32
 8003718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f107 0320 	add.w	r3, r7, #32
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	fa93 f2a3 	rbit	r2, r3
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f107 0318 	add.w	r3, r7, #24
 8003732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	f107 0318 	add.w	r3, r7, #24
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	fa93 f2a3 	rbit	r2, r3
 8003742:	f107 0314 	add.w	r3, r7, #20
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <HAL_RCC_OscConfig+0xe0c>)
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f107 0210 	add.w	r2, r7, #16
 8003750:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003754:	6011      	str	r1, [r2, #0]
 8003756:	f107 0210 	add.w	r2, r7, #16
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	fa92 f1a2 	rbit	r1, r2
 8003760:	f107 020c 	add.w	r2, r7, #12
 8003764:	6011      	str	r1, [r2, #0]
  return result;
 8003766:	f107 020c 	add.w	r2, r7, #12
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	fab2 f282 	clz	r2, r2
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	f042 0220 	orr.w	r2, r2, #32
 8003776:	b2d2      	uxtb	r2, r2
 8003778:	f002 021f 	and.w	r2, r2, #31
 800377c:	2101      	movs	r1, #1
 800377e:	fa01 f202 	lsl.w	r2, r1, r2
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d19e      	bne.n	80036c6 <HAL_RCC_OscConfig+0xcfe>
 8003788:	e01e      	b.n	80037c8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800378a:	1d3b      	adds	r3, r7, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e018      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_RCC_OscConfig+0xe0c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037a0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a8:	1d3b      	adds	r3, r7, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d108      	bne.n	80037c4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40021000 	.word	0x40021000

080037d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b09e      	sub	sp, #120	; 0x78
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e162      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037f0:	4b90      	ldr	r3, [pc, #576]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d910      	bls.n	8003820 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b8d      	ldr	r3, [pc, #564]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 0207 	bic.w	r2, r3, #7
 8003806:	498b      	ldr	r1, [pc, #556]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	4313      	orrs	r3, r2
 800380c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	4b89      	ldr	r3, [pc, #548]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e14a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382c:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	497f      	ldr	r1, [pc, #508]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 80dc 	beq.w	8003a04 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d13c      	bne.n	80038ce <HAL_RCC_ClockConfig+0xf6>
 8003854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003858:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800385c:	fa93 f3a3 	rbit	r3, r3
 8003860:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_RCC_ClockConfig+0xa6>
 8003878:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	e00f      	b.n	800389e <HAL_RCC_ClockConfig+0xc6>
 800387e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003882:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	667b      	str	r3, [r7, #100]	; 0x64
 800388c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003890:	663b      	str	r3, [r7, #96]	; 0x60
 8003892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003894:	fa93 f3a3 	rbit	r3, r3
 8003898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80038a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ae:	fab2 f282 	clz	r2, r2
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	f042 0220 	orr.w	r2, r2, #32
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f002 021f 	and.w	r2, r2, #31
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d17b      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0f3      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d13c      	bne.n	8003950 <HAL_RCC_ClockConfig+0x178>
 80038d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038de:	fa93 f3a3 	rbit	r3, r3
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_ClockConfig+0x128>
 80038fa:	4b4f      	ldr	r3, [pc, #316]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	e00f      	b.n	8003920 <HAL_RCC_ClockConfig+0x148>
 8003900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003904:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003908:	fa93 f3a3 	rbit	r3, r3
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
 800390e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003912:	643b      	str	r3, [r7, #64]	; 0x40
 8003914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003916:	fa93 f3a3 	rbit	r3, r3
 800391a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391c:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003924:	63ba      	str	r2, [r7, #56]	; 0x38
 8003926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003928:	fa92 f2a2 	rbit	r2, r2
 800392c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800392e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d13a      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b2      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
 8003950:	2302      	movs	r3, #2
 8003952:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800395c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d102      	bne.n	8003978 <HAL_RCC_ClockConfig+0x1a0>
 8003972:	4b31      	ldr	r3, [pc, #196]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	e00d      	b.n	8003994 <HAL_RCC_ClockConfig+0x1bc>
 8003978:	2302      	movs	r3, #2
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
 8003984:	2302      	movs	r3, #2
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2202      	movs	r2, #2
 8003996:	61ba      	str	r2, [r7, #24]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	fa92 f2a2 	rbit	r2, r2
 800399e:	617a      	str	r2, [r7, #20]
  return result;
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	fab2 f282 	clz	r2, r2
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	f042 0220 	orr.w	r2, r2, #32
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	f002 021f 	and.w	r2, r2, #31
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f202 	lsl.w	r2, r1, r2
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e079      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	491a      	ldr	r1, [pc, #104]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fd fc78 	bl	80012c8 <HAL_GetTick>
 80039d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fd fc74 	bl	80012c8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e061      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d214      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4906      	ldr	r1, [pc, #24]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCC_ClockConfig+0x25c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e040      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x2de>
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	491a      	ldr	r1, [pc, #104]	; (8003ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b16      	ldr	r3, [pc, #88]	; (8003ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4912      	ldr	r1, [pc, #72]	; (8003ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a7a:	f000 f829 	bl	8003ad0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4601      	mov	r1, r0
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a88:	22f0      	movs	r2, #240	; 0xf0
 8003a8a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	fa92 f2a2 	rbit	r2, r2
 8003a92:	60fa      	str	r2, [r7, #12]
  return result;
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	fab2 f282 	clz	r2, r2
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	40d3      	lsrs	r3, r2
 8003a9e:	4a09      	ldr	r2, [pc, #36]	; (8003ac4 <HAL_RCC_ClockConfig+0x2ec>)
 8003aa0:	5cd3      	ldrb	r3, [r2, r3]
 8003aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8003aa6:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_RCC_ClockConfig+0x2f0>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <HAL_RCC_ClockConfig+0x2f4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fbc6 	bl	8001240 <HAL_InitTick>
  
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3778      	adds	r7, #120	; 0x78
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	08004c20 	.word	0x08004c20
 8003ac8:	2000002c 	.word	0x2000002c
 8003acc:	20000030 	.word	0x20000030

08003ad0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b08b      	sub	sp, #44	; 0x2c
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003aea:	4b29      	ldr	r3, [pc, #164]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d002      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x30>
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d003      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x36>
 8003afe:	e03c      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b00:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b02:	623b      	str	r3, [r7, #32]
      break;
 8003b04:	e03c      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	607a      	str	r2, [r7, #4]
  return result;
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	40d3      	lsrs	r3, r2
 8003b24:	4a1c      	ldr	r2, [pc, #112]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b2a:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	220f      	movs	r2, #15
 8003b34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	fa92 f2a2 	rbit	r2, r2
 8003b3c:	60fa      	str	r2, [r7, #12]
  return result;
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	40d3      	lsrs	r3, r2
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b4a:	5cd3      	ldrb	r3, [r2, r3]
 8003b4c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b58:	4a0e      	ldr	r2, [pc, #56]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	e004      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	623b      	str	r3, [r7, #32]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b7c:	623b      	str	r3, [r7, #32]
      break;
 8003b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	372c      	adds	r7, #44	; 0x2c
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	007a1200 	.word	0x007a1200
 8003b98:	08004c30 	.word	0x08004c30
 8003b9c:	08004c40 	.word	0x08004c40
 8003ba0:	003d0900 	.word	0x003d0900

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b092      	sub	sp, #72	; 0x48
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80cd 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc8:	4b8e      	ldr	r3, [pc, #568]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b8b      	ldr	r3, [pc, #556]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a8a      	ldr	r2, [pc, #552]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
 8003be0:	4b88      	ldr	r3, [pc, #544]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b82      	ldr	r3, [pc, #520]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a81      	ldr	r2, [pc, #516]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fb5d 	bl	80012c8 <HAL_GetTick>
 8003c0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fb59 	bl	80012c8 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0ea      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b78      	ldr	r3, [pc, #480]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c30:	4b74      	ldr	r3, [pc, #464]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d07d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d076      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b66      	ldr	r3, [pc, #408]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d045      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fb0a 	bl	80012c8 <HAL_GetTick>
 8003cb4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fb06 	bl	80012c8 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e095      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	2302      	movs	r3, #2
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	e007      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2202      	movs	r2, #2
 8003d14:	613a      	str	r2, [r7, #16]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	fa92 f2a2 	rbit	r2, r2
 8003d1c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f002 021f 	and.w	r2, r2, #31
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0bd      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d3c:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	492e      	ldr	r1, [pc, #184]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a2a      	ldr	r2, [pc, #168]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4922      	ldr	r1, [pc, #136]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	491a      	ldr	r1, [pc, #104]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4913      	ldr	r1, [pc, #76]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	490b      	ldr	r1, [pc, #44]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3748      	adds	r7, #72	; 0x48
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	10908100 	.word	0x10908100

08003e10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e049      	b.n	8003eb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fd f924 	bl	8001084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f000 fa84 	bl	800435c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <HAL_TIM_PWM_Start_IT+0x28>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e03c      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0xa2>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d109      	bne.n	8003f02 <HAL_TIM_PWM_Start_IT+0x42>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e02f      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0xa2>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d109      	bne.n	8003f1c <HAL_TIM_PWM_Start_IT+0x5c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e022      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0xa2>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d109      	bne.n	8003f36 <HAL_TIM_PWM_Start_IT+0x76>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	bf14      	ite	ne
 8003f2e:	2301      	movne	r3, #1
 8003f30:	2300      	moveq	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e015      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0xa2>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PWM_Start_IT+0x90>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e008      	b.n	8003f62 <HAL_TIM_PWM_Start_IT+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e0d3      	b.n	8004112 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Start_IT+0xba>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f78:	e023      	b.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x102>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Start_IT+0xca>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	e01b      	b.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x102>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d104      	bne.n	8003f9a <HAL_TIM_PWM_Start_IT+0xda>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f98:	e013      	b.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x102>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d104      	bne.n	8003faa <HAL_TIM_PWM_Start_IT+0xea>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa8:	e00b      	b.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x102>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_PWM_Start_IT+0xfa>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb8:	e003      	b.n	8003fc2 <HAL_TIM_PWM_Start_IT+0x102>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d841      	bhi.n	800404c <HAL_TIM_PWM_Start_IT+0x18c>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <HAL_TIM_PWM_Start_IT+0x110>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	0800404d 	.word	0x0800404d
 8003fd8:	0800404d 	.word	0x0800404d
 8003fdc:	0800404d 	.word	0x0800404d
 8003fe0:	08004017 	.word	0x08004017
 8003fe4:	0800404d 	.word	0x0800404d
 8003fe8:	0800404d 	.word	0x0800404d
 8003fec:	0800404d 	.word	0x0800404d
 8003ff0:	08004029 	.word	0x08004029
 8003ff4:	0800404d 	.word	0x0800404d
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	0800404d 	.word	0x0800404d
 8004000:	0800403b 	.word	0x0800403b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 0202 	orr.w	r2, r2, #2
 8004012:	60da      	str	r2, [r3, #12]
      break;
 8004014:	e01d      	b.n	8004052 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0204 	orr.w	r2, r2, #4
 8004024:	60da      	str	r2, [r3, #12]
      break;
 8004026:	e014      	b.n	8004052 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0208 	orr.w	r2, r2, #8
 8004036:	60da      	str	r2, [r3, #12]
      break;
 8004038:	e00b      	b.n	8004052 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0210 	orr.w	r2, r2, #16
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e002      	b.n	8004052 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	bf00      	nop
  }

  if (status == HAL_OK)
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d15b      	bne.n	8004110 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2201      	movs	r2, #1
 800405e:	6839      	ldr	r1, [r7, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fc99 	bl	8004998 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2c      	ldr	r2, [pc, #176]	; (800411c <HAL_TIM_PWM_Start_IT+0x25c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_TIM_PWM_Start_IT+0x260>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d009      	beq.n	800408e <HAL_TIM_PWM_Start_IT+0x1ce>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a29      	ldr	r2, [pc, #164]	; (8004124 <HAL_TIM_PWM_Start_IT+0x264>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d004      	beq.n	800408e <HAL_TIM_PWM_Start_IT+0x1ce>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_TIM_PWM_Start_IT+0x268>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d101      	bne.n	8004092 <HAL_TIM_PWM_Start_IT+0x1d2>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <HAL_TIM_PWM_Start_IT+0x25c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00e      	beq.n	80040d0 <HAL_TIM_PWM_Start_IT+0x210>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ba:	d009      	beq.n	80040d0 <HAL_TIM_PWM_Start_IT+0x210>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1a      	ldr	r2, [pc, #104]	; (800412c <HAL_TIM_PWM_Start_IT+0x26c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIM_PWM_Start_IT+0x210>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a15      	ldr	r2, [pc, #84]	; (8004120 <HAL_TIM_PWM_Start_IT+0x260>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d115      	bne.n	80040fc <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	4b16      	ldr	r3, [pc, #88]	; (8004130 <HAL_TIM_PWM_Start_IT+0x270>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b06      	cmp	r3, #6
 80040e0:	d015      	beq.n	800410e <HAL_TIM_PWM_Start_IT+0x24e>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d011      	beq.n	800410e <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	e008      	b.n	800410e <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	e000      	b.n	8004110 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800410e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40012c00 	.word	0x40012c00
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40000400 	.word	0x40000400
 8004130:	00010007 	.word	0x00010007

08004134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414e:	2302      	movs	r3, #2
 8004150:	e0ff      	b.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b14      	cmp	r3, #20
 800415e:	f200 80f0 	bhi.w	8004342 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004162:	a201      	add	r2, pc, #4	; (adr r2, 8004168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004168:	080041bd 	.word	0x080041bd
 800416c:	08004343 	.word	0x08004343
 8004170:	08004343 	.word	0x08004343
 8004174:	08004343 	.word	0x08004343
 8004178:	080041fd 	.word	0x080041fd
 800417c:	08004343 	.word	0x08004343
 8004180:	08004343 	.word	0x08004343
 8004184:	08004343 	.word	0x08004343
 8004188:	0800423f 	.word	0x0800423f
 800418c:	08004343 	.word	0x08004343
 8004190:	08004343 	.word	0x08004343
 8004194:	08004343 	.word	0x08004343
 8004198:	0800427f 	.word	0x0800427f
 800419c:	08004343 	.word	0x08004343
 80041a0:	08004343 	.word	0x08004343
 80041a4:	08004343 	.word	0x08004343
 80041a8:	080042c1 	.word	0x080042c1
 80041ac:	08004343 	.word	0x08004343
 80041b0:	08004343 	.word	0x08004343
 80041b4:	08004343 	.word	0x08004343
 80041b8:	08004301 	.word	0x08004301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f942 	bl	800444c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	619a      	str	r2, [r3, #24]
      break;
 80041fa:	e0a5      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f9a8 	bl	8004558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	619a      	str	r2, [r3, #24]
      break;
 800423c:	e084      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa07 	bl	8004658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69da      	ldr	r2, [r3, #28]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0208 	orr.w	r2, r2, #8
 8004258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0204 	bic.w	r2, r2, #4
 8004268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69d9      	ldr	r1, [r3, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	61da      	str	r2, [r3, #28]
      break;
 800427c:	e064      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fa65 	bl	8004754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	021a      	lsls	r2, r3, #8
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	61da      	str	r2, [r3, #28]
      break;
 80042be:	e043      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 faa8 	bl	800481c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0208 	orr.w	r2, r2, #8
 80042da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0204 	bic.w	r2, r2, #4
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042fe:	e023      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fae6 	bl	80048d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	021a      	lsls	r2, r3, #8
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004340:	e002      	b.n	8004348 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004350:	7dfb      	ldrb	r3, [r7, #23]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop

0800435c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a32      	ldr	r2, [pc, #200]	; (8004438 <TIM_Base_SetConfig+0xdc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x28>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x28>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <TIM_Base_SetConfig+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a27      	ldr	r2, [pc, #156]	; (8004438 <TIM_Base_SetConfig+0xdc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d013      	beq.n	80043c6 <TIM_Base_SetConfig+0x6a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d00f      	beq.n	80043c6 <TIM_Base_SetConfig+0x6a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a24      	ldr	r2, [pc, #144]	; (800443c <TIM_Base_SetConfig+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00b      	beq.n	80043c6 <TIM_Base_SetConfig+0x6a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a23      	ldr	r2, [pc, #140]	; (8004440 <TIM_Base_SetConfig+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d007      	beq.n	80043c6 <TIM_Base_SetConfig+0x6a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a22      	ldr	r2, [pc, #136]	; (8004444 <TIM_Base_SetConfig+0xe8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d003      	beq.n	80043c6 <TIM_Base_SetConfig+0x6a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a21      	ldr	r2, [pc, #132]	; (8004448 <TIM_Base_SetConfig+0xec>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d108      	bne.n	80043d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <TIM_Base_SetConfig+0xdc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d00b      	beq.n	800441c <TIM_Base_SetConfig+0xc0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a0e      	ldr	r2, [pc, #56]	; (8004440 <TIM_Base_SetConfig+0xe4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d007      	beq.n	800441c <TIM_Base_SetConfig+0xc0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0d      	ldr	r2, [pc, #52]	; (8004444 <TIM_Base_SetConfig+0xe8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_Base_SetConfig+0xc0>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <TIM_Base_SetConfig+0xec>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	615a      	str	r2, [r3, #20]
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40000400 	.word	0x40000400
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800

0800444c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0303 	bic.w	r3, r3, #3
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0302 	bic.w	r3, r3, #2
 8004498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a28      	ldr	r2, [pc, #160]	; (8004548 <TIM_OC1_SetConfig+0xfc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00b      	beq.n	80044c4 <TIM_OC1_SetConfig+0x78>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a27      	ldr	r2, [pc, #156]	; (800454c <TIM_OC1_SetConfig+0x100>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_OC1_SetConfig+0x78>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a26      	ldr	r2, [pc, #152]	; (8004550 <TIM_OC1_SetConfig+0x104>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC1_SetConfig+0x78>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a25      	ldr	r2, [pc, #148]	; (8004554 <TIM_OC1_SetConfig+0x108>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10c      	bne.n	80044de <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0308 	bic.w	r3, r3, #8
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <TIM_OC1_SetConfig+0xfc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00b      	beq.n	80044fe <TIM_OC1_SetConfig+0xb2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a18      	ldr	r2, [pc, #96]	; (800454c <TIM_OC1_SetConfig+0x100>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d007      	beq.n	80044fe <TIM_OC1_SetConfig+0xb2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a17      	ldr	r2, [pc, #92]	; (8004550 <TIM_OC1_SetConfig+0x104>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d003      	beq.n	80044fe <TIM_OC1_SetConfig+0xb2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <TIM_OC1_SetConfig+0x108>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d111      	bne.n	8004522 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	621a      	str	r2, [r3, #32]
}
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40014000 	.word	0x40014000
 8004550:	40014400 	.word	0x40014400
 8004554:	40014800 	.word	0x40014800

08004558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0210 	bic.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <TIM_OC2_SetConfig+0xf0>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10d      	bne.n	80045d8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <TIM_OC2_SetConfig+0xf0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_OC2_SetConfig+0xa0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	; (800464c <TIM_OC2_SetConfig+0xf4>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_OC2_SetConfig+0xa0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a19      	ldr	r2, [pc, #100]	; (8004650 <TIM_OC2_SetConfig+0xf8>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0xa0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <TIM_OC2_SetConfig+0xfc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004606:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40014000 	.word	0x40014000
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <TIM_OC3_SetConfig+0xec>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10d      	bne.n	80046d6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <TIM_OC3_SetConfig+0xec>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00b      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a19      	ldr	r2, [pc, #100]	; (8004748 <TIM_OC3_SetConfig+0xf0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d007      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <TIM_OC3_SetConfig+0xf4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d003      	beq.n	80046f6 <TIM_OC3_SetConfig+0x9e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a17      	ldr	r2, [pc, #92]	; (8004750 <TIM_OC3_SetConfig+0xf8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d113      	bne.n	800471e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012c00 	.word	0x40012c00
 8004748:	40014000 	.word	0x40014000
 800474c:	40014400 	.word	0x40014400
 8004750:	40014800 	.word	0x40014800

08004754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a16      	ldr	r2, [pc, #88]	; (800480c <TIM_OC4_SetConfig+0xb8>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00b      	beq.n	80047d0 <TIM_OC4_SetConfig+0x7c>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a15      	ldr	r2, [pc, #84]	; (8004810 <TIM_OC4_SetConfig+0xbc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d007      	beq.n	80047d0 <TIM_OC4_SetConfig+0x7c>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a14      	ldr	r2, [pc, #80]	; (8004814 <TIM_OC4_SetConfig+0xc0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d003      	beq.n	80047d0 <TIM_OC4_SetConfig+0x7c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a13      	ldr	r2, [pc, #76]	; (8004818 <TIM_OC4_SetConfig+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d109      	bne.n	80047e4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	019b      	lsls	r3, r3, #6
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	621a      	str	r2, [r3, #32]
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800

0800481c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004860:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	041b      	lsls	r3, r3, #16
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a15      	ldr	r2, [pc, #84]	; (80048c8 <TIM_OC5_SetConfig+0xac>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00b      	beq.n	800488e <TIM_OC5_SetConfig+0x72>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <TIM_OC5_SetConfig+0xb0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d007      	beq.n	800488e <TIM_OC5_SetConfig+0x72>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <TIM_OC5_SetConfig+0xb4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d003      	beq.n	800488e <TIM_OC5_SetConfig+0x72>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <TIM_OC5_SetConfig+0xb8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d109      	bne.n	80048a2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004894:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	621a      	str	r2, [r3, #32]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800491e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	051b      	lsls	r3, r3, #20
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a16      	ldr	r2, [pc, #88]	; (8004988 <TIM_OC6_SetConfig+0xb0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00b      	beq.n	800494c <TIM_OC6_SetConfig+0x74>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a15      	ldr	r2, [pc, #84]	; (800498c <TIM_OC6_SetConfig+0xb4>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_OC6_SetConfig+0x74>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a14      	ldr	r2, [pc, #80]	; (8004990 <TIM_OC6_SetConfig+0xb8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC6_SetConfig+0x74>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a13      	ldr	r2, [pc, #76]	; (8004994 <TIM_OC6_SetConfig+0xbc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d109      	bne.n	8004960 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	029b      	lsls	r3, r3, #10
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	2201      	movs	r2, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	401a      	ands	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 031f 	and.w	r3, r3, #31
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	fa01 f303 	lsl.w	r3, r1, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	621a      	str	r2, [r3, #32]
}
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e054      	b.n	8004aa6 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d108      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a64:	d009      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a11      	ldr	r2, [pc, #68]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10c      	bne.n	8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40012c00 	.word	0x40012c00
 8004ab8:	40000400 	.word	0x40000400
 8004abc:	40014000 	.word	0x40014000

08004ac0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e060      	b.n	8004b9e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d115      	bne.n	8004b8c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	051b      	lsls	r3, r3, #20
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <__libc_init_array>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4d0d      	ldr	r5, [pc, #52]	; (8004be8 <__libc_init_array+0x38>)
 8004bb4:	4c0d      	ldr	r4, [pc, #52]	; (8004bec <__libc_init_array+0x3c>)
 8004bb6:	1b64      	subs	r4, r4, r5
 8004bb8:	10a4      	asrs	r4, r4, #2
 8004bba:	2600      	movs	r6, #0
 8004bbc:	42a6      	cmp	r6, r4
 8004bbe:	d109      	bne.n	8004bd4 <__libc_init_array+0x24>
 8004bc0:	4d0b      	ldr	r5, [pc, #44]	; (8004bf0 <__libc_init_array+0x40>)
 8004bc2:	4c0c      	ldr	r4, [pc, #48]	; (8004bf4 <__libc_init_array+0x44>)
 8004bc4:	f000 f820 	bl	8004c08 <_init>
 8004bc8:	1b64      	subs	r4, r4, r5
 8004bca:	10a4      	asrs	r4, r4, #2
 8004bcc:	2600      	movs	r6, #0
 8004bce:	42a6      	cmp	r6, r4
 8004bd0:	d105      	bne.n	8004bde <__libc_init_array+0x2e>
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd8:	4798      	blx	r3
 8004bda:	3601      	adds	r6, #1
 8004bdc:	e7ee      	b.n	8004bbc <__libc_init_array+0xc>
 8004bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be2:	4798      	blx	r3
 8004be4:	3601      	adds	r6, #1
 8004be6:	e7f2      	b.n	8004bce <__libc_init_array+0x1e>
 8004be8:	08004c50 	.word	0x08004c50
 8004bec:	08004c50 	.word	0x08004c50
 8004bf0:	08004c50 	.word	0x08004c50
 8004bf4:	08004c54 	.word	0x08004c54

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <_init>:
 8004c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0a:	bf00      	nop
 8004c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c0e:	bc08      	pop	{r3}
 8004c10:	469e      	mov	lr, r3
 8004c12:	4770      	bx	lr

08004c14 <_fini>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	bf00      	nop
 8004c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1a:	bc08      	pop	{r3}
 8004c1c:	469e      	mov	lr, r3
 8004c1e:	4770      	bx	lr
