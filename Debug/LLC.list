
LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f44  08004f44  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f44  08004f44  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f44  08004f44  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004f4c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000158  200000a0  200000a0  000200a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea21  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208f  00000000  00000000  0002eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bc8  00000000  00000000  00031840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021157  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f30b  00000000  00000000  0005355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a23  00000000  00000000  0006286a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012928d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003634  00000000  00000000  001292e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004efc 	.word	0x08004efc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	08004efc 	.word	0x08004efc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <INTEGRAL>:
volatile double ref = 0 ;
volatile double u0 = 0 ;

volatile double *adc = &y;

static void INTEGRAL(double *INT) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    //INTERGRAL INT
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <z1Value>:

static void z1Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af00      	add	r7, sp, #0
 8000980:	60f8      	str	r0, [r7, #12]
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	603b      	str	r3, [r7, #0]
    *z1p = (*z1p * axd11) + (*z2p * axd12) + (*z3p * axd13) + (*up * bxd11) + (*yp * bxd12);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <z1Value+0xd0>)
 8000990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000994:	f7ff fdd4 	bl	8000540 <__aeabi_dmul>
 8000998:	4602      	mov	r2, r0
 800099a:	460b      	mov	r3, r1
 800099c:	4614      	mov	r4, r2
 800099e:	461d      	mov	r5, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <z1Value+0xd4>)
 80009a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ac:	f7ff fdc8 	bl	8000540 <__aeabi_dmul>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	4620      	mov	r0, r4
 80009b6:	4629      	mov	r1, r5
 80009b8:	f7ff fc0c 	bl	80001d4 <__adddf3>
 80009bc:	4602      	mov	r2, r0
 80009be:	460b      	mov	r3, r1
 80009c0:	4614      	mov	r4, r2
 80009c2:	461d      	mov	r5, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009ca:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <z1Value+0xd8>)
 80009cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009d0:	f7ff fdb6 	bl	8000540 <__aeabi_dmul>
 80009d4:	4602      	mov	r2, r0
 80009d6:	460b      	mov	r3, r1
 80009d8:	4620      	mov	r0, r4
 80009da:	4629      	mov	r1, r5
 80009dc:	f7ff fbfa 	bl	80001d4 <__adddf3>
 80009e0:	4602      	mov	r2, r0
 80009e2:	460b      	mov	r3, r1
 80009e4:	4614      	mov	r4, r2
 80009e6:	461d      	mov	r5, r3
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <z1Value+0xdc>)
 80009f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f4:	f7ff fda4 	bl	8000540 <__aeabi_dmul>
 80009f8:	4602      	mov	r2, r0
 80009fa:	460b      	mov	r3, r1
 80009fc:	4620      	mov	r0, r4
 80009fe:	4629      	mov	r1, r5
 8000a00:	f7ff fbe8 	bl	80001d4 <__adddf3>
 8000a04:	4602      	mov	r2, r0
 8000a06:	460b      	mov	r3, r1
 8000a08:	4690      	mov	r8, r2
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <z1Value+0xe0>)
 8000a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a18:	f7ff fd92 	bl	8000540 <__aeabi_dmul>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	460b      	mov	r3, r1
 8000a20:	68fc      	ldr	r4, [r7, #12]
 8000a22:	4640      	mov	r0, r8
 8000a24:	4649      	mov	r1, r9
 8000a26:	f7ff fbd5 	bl	80001d4 <__adddf3>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	e9c4 2300 	strd	r2, r3, [r4]
    INTEGRAL(&z1p);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff94 	bl	8000964 <INTEGRAL>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a46:	bf00      	nop
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000010 	.word	0x20000010
 8000a54:	20000048 	.word	0x20000048
 8000a58:	20000050 	.word	0x20000050

08000a5c <z2Value>:

static void z2Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000a5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	603b      	str	r3, [r7, #0]
    *z2p = (*z1p * axd21) + (*z2p * axd22) + (*z3p * axd23) + (*up * bxd21) + (*yp * bxd22);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <z2Value+0xd0>)
 8000a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a78:	f7ff fd62 	bl	8000540 <__aeabi_dmul>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	460b      	mov	r3, r1
 8000a80:	4614      	mov	r4, r2
 8000a82:	461d      	mov	r5, r3
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <z2Value+0xd4>)
 8000a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a90:	f7ff fd56 	bl	8000540 <__aeabi_dmul>
 8000a94:	4602      	mov	r2, r0
 8000a96:	460b      	mov	r3, r1
 8000a98:	4620      	mov	r0, r4
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	f7ff fb9a 	bl	80001d4 <__adddf3>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <z2Value+0xd8>)
 8000ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab4:	f7ff fd44 	bl	8000540 <__aeabi_dmul>
 8000ab8:	4602      	mov	r2, r0
 8000aba:	460b      	mov	r3, r1
 8000abc:	4620      	mov	r0, r4
 8000abe:	4629      	mov	r1, r5
 8000ac0:	f7ff fb88 	bl	80001d4 <__adddf3>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	4614      	mov	r4, r2
 8000aca:	461d      	mov	r5, r3
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <z2Value+0xdc>)
 8000ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad8:	f7ff fd32 	bl	8000540 <__aeabi_dmul>
 8000adc:	4602      	mov	r2, r0
 8000ade:	460b      	mov	r3, r1
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	4629      	mov	r1, r5
 8000ae4:	f7ff fb76 	bl	80001d4 <__adddf3>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4690      	mov	r8, r2
 8000aee:	4699      	mov	r9, r3
 8000af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <z2Value+0xe0>)
 8000af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afc:	f7ff fd20 	bl	8000540 <__aeabi_dmul>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	68bc      	ldr	r4, [r7, #8]
 8000b06:	4640      	mov	r0, r8
 8000b08:	4649      	mov	r1, r9
 8000b0a:	f7ff fb63 	bl	80001d4 <__adddf3>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	e9c4 2300 	strd	r2, r3, [r4]
    INTEGRAL(&z2p);
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff22 	bl	8000964 <INTEGRAL>
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000018 	.word	0x20000018
 8000b30:	20000020 	.word	0x20000020
 8000b34:	20000028 	.word	0x20000028
 8000b38:	20000058 	.word	0x20000058
 8000b3c:	20000060 	.word	0x20000060

08000b40 <z3Value>:

static void z3Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	603b      	str	r3, [r7, #0]
    *z3p = (*z1p * axd31) + (*z2p * axd32) + (*z3p * axd33) + (*up * bxd31) + (*yp * bxd32);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <z3Value+0xcc>)
 8000b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5c:	f7ff fcf0 	bl	8000540 <__aeabi_dmul>
 8000b60:	4602      	mov	r2, r0
 8000b62:	460b      	mov	r3, r1
 8000b64:	4614      	mov	r4, r2
 8000b66:	461d      	mov	r5, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <z3Value+0xd0>)
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	f7ff fce4 	bl	8000540 <__aeabi_dmul>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	4629      	mov	r1, r5
 8000b80:	f7ff fb28 	bl	80001d4 <__adddf3>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	4614      	mov	r4, r2
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b92:	4b20      	ldr	r3, [pc, #128]	; (8000c14 <z3Value+0xd4>)
 8000b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b98:	f7ff fcd2 	bl	8000540 <__aeabi_dmul>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	f7ff fb16 	bl	80001d4 <__adddf3>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb6:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <z3Value+0xd8>)
 8000bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbc:	f7ff fcc0 	bl	8000540 <__aeabi_dmul>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	4620      	mov	r0, r4
 8000bc6:	4629      	mov	r1, r5
 8000bc8:	f7ff fb04 	bl	80001d4 <__adddf3>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	460b      	mov	r3, r1
 8000bd0:	4690      	mov	r8, r2
 8000bd2:	4699      	mov	r9, r3
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <z3Value+0xdc>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	f7ff fcae 	bl	8000540 <__aeabi_dmul>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	687c      	ldr	r4, [r7, #4]
 8000bea:	4640      	mov	r0, r8
 8000bec:	4649      	mov	r1, r9
 8000bee:	f7ff faf1 	bl	80001d4 <__adddf3>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	e9c4 2300 	strd	r2, r3, [r4]
    INTEGRAL(&z3p);
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff feb1 	bl	8000964 <INTEGRAL>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c0c:	20000030 	.word	0x20000030
 8000c10:	20000038 	.word	0x20000038
 8000c14:	20000040 	.word	0x20000040
 8000c18:	20000068 	.word	0x20000068
 8000c1c:	20000070 	.word	0x20000070

08000c20 <xValue>:

static void xValue(double *xp , double *rep , double *z1p){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
    *xp = (*rep - *z1p) * kp_dig ;
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c38:	f7ff faca 	bl	80001d0 <__aeabi_dsub>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	460b      	mov	r3, r1
 8000c40:	4610      	mov	r0, r2
 8000c42:	4619      	mov	r1, r3
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <xValue+0x40>)
 8000c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4a:	f7ff fc79 	bl	8000540 <__aeabi_dmul>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	460b      	mov	r3, r1
 8000c52:	68f9      	ldr	r1, [r7, #12]
 8000c54:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000080 	.word	0x20000080

08000c64 <yValue>:

static void yValue(double *yp , double *z2p){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
    *yp = *z2p * kd_dig ;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <yValue+0x2c>)
 8000c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7a:	f7ff fc61 	bl	8000540 <__aeabi_dmul>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000078 	.word	0x20000078

08000c94 <u0Value>:

static void u0Value(double *u0p, double *xp , double *yp){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
    *u0p = *xp - *yp ;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cac:	f7ff fa90 	bl	80001d0 <__aeabi_dsub>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	68f9      	ldr	r1, [r7, #12]
 8000cb6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <uValue>:

static void uValue(double *up, double *u0p, double *z3p , double *b0p){
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
 8000cce:	603b      	str	r3, [r7, #0]
    *up = ( *u0p - *z3p ) / *b0p ;
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f7ff fa78 	bl	80001d0 <__aeabi_dsub>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cee:	f7ff fd51 	bl	8000794 <__aeabi_ddiv>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	68f9      	ldr	r1, [r7, #12]
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <CALCULATOR>:

uint16_t CALCULATOR(uint16_t* ADC_VALUE) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	6078      	str	r0, [r7, #4]

	uint16_t RESPONSE = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	81fb      	strh	r3, [r7, #14]
	*adc = *ADC_VALUE;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <CALCULATOR+0xac>)
 8000d16:	6814      	ldr	r4, [r2, #0]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fb97 	bl	800044c <__aeabi_ui2d>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	460b      	mov	r3, r1
 8000d22:	e9c4 2300 	strd	r2, r3, [r4]

    z1Value(&z1,&z2,&z3,&u,&y);
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <CALCULATOR+0xb0>)
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <CALCULATOR+0xb4>)
 8000d2c:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <CALCULATOR+0xb8>)
 8000d2e:	4924      	ldr	r1, [pc, #144]	; (8000dc0 <CALCULATOR+0xbc>)
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <CALCULATOR+0xc0>)
 8000d32:	f7ff fe21 	bl	8000978 <z1Value>
    z2Value(&z1,&z2,&z3,&u,&y);
 8000d36:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <CALCULATOR+0xb0>)
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <CALCULATOR+0xb4>)
 8000d3c:	4a1f      	ldr	r2, [pc, #124]	; (8000dbc <CALCULATOR+0xb8>)
 8000d3e:	4920      	ldr	r1, [pc, #128]	; (8000dc0 <CALCULATOR+0xbc>)
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <CALCULATOR+0xc0>)
 8000d42:	f7ff fe8b 	bl	8000a5c <z2Value>
    z3Value(&z1,&z2,&z3,&u,&y);
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <CALCULATOR+0xb0>)
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <CALCULATOR+0xb4>)
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <CALCULATOR+0xb8>)
 8000d4e:	491c      	ldr	r1, [pc, #112]	; (8000dc0 <CALCULATOR+0xbc>)
 8000d50:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <CALCULATOR+0xc0>)
 8000d52:	f7ff fef5 	bl	8000b40 <z3Value>
    xValue(&x,&ref,&z1);
 8000d56:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <CALCULATOR+0xc0>)
 8000d58:	491b      	ldr	r1, [pc, #108]	; (8000dc8 <CALCULATOR+0xc4>)
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <CALCULATOR+0xc8>)
 8000d5c:	f7ff ff60 	bl	8000c20 <xValue>
    yValue(&y,&z2);
 8000d60:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <CALCULATOR+0xbc>)
 8000d62:	4814      	ldr	r0, [pc, #80]	; (8000db4 <CALCULATOR+0xb0>)
 8000d64:	f7ff ff7e 	bl	8000c64 <yValue>
    u0Value(&u0,&x,&y);
 8000d68:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <CALCULATOR+0xb0>)
 8000d6a:	4918      	ldr	r1, [pc, #96]	; (8000dcc <CALCULATOR+0xc8>)
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <CALCULATOR+0xcc>)
 8000d6e:	f7ff ff91 	bl	8000c94 <u0Value>
    uValue(&u,&u0,&z3,&b0);
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <CALCULATOR+0xd0>)
 8000d74:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <CALCULATOR+0xb8>)
 8000d76:	4916      	ldr	r1, [pc, #88]	; (8000dd0 <CALCULATOR+0xcc>)
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <CALCULATOR+0xb4>)
 8000d7a:	f7ff ffa2 	bl	8000cc2 <uValue>

	if (RESPONSE < MIN_FREQ_VALUE)
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <CALCULATOR+0xd4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	89fa      	ldrh	r2, [r7, #14]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d203      	bcs.n	8000d92 <CALCULATOR+0x8e>
		return MIN_FREQ_VALUE;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <CALCULATOR+0xd4>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	e00a      	b.n	8000da8 <CALCULATOR+0xa4>
	else if (RESPONSE > MAX_FREQ_VALUE)
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <CALCULATOR+0xd8>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	89fa      	ldrh	r2, [r7, #14]
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d903      	bls.n	8000da6 <CALCULATOR+0xa2>
		return MAX_FREQ_VALUE;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <CALCULATOR+0xd8>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	e000      	b.n	8000da8 <CALCULATOR+0xa4>
	return RESPONSE;
 8000da6:	89fb      	ldrh	r3, [r7, #14]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd90      	pop	{r4, r7, pc}
 8000db0:	2000008c 	.word	0x2000008c
 8000db4:	200000d8 	.word	0x200000d8
 8000db8:	200000e0 	.word	0x200000e0
 8000dbc:	200000d0 	.word	0x200000d0
 8000dc0:	200000c8 	.word	0x200000c8
 8000dc4:	200000c0 	.word	0x200000c0
 8000dc8:	200000f8 	.word	0x200000f8
 8000dcc:	200000e8 	.word	0x200000e8
 8000dd0:	20000100 	.word	0x20000100
 8000dd4:	200000f0 	.word	0x200000f0
 8000dd8:	2000008a 	.word	0x2000008a
 8000ddc:	20000088 	.word	0x20000088

08000de0 <TIM_SET_PERIOD>:
#include "formula.h"

uint32_t adc_value[2];
uint16_t period_value = 0 ;

uint16_t TIM_SET_PERIOD(uint16_t PERIOD_VALUE){
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
	htim1.Init.Period = PERIOD_VALUE;
 8000dea:	88fb      	ldrh	r3, [r7, #6]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <TIM_SET_PERIOD+0x20>)
 8000dee:	60d3      	str	r3, [r2, #12]
	return PERIOD_VALUE;
 8000df0:	88fb      	ldrh	r3, [r7, #6]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200001a8 	.word	0x200001a8

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fb7e 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f82a 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 f9a8 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e14:	f000 f988 	bl	8001128 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e18:	f000 f886 	bl	8000f28 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000e1c:	f000 f8f4 	bl	8001008 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_value,1);
 8000e20:	2201      	movs	r2, #1
 8000e22:	490c      	ldr	r1, [pc, #48]	; (8000e54 <main+0x50>)
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <main+0x54>)
 8000e26:	f000 fd85 	bl	8001934 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <main+0x58>)
 8000e2e:	f003 f9c1 	bl	80041b4 <HAL_TIM_PWM_Start_IT>

  TIM_SET_PERIOD(50000);
 8000e32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e36:	f7ff ffd3 	bl	8000de0 <TIM_SET_PERIOD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    period_value = CALCULATOR(&adc_value);
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <main+0x50>)
 8000e3c:	f7ff ff62 	bl	8000d04 <CALCULATOR>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <main+0x5c>)
 8000e46:	801a      	strh	r2, [r3, #0]
	TIM_SET_PERIOD(period_value);
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <main+0x5c>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ffc7 	bl	8000de0 <TIM_SET_PERIOD>
    period_value = CALCULATOR(&adc_value);
 8000e52:	e7f2      	b.n	8000e3a <main+0x36>
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	20000114 	.word	0x20000114
 8000e5c:	200001a8 	.word	0x200001a8
 8000e60:	20000108 	.word	0x20000108

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b096      	sub	sp, #88	; 0x58
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f004 f83a 	bl	8004eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000eb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ebc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fefb 	bl	8002cbc <HAL_RCC_OscConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000ecc:	f000 f9c2 	bl	8001254 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ee6:	f107 031c 	add.w	r3, r7, #28
 8000eea:	2101      	movs	r1, #1
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fded 	bl	8003acc <HAL_RCC_ClockConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ef8:	f000 f9ac 	bl	8001254 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8000efc:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8000f00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 ffc2 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000f1a:	f000 f99b 	bl	8001254 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3758      	adds	r7, #88	; 0x58
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f94:	2204      	movs	r2, #4
 8000f96:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa4:	4817      	ldr	r0, [pc, #92]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000fa6:	f000 fb33 	bl	8001610 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 f950 	bl	8001254 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4811      	ldr	r0, [pc, #68]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000fc0:	f001 f854 	bl	800206c <HAL_ADCEx_MultiModeConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000fca:	f000 f943 	bl	8001254 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_ADC1_Init+0xdc>)
 8000fec:	f000 fd7c 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ff6:	f000 f92d 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3728      	adds	r7, #40	; 0x28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000114 	.word	0x20000114

08001008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b096      	sub	sp, #88	; 0x58
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	222c      	movs	r2, #44	; 0x2c
 8001032:	2100      	movs	r1, #0
 8001034:	4618      	mov	r0, r3
 8001036:	f003 ff59 	bl	8004eec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800103a:	4b39      	ldr	r3, [pc, #228]	; (8001120 <MX_TIM1_Init+0x118>)
 800103c:	4a39      	ldr	r2, [pc, #228]	; (8001124 <MX_TIM1_Init+0x11c>)
 800103e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <MX_TIM1_Init+0x118>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <MX_TIM1_Init+0x118>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47799;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <MX_TIM1_Init+0x118>)
 800104e:	f64b 22b7 	movw	r2, #47799	; 0xbab7
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <MX_TIM1_Init+0x118>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <MX_TIM1_Init+0x118>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_TIM1_Init+0x118>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001066:	482e      	ldr	r0, [pc, #184]	; (8001120 <MX_TIM1_Init+0x118>)
 8001068:	f003 f84c 	bl	8004104 <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 f8ef 	bl	8001254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001082:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001086:	4619      	mov	r1, r3
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <MX_TIM1_Init+0x118>)
 800108a:	f003 fe25 	bl	8004cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001094:	f000 f8de 	bl	8001254 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001098:	2360      	movs	r3, #96	; 0x60
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 800109c:	2332      	movs	r3, #50	; 0x32
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4818      	ldr	r0, [pc, #96]	; (8001120 <MX_TIM1_Init+0x118>)
 80010be:	f003 f9b3 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010c8:	f000 f8c4 	bl	8001254 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <MX_TIM1_Init+0x118>)
 8001102:	f003 fe57 	bl	8004db4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800110c:	f000 f8a2 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <MX_TIM1_Init+0x118>)
 8001112:	f000 f951 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 8001116:	bf00      	nop
 8001118:	3758      	adds	r7, #88	; 0x58
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001a8 	.word	0x200001a8
 8001124:	40012c00 	.word	0x40012c00

08001128 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <MX_DMA_Init+0x38>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <MX_DMA_Init+0x38>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6153      	str	r3, [r2, #20]
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <MX_DMA_Init+0x38>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200b      	movs	r0, #11
 800114c:	f001 fa5f 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001150:	200b      	movs	r0, #11
 8001152:	f001 fa78 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <MX_GPIO_Init+0xe8>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <MX_GPIO_Init+0xe8>)
 8001180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b31      	ldr	r3, [pc, #196]	; (800124c <MX_GPIO_Init+0xe8>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <MX_GPIO_Init+0xe8>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a2d      	ldr	r2, [pc, #180]	; (800124c <MX_GPIO_Init+0xe8>)
 8001198:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_GPIO_Init+0xe8>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_GPIO_Init+0xe8>)
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <MX_GPIO_Init+0xe8>)
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_GPIO_Init+0xe8>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_GPIO_Init+0xe8>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <MX_GPIO_Init+0xe8>)
 80011c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0xe8>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f001 fd53 	bl	8002c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4814      	ldr	r0, [pc, #80]	; (8001250 <MX_GPIO_Init+0xec>)
 80011fe:	f001 fbd3 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f001 fbc2 	bl	80029a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001224:	2320      	movs	r3, #32
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123e:	f001 fbb3 	bl	80029a8 <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40021000 	.word	0x40021000
 8001250:	48000800 	.word	0x48000800

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	61d3      	str	r3, [r2, #28]
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f001 f9ae 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c8:	d14c      	bne.n	8001364 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012ca:	4b28      	ldr	r3, [pc, #160]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	4a27      	ldr	r2, [pc, #156]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6153      	str	r3, [r2, #20]
 80012d6:	4b25      	ldr	r3, [pc, #148]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a21      	ldr	r2, [pc, #132]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_ADC_MspInit+0xc4>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f001 fb4a 	bl	80029a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001316:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_ADC_MspInit+0xcc>)
 8001318:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 800131c:	2200      	movs	r2, #0
 800131e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001328:	2280      	movs	r2, #128	; 0x80
 800132a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800132c:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 800132e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001332:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001348:	4809      	ldr	r0, [pc, #36]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 800134a:	f001 f996 	bl	800267a <HAL_DMA_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001354:	f7ff ff7e 	bl	8001254 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 800135c:	639a      	str	r2, [r3, #56]	; 0x38
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_ADC_MspInit+0xc8>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	20000164 	.word	0x20000164
 8001374:	40020008 	.word	0x40020008

08001378 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <HAL_TIM_PWM_MspInit+0x38>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10b      	bne.n	80013a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40012c00 	.word	0x40012c00
 80013b4:	40021000 	.word	0x40021000

080013b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	; (800141c <HAL_TIM_MspPostInit+0x64>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d11b      	bne.n	8001412 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <HAL_TIM_MspPostInit+0x68>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4a10      	ldr	r2, [pc, #64]	; (8001420 <HAL_TIM_MspPostInit+0x68>)
 80013e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013e4:	6153      	str	r3, [r2, #20]
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_TIM_MspPostInit+0x68>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001402:	2302      	movs	r3, #2
 8001404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <HAL_TIM_MspPostInit+0x6c>)
 800140e:	f001 facb 	bl	80029a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40012c00 	.word	0x40012c00
 8001420:	40021000 	.word	0x40021000
 8001424:	48000800 	.word	0x48000800

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 f88e 	bl	8001594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <DMA1_Channel1_IRQHandler+0x10>)
 8001482:	f001 f9a0 	bl	80027c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000164 	.word	0x20000164

08001490 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480d      	ldr	r0, [pc, #52]	; (80014f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0b      	ldr	r4, [pc, #44]	; (8001500 <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014de:	f7ff ffd7 	bl	8001490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014e2:	f003 fcdf 	bl	8004ea4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e6:	f7ff fc8d 	bl	8000e04 <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014ec:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80014f8:	08004f4c 	.word	0x08004f4c
  ldr r2, =_sbss
 80014fc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001500:	200001f8 	.word	0x200001f8

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <HAL_Init+0x28>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_Init+0x28>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001518:	2003      	movs	r0, #3
 800151a:	f001 f86d 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f808 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001524:	f7ff fe9c 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_InitTick+0x54>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_InitTick+0x58>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800154a:	fbb3 f3f1 	udiv	r3, r3, r1
 800154e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f001 f885 	bl	8002662 <HAL_SYSTICK_Config>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e00e      	b.n	8001580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b0f      	cmp	r3, #15
 8001566:	d80a      	bhi.n	800157e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001568:	2200      	movs	r2, #0
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	f04f 30ff 	mov.w	r0, #4294967295
 8001570:	f001 f84d 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_InitTick+0x5c>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e000      	b.n	8001580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000090 	.word	0x20000090
 800158c:	20000098 	.word	0x20000098
 8001590:	20000094 	.word	0x20000094

08001594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_IncTick+0x20>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_IncTick+0x24>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_IncTick+0x24>)
 80015a6:	6013      	str	r3, [r2, #0]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	20000098 	.word	0x20000098
 80015b8:	200001f4 	.word	0x200001f4

080015bc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return uwTick;  
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <HAL_GetTick+0x14>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	200001f4 	.word	0x200001f4

080015d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b09a      	sub	sp, #104	; 0x68
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e172      	b.n	8001916 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d176      	bne.n	8001730 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2b00      	cmp	r3, #0
 8001648:	d152      	bne.n	80016f0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fe1f 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d13b      	bne.n	80016f0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fe87 	bl	800238c <ADC_Disable>
 800167e:	4603      	mov	r3, r0
 8001680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d12f      	bne.n	80016f0 <HAL_ADC_Init+0xe0>
 8001690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001694:	2b00      	cmp	r3, #0
 8001696:	d12b      	bne.n	80016f0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a0:	f023 0302 	bic.w	r3, r3, #2
 80016a4:	f043 0202 	orr.w	r2, r3, #2
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ba:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_ADC_Init+0x310>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_ADC_Init+0x314>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	0c9a      	lsrs	r2, r3, #18
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016e2:	e002      	b.n	80016ea <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800170c:	d110      	bne.n	8001730 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f023 0312 	bic.w	r3, r3, #18
 8001716:	f043 0210 	orr.w	r2, r3, #16
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f043 0201 	orr.w	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	f040 80df 	bne.w	80018fc <HAL_ADC_Init+0x2ec>
 800173e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001742:	2b00      	cmp	r3, #0
 8001744:	f040 80da 	bne.w	80018fc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 80d2 	bne.w	80018fc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001760:	f043 0202 	orr.w	r2, r3, #2
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001768:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <HAL_ADC_Init+0x318>)
 800176a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001774:	d102      	bne.n	800177c <HAL_ADC_Init+0x16c>
 8001776:	4b6d      	ldr	r3, [pc, #436]	; (800192c <HAL_ADC_Init+0x31c>)
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e002      	b.n	8001782 <HAL_ADC_Init+0x172>
 800177c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001780:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d108      	bne.n	80017a2 <HAL_ADC_Init+0x192>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_ADC_Init+0x192>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_ADC_Init+0x194>
 80017a2:	2300      	movs	r3, #0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11c      	bne.n	80017e2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d010      	beq.n	80017d0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d107      	bne.n	80017ca <HAL_ADC_Init+0x1ba>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_ADC_Init+0x1ba>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_ADC_Init+0x1bc>
 80017ca:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d108      	bne.n	80017e2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	431a      	orrs	r2, r3
 80017de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7e5b      	ldrb	r3, [r3, #25]
 80017e6:	035b      	lsls	r3, r3, #13
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ec:	2a01      	cmp	r2, #1
 80017ee:	d002      	beq.n	80017f6 <HAL_ADC_Init+0x1e6>
 80017f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017f4:	e000      	b.n	80017f8 <HAL_ADC_Init+0x1e8>
 80017f6:	2200      	movs	r2, #0
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4313      	orrs	r3, r2
 8001806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001808:	4313      	orrs	r3, r2
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d11b      	bne.n	800184e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7e5b      	ldrb	r3, [r3, #25]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	045a      	lsls	r2, r3, #17
 8001826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001828:	4313      	orrs	r3, r2
 800182a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182e:	663b      	str	r3, [r7, #96]	; 0x60
 8001830:	e00d      	b.n	800184e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f043 0201 	orr.w	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b01      	cmp	r3, #1
 8001854:	d007      	beq.n	8001866 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	4313      	orrs	r3, r2
 8001860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001862:	4313      	orrs	r3, r2
 8001864:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	d114      	bne.n	800189e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001882:	f023 0302 	bic.w	r3, r3, #2
 8001886:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e1b      	ldrb	r3, [r3, #24]
 800188c:	039a      	lsls	r2, r3, #14
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4313      	orrs	r3, r2
 8001898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800189a:	4313      	orrs	r3, r2
 800189c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_ADC_Init+0x320>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018ae:	430b      	orrs	r3, r1
 80018b0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10c      	bne.n	80018d4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c0:	f023 010f 	bic.w	r1, r3, #15
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
 80018d2:	e007      	b.n	80018e4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 020f 	bic.w	r2, r2, #15
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
 80018fa:	e00a      	b.n	8001912 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f023 0312 	bic.w	r3, r3, #18
 8001904:	f043 0210 	orr.w	r2, r3, #16
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800190c:	2301      	movs	r3, #1
 800190e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001916:	4618      	mov	r0, r3
 8001918:	3768      	adds	r7, #104	; 0x68
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000090 	.word	0x20000090
 8001924:	431bde83 	.word	0x431bde83
 8001928:	50000300 	.word	0x50000300
 800192c:	50000100 	.word	0x50000100
 8001930:	fff0c007 	.word	0xfff0c007

08001934 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80b9 	bne.w	8001ac6 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Start_DMA+0x2e>
 800195e:	2302      	movs	r3, #2
 8001960:	e0b4      	b.n	8001acc <HAL_ADC_Start_DMA+0x198>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800196a:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <HAL_ADC_Start_DMA+0x1a0>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	2b00      	cmp	r3, #0
 8001974:	f040 80a0 	bne.w	8001ab8 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 fca3 	bl	80022c4 <ADC_Enable>
 800197e:	4603      	mov	r3, r0
 8001980:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f040 8092 	bne.w	8001aae <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800199e:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_ADC_Start_DMA+0x1a0>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_Start_DMA+0x80>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b2:	d115      	bne.n	80019e0 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d027      	beq.n	8001a1e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019de:	e01e      	b.n	8001a1e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f4:	d004      	beq.n	8001a00 <HAL_ADC_Start_DMA+0xcc>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a37      	ldr	r2, [pc, #220]	; (8001ad8 <HAL_ADC_Start_DMA+0x1a4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d10e      	bne.n	8001a1e <HAL_ADC_Start_DMA+0xea>
 8001a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	f023 0206 	bic.w	r2, r3, #6
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
 8001a38:	e002      	b.n	8001a40 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	4a23      	ldr	r2, [pc, #140]	; (8001adc <HAL_ADC_Start_DMA+0x1a8>)
 8001a4e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <HAL_ADC_Start_DMA+0x1ac>)
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5c:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_ADC_Start_DMA+0x1b0>)
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	221c      	movs	r2, #28
 8001a66:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0210 	orr.w	r2, r2, #16
 8001a76:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3340      	adds	r3, #64	; 0x40
 8001a92:	4619      	mov	r1, r3
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f000 fe36 	bl	8002708 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0204 	orr.w	r2, r2, #4
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e00d      	b.n	8001aca <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ab6:	e008      	b.n	8001aca <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ac4:	e001      	b.n	8001aca <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	50000300 	.word	0x50000300
 8001ad8:	50000100 	.word	0x50000100
 8001adc:	080021f9 	.word	0x080021f9
 8001ae0:	08002273 	.word	0x08002273
 8001ae4:	0800228f 	.word	0x0800228f

08001ae8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b09b      	sub	sp, #108	; 0x6c
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x22>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e2a5      	b.n	8002056 <HAL_ADC_ConfigChannel+0x56e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8289 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d81c      	bhi.n	8001b64 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	231f      	movs	r3, #31
 8001b40:	4093      	lsls	r3, r2
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4019      	ands	r1, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
 8001b62:	e063      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	d81e      	bhi.n	8001baa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	3b1e      	subs	r3, #30
 8001b80:	221f      	movs	r2, #31
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4019      	ands	r1, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba8:	e040      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b0e      	cmp	r3, #14
 8001bb0:	d81e      	bhi.n	8001bf0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	3b3c      	subs	r3, #60	; 0x3c
 8001bc6:	221f      	movs	r2, #31
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4019      	ands	r1, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	3b3c      	subs	r3, #60	; 0x3c
 8001be2:	fa00 f203 	lsl.w	r2, r0, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	639a      	str	r2, [r3, #56]	; 0x38
 8001bee:	e01d      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	3b5a      	subs	r3, #90	; 0x5a
 8001c04:	221f      	movs	r2, #31
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	4019      	ands	r1, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	3b5a      	subs	r3, #90	; 0x5a
 8001c20:	fa00 f203 	lsl.w	r2, r0, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80e5 	bne.w	8001e06 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b09      	cmp	r3, #9
 8001c42:	d91c      	bls.n	8001c7e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6999      	ldr	r1, [r3, #24]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	3b1e      	subs	r3, #30
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	4019      	ands	r1, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	6898      	ldr	r0, [r3, #8]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b1e      	subs	r3, #30
 8001c70:	fa00 f203 	lsl.w	r2, r0, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	619a      	str	r2, [r3, #24]
 8001c7c:	e019      	b.n	8001cb2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6959      	ldr	r1, [r3, #20]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2207      	movs	r2, #7
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	4019      	ands	r1, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6898      	ldr	r0, [r3, #8]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d84f      	bhi.n	8001d74 <HAL_ADC_ConfigChannel+0x28c>
 8001cd4:	a201      	add	r2, pc, #4	; (adr r2, 8001cdc <HAL_ADC_ConfigChannel+0x1f4>)
 8001cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cda:	bf00      	nop
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001d0f 	.word	0x08001d0f
 8001ce4:	08001d31 	.word	0x08001d31
 8001ce8:	08001d53 	.word	0x08001d53
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf2:	4b9e      	ldr	r3, [pc, #632]	; (8001f6c <HAL_ADC_ConfigChannel+0x484>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	0691      	lsls	r1, r2, #26
 8001cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d0a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d0c:	e07e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d14:	4b95      	ldr	r3, [pc, #596]	; (8001f6c <HAL_ADC_ConfigChannel+0x484>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	0691      	lsls	r1, r2, #26
 8001d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d20:	430a      	orrs	r2, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2e:	e06d      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d36:	4b8d      	ldr	r3, [pc, #564]	; (8001f6c <HAL_ADC_ConfigChannel+0x484>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	0691      	lsls	r1, r2, #26
 8001d40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d42:	430a      	orrs	r2, r1
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d4e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d50:	e05c      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <HAL_ADC_ConfigChannel+0x484>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	0691      	lsls	r1, r2, #26
 8001d62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d64:	430a      	orrs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d70:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d72:	e04b      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	069b      	lsls	r3, r3, #26
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	069b      	lsls	r3, r3, #26
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d107      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dba:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	069b      	lsls	r3, r3, #26
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d107      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dde:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001de6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10a      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e02:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001e04:	e001      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001e06:	bf00      	nop
 8001e08:	e000      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001e0a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x344>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x344>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x346>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 810b 	bne.w	800204a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d00f      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e5a:	e049      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b09      	cmp	r3, #9
 8001e7c:	d91c      	bls.n	8001eb8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6999      	ldr	r1, [r3, #24]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1b      	subs	r3, #27
 8001e90:	2207      	movs	r2, #7
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	4019      	ands	r1, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6898      	ldr	r0, [r3, #8]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b1b      	subs	r3, #27
 8001eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	619a      	str	r2, [r3, #24]
 8001eb6:	e01b      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6959      	ldr	r1, [r3, #20]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	2207      	movs	r2, #7
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4019      	ands	r1, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6898      	ldr	r0, [r3, #8]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_ADC_ConfigChannel+0x488>)
 8001ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b10      	cmp	r3, #16
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f0c:	2b11      	cmp	r3, #17
 8001f0e:	d105      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	f040 8092 	bne.w	800204a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 808b 	bne.w	800204a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x45c>
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_ADC_ConfigChannel+0x48c>)
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	e002      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x462>
 8001f44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f48:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10f      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x490>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d108      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x490>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e007      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x492>
 8001f6a:	bf00      	nop
 8001f6c:	83fff000 	.word	0x83fff000
 8001f70:	50000300 	.word	0x50000300
 8001f74:	50000100 	.word	0x50000100
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d150      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x4b8>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x4b8>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x4ba>
 8001fa0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d13c      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d11d      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x502>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb6:	d118      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_ADC_ConfigChannel+0x57c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <HAL_ADC_ConfigChannel+0x580>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9a      	lsrs	r2, r3, #18
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fda:	e002      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f9      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe8:	e02e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b11      	cmp	r3, #17
 8001ff0:	d10b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x522>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002006:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002008:	e01e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2b12      	cmp	r3, #18
 8002010:	d11a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800201e:	e013      	b.n	8002048 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002032:	e00a      	b.n	800204a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f043 0220 	orr.w	r2, r3, #32
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002046:	e000      	b.n	800204a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002048:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002052:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002056:	4618      	mov	r0, r3
 8002058:	376c      	adds	r7, #108	; 0x6c
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000090 	.word	0x20000090
 8002068:	431bde83 	.word	0x431bde83

0800206c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800206c:	b480      	push	{r7}
 800206e:	b099      	sub	sp, #100	; 0x64
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002084:	d102      	bne.n	800208c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002086:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	e002      	b.n	8002092 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800208c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002090:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0a2      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e09b      	b.n	80021e2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d17f      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d179      	bne.n	80021c0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020cc:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80020ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d040      	beq.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020ea:	035b      	lsls	r3, r3, #13
 80020ec:	430b      	orrs	r3, r1
 80020ee:	431a      	orrs	r2, r3
 80020f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d101      	bne.n	8002114 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15c      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d101      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002136:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002138:	2b00      	cmp	r3, #0
 800213a:	d14b      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800213c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002144:	f023 030f 	bic.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	6892      	ldr	r2, [r2, #8]
 8002150:	430a      	orrs	r2, r1
 8002152:	431a      	orrs	r2, r3
 8002154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002156:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002158:	e03c      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800215a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002164:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002186:	2300      	movs	r3, #0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d123      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80021a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80021ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80021b6:	f023 030f 	bic.w	r3, r3, #15
 80021ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021be:	e009      	b.n	80021d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80021d2:	e000      	b.n	80021d6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80021d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80021e2:	4618      	mov	r0, r3
 80021e4:	3764      	adds	r7, #100	; 0x64
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	50000100 	.word	0x50000100
 80021f4:	50000300 	.word	0x50000300

080021f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800220e:	2b00      	cmp	r3, #0
 8002210:	d126      	bne.n	8002260 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002228:	2b00      	cmp	r3, #0
 800222a:	d115      	bne.n	8002258 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002230:	2b00      	cmp	r3, #0
 8002232:	d111      	bne.n	8002258 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff f9bb 	bl	80015d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800225e:	e004      	b.n	800226a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff f9b1 	bl	80015e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f043 0204 	orr.w	r2, r3, #4
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7ff f9a1 	bl	80015fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <ADC_Enable+0x2e>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d143      	bne.n	800237e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <ADC_Enable+0xc4>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e02f      	b.n	8002380 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002330:	f7ff f944 	bl	80015bc <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002336:	e01b      	b.n	8002370 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002338:	f7ff f940 	bl	80015bc <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d914      	bls.n	8002370 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d00d      	beq.n	8002370 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d1dc      	bne.n	8002338 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	8000003f 	.word	0x8000003f

0800238c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <ADC_Disable+0x2e>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d047      	beq.n	800244e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030d 	and.w	r3, r3, #13
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10f      	bne.n	80023ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80023e4:	f7ff f8ea 	bl	80015bc <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ea:	e029      	b.n	8002440 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002408:	f7ff f8d8 	bl	80015bc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d914      	bls.n	8002440 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10d      	bne.n	8002440 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e007      	b.n	8002450 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d0dc      	beq.n	8002408 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e037      	b.n	8002700 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f940 	bl	8002968 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}  
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_DMA_Start_IT+0x20>
 8002724:	2302      	movs	r3, #2
 8002726:	e04a      	b.n	80027be <HAL_DMA_Start_IT+0xb6>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002736:	2b01      	cmp	r3, #1
 8002738:	d13a      	bne.n	80027b0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0201 	bic.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8d4 	bl	800290c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 020e 	orr.w	r2, r2, #14
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	e00f      	b.n	800279e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 020a 	orr.w	r2, r2, #10
 800278c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0204 	bic.w	r2, r2, #4
 800279c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e005      	b.n	80027bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80027b8:	2302      	movs	r3, #2
 80027ba:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
} 
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2204      	movs	r2, #4
 80027e4:	409a      	lsls	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d024      	beq.n	8002838 <HAL_DMA_IRQHandler+0x72>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01f      	beq.n	8002838 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0204 	bic.w	r2, r2, #4
 8002814:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	2104      	movs	r1, #4
 8002820:	fa01 f202 	lsl.w	r2, r1, r2
 8002824:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d06a      	beq.n	8002904 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002836:	e065      	b.n	8002904 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	2202      	movs	r2, #2
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d02c      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xdc>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d027      	beq.n	80028a2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 020a 	bic.w	r2, r2, #10
 800286e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	2102      	movs	r1, #2
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d035      	beq.n	8002904 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80028a0:	e030      	b.n	8002904 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	2208      	movs	r2, #8
 80028a8:	409a      	lsls	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d028      	beq.n	8002904 <HAL_DMA_IRQHandler+0x13e>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 020e 	bic.w	r2, r2, #14
 80028ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	2101      	movs	r1, #1
 80028d6:	fa01 f202 	lsl.w	r2, r1, r2
 80028da:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
    }
  }
}  
 8002902:	e7ff      	b.n	8002904 <HAL_DMA_IRQHandler+0x13e>
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	2101      	movs	r1, #1
 8002924:	fa01 f202 	lsl.w	r2, r1, r2
 8002928:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d108      	bne.n	800294c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800294a:	e007      	b.n	800295c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
}
 800295c:	bf00      	nop
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <DMA_CalcBaseAndBitshift+0x34>)
 8002978:	4413      	add	r3, r2
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <DMA_CalcBaseAndBitshift+0x38>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	009a      	lsls	r2, r3, #2
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a06      	ldr	r2, [pc, #24]	; (80029a4 <DMA_CalcBaseAndBitshift+0x3c>)
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	bffdfff8 	.word	0xbffdfff8
 80029a0:	cccccccd 	.word	0xcccccccd
 80029a4:	40020000 	.word	0x40020000

080029a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029b6:	e14e      	b.n	8002c56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8140 	beq.w	8002c50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <HAL_GPIO_Init+0x40>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d130      	bne.n	8002a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0201 	and.w	r2, r3, #1
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d017      	beq.n	8002a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 809a 	beq.w	8002c50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b55      	ldr	r3, [pc, #340]	; (8002c74 <HAL_GPIO_Init+0x2cc>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <HAL_GPIO_Init+0x2cc>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b52      	ldr	r3, [pc, #328]	; (8002c74 <HAL_GPIO_Init+0x2cc>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b34:	4a50      	ldr	r2, [pc, #320]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b5e:	d013      	beq.n	8002b88 <HAL_GPIO_Init+0x1e0>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a46      	ldr	r2, [pc, #280]	; (8002c7c <HAL_GPIO_Init+0x2d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00d      	beq.n	8002b84 <HAL_GPIO_Init+0x1dc>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a45      	ldr	r2, [pc, #276]	; (8002c80 <HAL_GPIO_Init+0x2d8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d007      	beq.n	8002b80 <HAL_GPIO_Init+0x1d8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a44      	ldr	r2, [pc, #272]	; (8002c84 <HAL_GPIO_Init+0x2dc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <HAL_GPIO_Init+0x1d4>
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e006      	b.n	8002b8a <HAL_GPIO_Init+0x1e2>
 8002b7c:	2305      	movs	r3, #5
 8002b7e:	e004      	b.n	8002b8a <HAL_GPIO_Init+0x1e2>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e002      	b.n	8002b8a <HAL_GPIO_Init+0x1e2>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <HAL_GPIO_Init+0x1e2>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	f002 0203 	and.w	r2, r2, #3
 8002b90:	0092      	lsls	r2, r2, #2
 8002b92:	4093      	lsls	r3, r2
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b9a:	4937      	ldr	r1, [pc, #220]	; (8002c78 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba8:	4b37      	ldr	r3, [pc, #220]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bf6:	4a24      	ldr	r2, [pc, #144]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfc:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_GPIO_Init+0x2e0>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f47f aea9 	bne.w	80029b8 <HAL_GPIO_Init+0x10>
  }
}
 8002c66:	bf00      	nop
 8002c68:	bf00      	nop
 8002c6a:	371c      	adds	r7, #28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	48000400 	.word	0x48000400
 8002c80:	48000800 	.word	0x48000800
 8002c84:	48000c00 	.word	0x48000c00
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c9c:	787b      	ldrb	r3, [r7, #1]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	1d3b      	adds	r3, r7, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f000 bef4 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 816a 	beq.w	8002fba <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ce6:	4bb3      	ldr	r3, [pc, #716]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d00c      	beq.n	8002d0c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cf2:	4bb0      	ldr	r3, [pc, #704]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d159      	bne.n	8002db2 <HAL_RCC_OscConfig+0xf6>
 8002cfe:	4bad      	ldr	r3, [pc, #692]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0a:	d152      	bne.n	8002db2 <HAL_RCC_OscConfig+0xf6>
 8002d0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d10:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d20:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	fab3 f383 	clz	r3, r3
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_OscConfig+0x82>
 8002d38:	4b9e      	ldr	r3, [pc, #632]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0xae>
 8002d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d42:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d5a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d66:	4b93      	ldr	r3, [pc, #588]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d6e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d72:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d7e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 810c 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x2fc>
 8002da0:	1d3b      	adds	r3, r7, #4
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8106 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f000 be86 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x110>
 8002dbe:	4b7d      	ldr	r3, [pc, #500]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a7c      	ldr	r2, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e030      	b.n	8002e2e <HAL_RCC_OscConfig+0x172>
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x134>
 8002dd6:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a76      	ldr	r2, [pc, #472]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	e01e      	b.n	8002e2e <HAL_RCC_OscConfig+0x172>
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x15a>
 8002dfc:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a6c      	ldr	r2, [pc, #432]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x172>
 8002e16:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a63      	ldr	r2, [pc, #396]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e2e:	4b61      	ldr	r3, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e32:	f023 020f 	bic.w	r2, r3, #15
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	495d      	ldr	r1, [pc, #372]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d059      	beq.n	8002f00 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fbb6 	bl	80015bc <HAL_GetTick>
 8002e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e56:	f7fe fbb1 	bl	80015bc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d902      	bls.n	8002e6c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	f000 be29 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e80:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e84:	fab3 f383 	clz	r3, r3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d102      	bne.n	8002e9e <HAL_RCC_OscConfig+0x1e2>
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x20e>
 8002e9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ece:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ed2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ed6:	fa92 f2a2 	rbit	r2, r2
 8002eda:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ede:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ee2:	fab2 f282 	clz	r2, r2
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f042 0220 	orr.w	r2, r2, #32
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	f002 021f 	and.w	r2, r2, #31
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0ab      	beq.n	8002e56 <HAL_RCC_OscConfig+0x19a>
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fe fb5c 	bl	80015bc <HAL_GetTick>
 8002f04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fb57 	bl	80015bc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d902      	bls.n	8002f20 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f000 bdcf 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
 8002f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f24:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f34:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x296>
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x2c2>
 8002f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f56:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f6a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f6e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_RCC_OscConfig+0x2f8>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f82:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f86:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f8a:	fa92 f2a2 	rbit	r2, r2
 8002f8e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f92:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f96:	fab2 f282 	clz	r2, r2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f042 0220 	orr.w	r2, r2, #32
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	f002 021f 	and.w	r2, r2, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ab      	bne.n	8002f0a <HAL_RCC_OscConfig+0x24e>
 8002fb2:	e002      	b.n	8002fba <HAL_RCC_OscConfig+0x2fe>
 8002fb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	1d3b      	adds	r3, r7, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 816f 	beq.w	80032a8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fca:	4bd0      	ldr	r3, [pc, #832]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fd6:	4bcd      	ldr	r3, [pc, #820]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d16c      	bne.n	80030bc <HAL_RCC_OscConfig+0x400>
 8002fe2:	4bca      	ldr	r3, [pc, #808]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d166      	bne.n	80030bc <HAL_RCC_OscConfig+0x400>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003000:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	b2db      	uxtb	r3, r3
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_RCC_OscConfig+0x362>
 8003018:	4bbc      	ldr	r3, [pc, #752]	; (800330c <HAL_RCC_OscConfig+0x650>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	e013      	b.n	8003046 <HAL_RCC_OscConfig+0x38a>
 800301e:	2302      	movs	r3, #2
 8003020:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003030:	2302      	movs	r3, #2
 8003032:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003036:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003042:	4bb2      	ldr	r3, [pc, #712]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2202      	movs	r2, #2
 8003048:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800304c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003050:	fa92 f2a2 	rbit	r2, r2
 8003054:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003058:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800305c:	fab2 f282 	clz	r2, r2
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	f042 0220 	orr.w	r2, r2, #32
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f002 021f 	and.w	r2, r2, #31
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_RCC_OscConfig+0x3cc>
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d002      	beq.n	8003088 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f000 bd1b 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003088:	4ba0      	ldr	r3, [pc, #640]	; (800330c <HAL_RCC_OscConfig+0x650>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	21f8      	movs	r1, #248	; 0xf8
 8003098:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030a0:	fa91 f1a1 	rbit	r1, r1
 80030a4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030a8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030ac:	fab1 f181 	clz	r1, r1
 80030b0:	b2c9      	uxtb	r1, r1
 80030b2:	408b      	lsls	r3, r1
 80030b4:	4995      	ldr	r1, [pc, #596]	; (800330c <HAL_RCC_OscConfig+0x650>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ba:	e0f5      	b.n	80032a8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8085 	beq.w	80031d2 <HAL_RCC_OscConfig+0x516>
 80030c8:	2301      	movs	r3, #1
 80030ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	461a      	mov	r2, r3
 80030f0:	2301      	movs	r3, #1
 80030f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fa62 	bl	80015bc <HAL_GetTick>
 80030f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fa5d 	bl	80015bc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	f000 bcd5 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
 8003114:	2302      	movs	r3, #2
 8003116:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003126:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d102      	bne.n	8003144 <HAL_RCC_OscConfig+0x488>
 800313e:	4b73      	ldr	r3, [pc, #460]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	e013      	b.n	800316c <HAL_RCC_OscConfig+0x4b0>
 8003144:	2302      	movs	r3, #2
 8003146:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003156:	2302      	movs	r3, #2
 8003158:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800315c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003168:	4b68      	ldr	r3, [pc, #416]	; (800330c <HAL_RCC_OscConfig+0x650>)
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2202      	movs	r2, #2
 800316e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003172:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003176:	fa92 f2a2 	rbit	r2, r2
 800317a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800317e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f042 0220 	orr.w	r2, r2, #32
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f002 021f 	and.w	r2, r2, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0af      	beq.n	80030fe <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319e:	4b5b      	ldr	r3, [pc, #364]	; (800330c <HAL_RCC_OscConfig+0x650>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	21f8      	movs	r1, #248	; 0xf8
 80031ae:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031b6:	fa91 f1a1 	rbit	r1, r1
 80031ba:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031be:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031c2:	fab1 f181 	clz	r1, r1
 80031c6:	b2c9      	uxtb	r1, r1
 80031c8:	408b      	lsls	r3, r1
 80031ca:	4950      	ldr	r1, [pc, #320]	; (800330c <HAL_RCC_OscConfig+0x650>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e06a      	b.n	80032a8 <HAL_RCC_OscConfig+0x5ec>
 80031d2:	2301      	movs	r3, #1
 80031d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	461a      	mov	r2, r3
 80031fa:	2300      	movs	r3, #0
 80031fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7fe f9dd 	bl	80015bc <HAL_GetTick>
 8003202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe f9d8 	bl	80015bc <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d902      	bls.n	800321e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	f000 bc50 	b.w	8003abe <HAL_RCC_OscConfig+0xe02>
 800321e:	2302      	movs	r3, #2
 8003220:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d102      	bne.n	800324e <HAL_RCC_OscConfig+0x592>
 8003248:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x650>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	e013      	b.n	8003276 <HAL_RCC_OscConfig+0x5ba>
 800324e:	2302      	movs	r3, #2
 8003250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003260:	2302      	movs	r3, #2
 8003262:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003266:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800326a:	fa93 f3a3 	rbit	r3, r3
 800326e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x650>)
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	2202      	movs	r2, #2
 8003278:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800327c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003280:	fa92 f2a2 	rbit	r2, r2
 8003284:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003288:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800328c:	fab2 f282 	clz	r2, r2
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f002 021f 	and.w	r2, r2, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f202 	lsl.w	r2, r1, r2
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1af      	bne.n	8003208 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80da 	beq.w	800346c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d069      	beq.n	8003396 <HAL_RCC_OscConfig+0x6da>
 80032c2:	2301      	movs	r3, #1
 80032c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x654>)
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	2301      	movs	r3, #1
 80032ea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe f966 	bl	80015bc <HAL_GetTick>
 80032f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f4:	e00e      	b.n	8003314 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe f961 	bl	80015bc <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d906      	bls.n	8003314 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e3d9      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	10908120 	.word	0x10908120
 8003314:	2302      	movs	r3, #2
 8003316:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003326:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800332a:	2202      	movs	r2, #2
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003342:	2202      	movs	r2, #2
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	fa93 f2a3 	rbit	r2, r3
 8003350:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003354:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4ba5      	ldr	r3, [pc, #660]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800335e:	2102      	movs	r1, #2
 8003360:	6019      	str	r1, [r3, #0]
 8003362:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f1a3 	rbit	r1, r3
 800336c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003370:	6019      	str	r1, [r3, #0]
  return result;
 8003372:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0b0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x63a>
 8003394:	e06a      	b.n	800346c <HAL_RCC_OscConfig+0x7b0>
 8003396:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	fa93 f2a3 	rbit	r2, r3
 80033a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033ac:	601a      	str	r2, [r3, #0]
  return result;
 80033ae:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033b2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b4:	fab3 f383 	clz	r3, r3
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b8c      	ldr	r3, [pc, #560]	; (80035f0 <HAL_RCC_OscConfig+0x934>)
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	2300      	movs	r3, #0
 80033c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fe f8f8 	bl	80015bc <HAL_GetTick>
 80033cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d0:	e009      	b.n	80033e6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d2:	f7fe f8f3 	bl	80015bc <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e36b      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 80033e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033ea:	2202      	movs	r2, #2
 80033ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f2a3 	rbit	r2, r3
 80033f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003402:	2202      	movs	r2, #2
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	fa93 f2a3 	rbit	r2, r3
 8003410:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800341a:	2202      	movs	r2, #2
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	fa93 f2a3 	rbit	r2, r3
 8003428:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800342c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342e:	4b6f      	ldr	r3, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003432:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003436:	2102      	movs	r1, #2
 8003438:	6019      	str	r1, [r3, #0]
 800343a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fa93 f1a3 	rbit	r1, r3
 8003444:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003448:	6019      	str	r1, [r3, #0]
  return result;
 800344a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1b2      	bne.n	80033d2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8158 	beq.w	800372c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d112      	bne.n	80034b4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	4a56      	ldr	r2, [pc, #344]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	61d3      	str	r3, [r2, #28]
 800349a:	4b54      	ldr	r3, [pc, #336]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034a2:	f107 0308 	add.w	r3, r7, #8
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x938>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11a      	bne.n	80034f6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034c0:	4b4c      	ldr	r3, [pc, #304]	; (80035f4 <HAL_RCC_OscConfig+0x938>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_RCC_OscConfig+0x938>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034cc:	f7fe f876 	bl	80015bc <HAL_GetTick>
 80034d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d4:	e009      	b.n	80034ea <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d6:	f7fe f871 	bl	80015bc <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e2e9      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ea:	4b42      	ldr	r3, [pc, #264]	; (80035f4 <HAL_RCC_OscConfig+0x938>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x852>
 8003500:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6213      	str	r3, [r2, #32]
 800350c:	e02f      	b.n	800356e <HAL_RCC_OscConfig+0x8b2>
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x876>
 8003518:	4b34      	ldr	r3, [pc, #208]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a33      	ldr	r2, [pc, #204]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a30      	ldr	r2, [pc, #192]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800352a:	f023 0304 	bic.w	r3, r3, #4
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e01d      	b.n	800356e <HAL_RCC_OscConfig+0x8b2>
 8003532:	1d3b      	adds	r3, r7, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b05      	cmp	r3, #5
 800353a:	d10c      	bne.n	8003556 <HAL_RCC_OscConfig+0x89a>
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003542:	f043 0304 	orr.w	r3, r3, #4
 8003546:	6213      	str	r3, [r2, #32]
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	4a27      	ldr	r2, [pc, #156]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6213      	str	r3, [r2, #32]
 8003554:	e00b      	b.n	800356e <HAL_RCC_OscConfig+0x8b2>
 8003556:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4a24      	ldr	r2, [pc, #144]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6213      	str	r3, [r2, #32]
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d06b      	beq.n	8003650 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe f820 	bl	80015bc <HAL_GetTick>
 800357c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00b      	b.n	800359a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fe f81b 	bl	80015bc <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003592:	4293      	cmp	r3, r2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e291      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 800359a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800359e:	2202      	movs	r2, #2
 80035a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	fa93 f2a3 	rbit	r2, r3
 80035ac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035b6:	2202      	movs	r2, #2
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	fa93 f2a3 	rbit	r2, r3
 80035c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035c8:	601a      	str	r2, [r3, #0]
  return result;
 80035ca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d109      	bne.n	80035f8 <HAL_RCC_OscConfig+0x93c>
 80035e4:	4b01      	ldr	r3, [pc, #4]	; (80035ec <HAL_RCC_OscConfig+0x930>)
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	e014      	b.n	8003614 <HAL_RCC_OscConfig+0x958>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
 80035f0:	10908120 	.word	0x10908120
 80035f4:	40007000 	.word	0x40007000
 80035f8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	fa93 f2a3 	rbit	r2, r3
 800360a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	4bbb      	ldr	r3, [pc, #748]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003618:	2102      	movs	r1, #2
 800361a:	6011      	str	r1, [r2, #0]
 800361c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	fa92 f1a2 	rbit	r1, r2
 8003626:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800362a:	6011      	str	r1, [r2, #0]
  return result;
 800362c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	fab2 f282 	clz	r2, r2
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f002 021f 	and.w	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f202 	lsl.w	r2, r1, r2
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d099      	beq.n	8003582 <HAL_RCC_OscConfig+0x8c6>
 800364e:	e063      	b.n	8003718 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003650:	f7fd ffb4 	bl	80015bc <HAL_GetTick>
 8003654:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fd ffaf 	bl	80015bc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e225      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 8003672:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003676:	2202      	movs	r2, #2
 8003678:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	fa93 f2a3 	rbit	r2, r3
 8003684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800368e:	2202      	movs	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	fa93 f2a3 	rbit	r2, r3
 800369c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036a0:	601a      	str	r2, [r3, #0]
  return result;
 80036a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80036a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0302 	orr.w	r3, r3, #2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0xa06>
 80036bc:	4b90      	ldr	r3, [pc, #576]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	e00d      	b.n	80036de <HAL_RCC_OscConfig+0xa22>
 80036c2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036c6:	2202      	movs	r2, #2
 80036c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	fa93 f2a3 	rbit	r2, r3
 80036d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036e2:	2102      	movs	r1, #2
 80036e4:	6011      	str	r1, [r2, #0]
 80036e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	fa92 f1a2 	rbit	r1, r2
 80036f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036f4:	6011      	str	r1, [r2, #0]
  return result;
 80036f6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	fab2 f282 	clz	r2, r2
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f002 021f 	and.w	r2, r2, #31
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1a0      	bne.n	800365a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003718:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b77      	ldr	r3, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4a76      	ldr	r2, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 81c2 	beq.w	8003abc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b71      	ldr	r3, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	f000 819c 	beq.w	8003a7e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	f040 8114 	bne.w	800397a <HAL_RCC_OscConfig+0xcbe>
 8003752:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003756:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800376a:	601a      	str	r2, [r3, #0]
  return result;
 800376c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003770:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800377c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	461a      	mov	r2, r3
 8003784:	2300      	movs	r3, #0
 8003786:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd ff18 	bl	80015bc <HAL_GetTick>
 800378c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd ff13 	bl	80015bc <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e18b      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 80037a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fa93 f2a3 	rbit	r2, r3
 80037ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037be:	601a      	str	r2, [r3, #0]
  return result;
 80037c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d102      	bne.n	80037e0 <HAL_RCC_OscConfig+0xb24>
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	e01b      	b.n	8003818 <HAL_RCC_OscConfig+0xb5c>
 80037e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	fa93 f2a3 	rbit	r2, r3
 80037f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800381c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fa92 f1a2 	rbit	r1, r2
 800382c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003830:	6011      	str	r1, [r2, #0]
  return result;
 8003832:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f042 0220 	orr.w	r2, r2, #32
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f002 021f 	and.w	r2, r2, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d19e      	bne.n	8003792 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800385c:	1d3b      	adds	r3, r7, #4
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	430b      	orrs	r3, r1
 800386a:	4925      	ldr	r1, [pc, #148]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
 8003870:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003878:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	fa93 f2a3 	rbit	r2, r3
 8003884:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003888:	601a      	str	r2, [r3, #0]
  return result;
 800388a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800388e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800389a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	461a      	mov	r2, r3
 80038a2:	2301      	movs	r3, #1
 80038a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fe89 	bl	80015bc <HAL_GetTick>
 80038aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038ae:	e009      	b.n	80038c4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fe84 	bl	80015bc <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e0fc      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 80038c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038dc:	601a      	str	r2, [r3, #0]
  return result;
 80038de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e4:	fab3 f383 	clz	r3, r3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0xc48>
 80038f8:	4b01      	ldr	r3, [pc, #4]	; (8003900 <HAL_RCC_OscConfig+0xc44>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	e01e      	b.n	800393c <HAL_RCC_OscConfig+0xc80>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003908:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fa93 f2a3 	rbit	r2, r3
 8003918:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003922:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_OscConfig+0xe0c>)
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003940:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003944:	6011      	str	r1, [r2, #0]
 8003946:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	fa92 f1a2 	rbit	r1, r2
 8003950:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003954:	6011      	str	r1, [r2, #0]
  return result;
 8003956:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	fab2 f282 	clz	r2, r2
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	f042 0220 	orr.w	r2, r2, #32
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	f002 021f 	and.w	r2, r2, #31
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d09b      	beq.n	80038b0 <HAL_RCC_OscConfig+0xbf4>
 8003978:	e0a0      	b.n	8003abc <HAL_RCC_OscConfig+0xe00>
 800397a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800397e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003982:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	fa93 f2a3 	rbit	r2, r3
 800398e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003992:	601a      	str	r2, [r3, #0]
  return result;
 8003994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003998:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	461a      	mov	r2, r3
 80039ac:	2300      	movs	r3, #0
 80039ae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fd fe04 	bl	80015bc <HAL_GetTick>
 80039b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b8:	e009      	b.n	80039ce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ba:	f7fd fdff 	bl	80015bc <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e077      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
 80039ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	fa93 f2a3 	rbit	r2, r3
 80039e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e6:	601a      	str	r2, [r3, #0]
  return result;
 80039e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_OscConfig+0xd4c>
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <HAL_RCC_OscConfig+0xe0c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e01b      	b.n	8003a40 <HAL_RCC_OscConfig+0xd84>
 8003a08:	f107 0320 	add.w	r3, r7, #32
 8003a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f107 0320 	add.w	r3, r7, #32
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	fa93 f2a3 	rbit	r2, r3
 8003a1c:	f107 031c 	add.w	r3, r7, #28
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f107 0318 	add.w	r3, r7, #24
 8003a26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	fa93 f2a3 	rbit	r2, r3
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_OscConfig+0xe0c>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f107 0210 	add.w	r2, r7, #16
 8003a44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a48:	6011      	str	r1, [r2, #0]
 8003a4a:	f107 0210 	add.w	r2, r7, #16
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	fa92 f1a2 	rbit	r1, r2
 8003a54:	f107 020c 	add.w	r2, r7, #12
 8003a58:	6011      	str	r1, [r2, #0]
  return result;
 8003a5a:	f107 020c 	add.w	r2, r7, #12
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f042 0220 	orr.w	r2, r2, #32
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f002 021f 	and.w	r2, r2, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d19e      	bne.n	80039ba <HAL_RCC_OscConfig+0xcfe>
 8003a7c:	e01e      	b.n	8003abc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e018      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCC_OscConfig+0xe0c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a94:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d108      	bne.n	8003ab8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40021000 	.word	0x40021000

08003acc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b09e      	sub	sp, #120	; 0x78
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e162      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b90      	ldr	r3, [pc, #576]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d910      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 0207 	bic.w	r2, r3, #7
 8003afa:	498b      	ldr	r1, [pc, #556]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b89      	ldr	r3, [pc, #548]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e14a      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b82      	ldr	r3, [pc, #520]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	497f      	ldr	r1, [pc, #508]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80dc 	beq.w	8003cf8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d13c      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xf6>
 8003b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b50:	fa93 f3a3 	rbit	r3, r3
 8003b54:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xa6>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e00f      	b.n	8003b92 <HAL_RCC_ClockConfig+0xc6>
 8003b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b7a:	fa93 f3a3 	rbit	r3, r3
 8003b7e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b84:	663b      	str	r3, [r7, #96]	; 0x60
 8003b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b88:	fa93 f3a3 	rbit	r3, r3
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b8e:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b96:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9a:	fa92 f2a2 	rbit	r2, r2
 8003b9e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ba2:	fab2 f282 	clz	r2, r2
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f042 0220 	orr.w	r2, r2, #32
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f002 021f 	and.w	r2, r2, #31
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d17b      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0f3      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d13c      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x178>
 8003bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd2:	fa93 f3a3 	rbit	r3, r3
 8003bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0x128>
 8003bee:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e00f      	b.n	8003c14 <HAL_RCC_ClockConfig+0x148>
 8003bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	647b      	str	r3, [r7, #68]	; 0x44
 8003c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c06:	643b      	str	r3, [r7, #64]	; 0x40
 8003c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c18:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c1c:	fa92 f2a2 	rbit	r2, r2
 8003c20:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	f042 0220 	orr.w	r2, r2, #32
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	f002 021f 	and.w	r2, r2, #31
 8003c34:	2101      	movs	r1, #1
 8003c36:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d13a      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0b2      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
 8003c44:	2302      	movs	r3, #2
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	fa93 f3a3 	rbit	r3, r3
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	fab3 f383 	clz	r3, r3
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d102      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x1a0>
 8003c66:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	e00d      	b.n	8003c88 <HAL_RCC_ClockConfig+0x1bc>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	fa93 f3a3 	rbit	r3, r3
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	2302      	movs	r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	2202      	movs	r2, #2
 8003c8a:	61ba      	str	r2, [r7, #24]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	fa92 f2a2 	rbit	r2, r2
 8003c92:	617a      	str	r2, [r7, #20]
  return result;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e079      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	491a      	ldr	r1, [pc, #104]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fd fc78 	bl	80015bc <HAL_GetTick>
 8003ccc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fd fc74 	bl	80015bc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e061      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_RCC_ClockConfig+0x260>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d214      	bcs.n	8003d30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4906      	ldr	r1, [pc, #24]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_RCC_ClockConfig+0x25c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e040      	b.n	8003daa <HAL_RCC_ClockConfig+0x2de>
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d008      	beq.n	8003d4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4912      	ldr	r1, [pc, #72]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d6e:	f000 f829 	bl	8003dc4 <HAL_RCC_GetSysClockFreq>
 8003d72:	4601      	mov	r1, r0
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7c:	22f0      	movs	r2, #240	; 0xf0
 8003d7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	fa92 f2a2 	rbit	r2, r2
 8003d86:	60fa      	str	r2, [r7, #12]
  return result;
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	fab2 f282 	clz	r2, r2
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	40d3      	lsrs	r3, r2
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x2ec>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	fa21 f303 	lsr.w	r3, r1, r3
 8003d9a:	4a08      	ldr	r2, [pc, #32]	; (8003dbc <HAL_RCC_ClockConfig+0x2f0>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d9e:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <HAL_RCC_ClockConfig+0x2f4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd fbc6 	bl	8001534 <HAL_InitTick>
  
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3778      	adds	r7, #120	; 0x78
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	08004f14 	.word	0x08004f14
 8003dbc:	20000090 	.word	0x20000090
 8003dc0:	20000094 	.word	0x20000094

08003dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x36>
 8003df2:	e03c      	b.n	8003e6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003df4:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003df6:	623b      	str	r3, [r7, #32]
      break;
 8003df8:	e03c      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	fa92 f2a2 	rbit	r2, r2
 8003e0c:	607a      	str	r2, [r7, #4]
  return result;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	fab2 f282 	clz	r2, r2
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	40d3      	lsrs	r3, r2
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e1a:	5cd3      	ldrb	r3, [r2, r3]
 8003e1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	220f      	movs	r2, #15
 8003e28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	fa92 f2a2 	rbit	r2, r2
 8003e30:	60fa      	str	r2, [r7, #12]
  return result;
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	fab2 f282 	clz	r2, r2
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	40d3      	lsrs	r3, r2
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e4c:	4a0e      	ldr	r2, [pc, #56]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5c:	e004      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	623b      	str	r3, [r7, #32]
      break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e70:	623b      	str	r3, [r7, #32]
      break;
 8003e72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e74:	6a3b      	ldr	r3, [r7, #32]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	372c      	adds	r7, #44	; 0x2c
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	08004f24 	.word	0x08004f24
 8003e90:	08004f34 	.word	0x08004f34
 8003e94:	003d0900 	.word	0x003d0900

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b092      	sub	sp, #72	; 0x48
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80cd 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebc:	4b8e      	ldr	r3, [pc, #568]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10e      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a8a      	ldr	r2, [pc, #552]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	61d3      	str	r3, [r2, #28]
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b85      	ldr	r3, [pc, #532]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b82      	ldr	r3, [pc, #520]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a81      	ldr	r2, [pc, #516]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fd fb5d 	bl	80015bc <HAL_GetTick>
 8003f02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fd fb59 	bl	80015bc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e0ea      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b78      	ldr	r3, [pc, #480]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f24:	4b74      	ldr	r3, [pc, #464]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d07d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d076      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f42:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	fa93 f3a3 	rbit	r3, r3
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	fab3 f383 	clz	r3, r3
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b66      	ldr	r3, [pc, #408]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2300      	movs	r3, #0
 8003f92:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f98:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d045      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fb0a 	bl	80015bc <HAL_GetTick>
 8003fa8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fd fb06 	bl	80015bc <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e095      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	2302      	movs	r3, #2
 8003fd0:	623b      	str	r3, [r7, #32]
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8003fda:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	fab3 f383 	clz	r3, r3
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d102      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	e007      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	fa93 f3a3 	rbit	r3, r3
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2202      	movs	r2, #2
 8004008:	613a      	str	r2, [r7, #16]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	fa92 f2a2 	rbit	r2, r2
 8004010:	60fa      	str	r2, [r7, #12]
  return result;
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	fab2 f282 	clz	r2, r2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	f002 021f 	and.w	r2, r2, #31
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f202 	lsl.w	r2, r1, r2
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0bd      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004030:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	492e      	ldr	r1, [pc, #184]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	4313      	orrs	r3, r2
 8004040:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004046:	2b01      	cmp	r3, #1
 8004048:	d105      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404a:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004054:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004062:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f023 0203 	bic.w	r2, r3, #3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4922      	ldr	r1, [pc, #136]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004070:	4313      	orrs	r3, r2
 8004072:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	f023 0210 	bic.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	491a      	ldr	r1, [pc, #104]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408e:	4313      	orrs	r3, r2
 8004090:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	4913      	ldr	r1, [pc, #76]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	490b      	ldr	r1, [pc, #44]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3748      	adds	r7, #72	; 0x48
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
 8004100:	10908100 	.word	0x10908100

08004104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e049      	b.n	80041aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f924 	bl	8001378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4610      	mov	r0, r2
 8004144:	f000 fa84 	bl	8004650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <HAL_TIM_PWM_Start_IT+0x28>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	e03c      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xa2>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d109      	bne.n	80041f6 <HAL_TIM_PWM_Start_IT+0x42>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	e02f      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xa2>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d109      	bne.n	8004210 <HAL_TIM_PWM_Start_IT+0x5c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	e022      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xa2>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b0c      	cmp	r3, #12
 8004214:	d109      	bne.n	800422a <HAL_TIM_PWM_Start_IT+0x76>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b01      	cmp	r3, #1
 8004220:	bf14      	ite	ne
 8004222:	2301      	movne	r3, #1
 8004224:	2300      	moveq	r3, #0
 8004226:	b2db      	uxtb	r3, r3
 8004228:	e015      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xa2>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d109      	bne.n	8004244 <HAL_TIM_PWM_Start_IT+0x90>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b01      	cmp	r3, #1
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	e008      	b.n	8004256 <HAL_TIM_PWM_Start_IT+0xa2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e0d3      	b.n	8004406 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d104      	bne.n	800426e <HAL_TIM_PWM_Start_IT+0xba>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800426c:	e023      	b.n	80042b6 <HAL_TIM_PWM_Start_IT+0x102>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d104      	bne.n	800427e <HAL_TIM_PWM_Start_IT+0xca>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800427c:	e01b      	b.n	80042b6 <HAL_TIM_PWM_Start_IT+0x102>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Start_IT+0xda>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	e013      	b.n	80042b6 <HAL_TIM_PWM_Start_IT+0x102>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Start_IT+0xea>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_PWM_Start_IT+0x102>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start_IT+0xfa>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ac:	e003      	b.n	80042b6 <HAL_TIM_PWM_Start_IT+0x102>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b0c      	cmp	r3, #12
 80042ba:	d841      	bhi.n	8004340 <HAL_TIM_PWM_Start_IT+0x18c>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <HAL_TIM_PWM_Start_IT+0x110>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042f9 	.word	0x080042f9
 80042c8:	08004341 	.word	0x08004341
 80042cc:	08004341 	.word	0x08004341
 80042d0:	08004341 	.word	0x08004341
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	08004341 	.word	0x08004341
 80042dc:	08004341 	.word	0x08004341
 80042e0:	08004341 	.word	0x08004341
 80042e4:	0800431d 	.word	0x0800431d
 80042e8:	08004341 	.word	0x08004341
 80042ec:	08004341 	.word	0x08004341
 80042f0:	08004341 	.word	0x08004341
 80042f4:	0800432f 	.word	0x0800432f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0202 	orr.w	r2, r2, #2
 8004306:	60da      	str	r2, [r3, #12]
      break;
 8004308:	e01d      	b.n	8004346 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0204 	orr.w	r2, r2, #4
 8004318:	60da      	str	r2, [r3, #12]
      break;
 800431a:	e014      	b.n	8004346 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0208 	orr.w	r2, r2, #8
 800432a:	60da      	str	r2, [r3, #12]
      break;
 800432c:	e00b      	b.n	8004346 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f042 0210 	orr.w	r2, r2, #16
 800433c:	60da      	str	r2, [r3, #12]
      break;
 800433e:	e002      	b.n	8004346 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	bf00      	nop
  }

  if (status == HAL_OK)
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d15b      	bne.n	8004404 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2201      	movs	r2, #1
 8004352:	6839      	ldr	r1, [r7, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fc99 	bl	8004c8c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2c      	ldr	r2, [pc, #176]	; (8004410 <HAL_TIM_PWM_Start_IT+0x25c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_TIM_PWM_Start_IT+0x1ce>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2a      	ldr	r2, [pc, #168]	; (8004414 <HAL_TIM_PWM_Start_IT+0x260>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_TIM_PWM_Start_IT+0x1ce>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a29      	ldr	r2, [pc, #164]	; (8004418 <HAL_TIM_PWM_Start_IT+0x264>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_TIM_PWM_Start_IT+0x1ce>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <HAL_TIM_PWM_Start_IT+0x268>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_Start_IT+0x1d2>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004386:	2300      	movs	r3, #0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1b      	ldr	r2, [pc, #108]	; (8004410 <HAL_TIM_PWM_Start_IT+0x25c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_TIM_PWM_Start_IT+0x210>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ae:	d009      	beq.n	80043c4 <HAL_TIM_PWM_Start_IT+0x210>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <HAL_TIM_PWM_Start_IT+0x26c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_PWM_Start_IT+0x210>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a15      	ldr	r2, [pc, #84]	; (8004414 <HAL_TIM_PWM_Start_IT+0x260>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d115      	bne.n	80043f0 <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_TIM_PWM_Start_IT+0x270>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d015      	beq.n	8004402 <HAL_TIM_PWM_Start_IT+0x24e>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d011      	beq.n	8004402 <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ee:	e008      	b.n	8004402 <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e000      	b.n	8004404 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004402:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800
 8004420:	40000400 	.word	0x40000400
 8004424:	00010007 	.word	0x00010007

08004428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004442:	2302      	movs	r3, #2
 8004444:	e0ff      	b.n	8004646 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b14      	cmp	r3, #20
 8004452:	f200 80f0 	bhi.w	8004636 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004456:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445c:	080044b1 	.word	0x080044b1
 8004460:	08004637 	.word	0x08004637
 8004464:	08004637 	.word	0x08004637
 8004468:	08004637 	.word	0x08004637
 800446c:	080044f1 	.word	0x080044f1
 8004470:	08004637 	.word	0x08004637
 8004474:	08004637 	.word	0x08004637
 8004478:	08004637 	.word	0x08004637
 800447c:	08004533 	.word	0x08004533
 8004480:	08004637 	.word	0x08004637
 8004484:	08004637 	.word	0x08004637
 8004488:	08004637 	.word	0x08004637
 800448c:	08004573 	.word	0x08004573
 8004490:	08004637 	.word	0x08004637
 8004494:	08004637 	.word	0x08004637
 8004498:	08004637 	.word	0x08004637
 800449c:	080045b5 	.word	0x080045b5
 80044a0:	08004637 	.word	0x08004637
 80044a4:	08004637 	.word	0x08004637
 80044a8:	08004637 	.word	0x08004637
 80044ac:	080045f5 	.word	0x080045f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f942 	bl	8004740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0208 	orr.w	r2, r2, #8
 80044ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0204 	bic.w	r2, r2, #4
 80044da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]
      break;
 80044ee:	e0a5      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f9a8 	bl	800484c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800450a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	699a      	ldr	r2, [r3, #24]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6999      	ldr	r1, [r3, #24]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	021a      	lsls	r2, r3, #8
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	619a      	str	r2, [r3, #24]
      break;
 8004530:	e084      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa07 	bl	800494c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0208 	orr.w	r2, r2, #8
 800454c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0204 	bic.w	r2, r2, #4
 800455c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69d9      	ldr	r1, [r3, #28]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	61da      	str	r2, [r3, #28]
      break;
 8004570:	e064      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fa65 	bl	8004a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800458c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69da      	ldr	r2, [r3, #28]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69d9      	ldr	r1, [r3, #28]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	021a      	lsls	r2, r3, #8
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	61da      	str	r2, [r3, #28]
      break;
 80045b2:	e043      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 faa8 	bl	8004b10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045f2:	e023      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 fae6 	bl	8004bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004634:	e002      	b.n	800463c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
      break;
 800463a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004644:	7dfb      	ldrb	r3, [r7, #23]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a32      	ldr	r2, [pc, #200]	; (800472c <TIM_Base_SetConfig+0xdc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_Base_SetConfig+0x28>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0x28>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <TIM_Base_SetConfig+0xe0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a27      	ldr	r2, [pc, #156]	; (800472c <TIM_Base_SetConfig+0xdc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <TIM_Base_SetConfig+0x6a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d00f      	beq.n	80046ba <TIM_Base_SetConfig+0x6a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a24      	ldr	r2, [pc, #144]	; (8004730 <TIM_Base_SetConfig+0xe0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d00b      	beq.n	80046ba <TIM_Base_SetConfig+0x6a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <TIM_Base_SetConfig+0xe4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d007      	beq.n	80046ba <TIM_Base_SetConfig+0x6a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <TIM_Base_SetConfig+0xe8>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d003      	beq.n	80046ba <TIM_Base_SetConfig+0x6a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a21      	ldr	r2, [pc, #132]	; (800473c <TIM_Base_SetConfig+0xec>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d108      	bne.n	80046cc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	; (800472c <TIM_Base_SetConfig+0xdc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_Base_SetConfig+0xc0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a0e      	ldr	r2, [pc, #56]	; (8004734 <TIM_Base_SetConfig+0xe4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_Base_SetConfig+0xc0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <TIM_Base_SetConfig+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0xc0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0c      	ldr	r2, [pc, #48]	; (800473c <TIM_Base_SetConfig+0xec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d103      	bne.n	8004718 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	615a      	str	r2, [r3, #20]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40000400 	.word	0x40000400
 8004734:	40014000 	.word	0x40014000
 8004738:	40014400 	.word	0x40014400
 800473c:	40014800 	.word	0x40014800

08004740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f023 0201 	bic.w	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f023 0302 	bic.w	r3, r3, #2
 800478c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	4313      	orrs	r3, r2
 8004796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a28      	ldr	r2, [pc, #160]	; (800483c <TIM_OC1_SetConfig+0xfc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00b      	beq.n	80047b8 <TIM_OC1_SetConfig+0x78>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a27      	ldr	r2, [pc, #156]	; (8004840 <TIM_OC1_SetConfig+0x100>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d007      	beq.n	80047b8 <TIM_OC1_SetConfig+0x78>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a26      	ldr	r2, [pc, #152]	; (8004844 <TIM_OC1_SetConfig+0x104>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d003      	beq.n	80047b8 <TIM_OC1_SetConfig+0x78>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a25      	ldr	r2, [pc, #148]	; (8004848 <TIM_OC1_SetConfig+0x108>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10c      	bne.n	80047d2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f023 0308 	bic.w	r3, r3, #8
 80047be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0304 	bic.w	r3, r3, #4
 80047d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <TIM_OC1_SetConfig+0xfc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_OC1_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <TIM_OC1_SetConfig+0x100>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_OC1_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <TIM_OC1_SetConfig+0x104>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_OC1_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a16      	ldr	r2, [pc, #88]	; (8004848 <TIM_OC1_SetConfig+0x108>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	621a      	str	r2, [r3, #32]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	40012c00 	.word	0x40012c00
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800

0800484c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0320 	bic.w	r3, r3, #32
 800489a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a24      	ldr	r2, [pc, #144]	; (800493c <TIM_OC2_SetConfig+0xf0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d10d      	bne.n	80048cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <TIM_OC2_SetConfig+0xf0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_OC2_SetConfig+0xa0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <TIM_OC2_SetConfig+0xf4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d007      	beq.n	80048ec <TIM_OC2_SetConfig+0xa0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a19      	ldr	r2, [pc, #100]	; (8004944 <TIM_OC2_SetConfig+0xf8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC2_SetConfig+0xa0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <TIM_OC2_SetConfig+0xfc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d113      	bne.n	8004914 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f023 0303 	bic.w	r3, r3, #3
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a23      	ldr	r2, [pc, #140]	; (8004a38 <TIM_OC3_SetConfig+0xec>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d10d      	bne.n	80049ca <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049c8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <TIM_OC3_SetConfig+0xec>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00b      	beq.n	80049ea <TIM_OC3_SetConfig+0x9e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <TIM_OC3_SetConfig+0xf0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <TIM_OC3_SetConfig+0x9e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <TIM_OC3_SetConfig+0xf4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d003      	beq.n	80049ea <TIM_OC3_SetConfig+0x9e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <TIM_OC3_SetConfig+0xf8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d113      	bne.n	8004a12 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	621a      	str	r2, [r3, #32]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	031b      	lsls	r3, r3, #12
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <TIM_OC4_SetConfig+0xb8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x7c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <TIM_OC4_SetConfig+0xbc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x7c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a14      	ldr	r2, [pc, #80]	; (8004b08 <TIM_OC4_SetConfig+0xc0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_OC4_SetConfig+0x7c>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a13      	ldr	r2, [pc, #76]	; (8004b0c <TIM_OC4_SetConfig+0xc4>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d109      	bne.n	8004ad8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	019b      	lsls	r3, r3, #6
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800

08004b10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b087      	sub	sp, #28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <TIM_OC5_SetConfig+0xac>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <TIM_OC5_SetConfig+0x72>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <TIM_OC5_SetConfig+0xb0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d007      	beq.n	8004b82 <TIM_OC5_SetConfig+0x72>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a13      	ldr	r2, [pc, #76]	; (8004bc4 <TIM_OC5_SetConfig+0xb4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <TIM_OC5_SetConfig+0x72>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <TIM_OC5_SetConfig+0xb8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d109      	bne.n	8004b96 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	621a      	str	r2, [r3, #32]
}
 8004bb0:	bf00      	nop
 8004bb2:	371c      	adds	r7, #28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40012c00 	.word	0x40012c00
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_OC6_SetConfig+0xb0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_OC6_SetConfig+0x74>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <TIM_OC6_SetConfig+0xb4>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC6_SetConfig+0x74>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <TIM_OC6_SetConfig+0xb8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC6_SetConfig+0x74>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <TIM_OC6_SetConfig+0xbc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	029b      	lsls	r3, r3, #10
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800

08004c8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 031f 	and.w	r3, r3, #31
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	621a      	str	r2, [r3, #32]
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e054      	b.n	8004d9a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d108      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00e      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d58:	d009      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d004      	beq.n	8004d6e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d10c      	bne.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40012c00 	.word	0x40012c00
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40014000 	.word	0x40014000

08004db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e060      	b.n	8004e92 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	041b      	lsls	r3, r3, #16
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a14      	ldr	r2, [pc, #80]	; (8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d115      	bne.n	8004e80 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	051b      	lsls	r3, r3, #20
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <__libc_init_array>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	4d0d      	ldr	r5, [pc, #52]	; (8004edc <__libc_init_array+0x38>)
 8004ea8:	4c0d      	ldr	r4, [pc, #52]	; (8004ee0 <__libc_init_array+0x3c>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	42a6      	cmp	r6, r4
 8004eb2:	d109      	bne.n	8004ec8 <__libc_init_array+0x24>
 8004eb4:	4d0b      	ldr	r5, [pc, #44]	; (8004ee4 <__libc_init_array+0x40>)
 8004eb6:	4c0c      	ldr	r4, [pc, #48]	; (8004ee8 <__libc_init_array+0x44>)
 8004eb8:	f000 f820 	bl	8004efc <_init>
 8004ebc:	1b64      	subs	r4, r4, r5
 8004ebe:	10a4      	asrs	r4, r4, #2
 8004ec0:	2600      	movs	r6, #0
 8004ec2:	42a6      	cmp	r6, r4
 8004ec4:	d105      	bne.n	8004ed2 <__libc_init_array+0x2e>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ecc:	4798      	blx	r3
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7ee      	b.n	8004eb0 <__libc_init_array+0xc>
 8004ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed6:	4798      	blx	r3
 8004ed8:	3601      	adds	r6, #1
 8004eda:	e7f2      	b.n	8004ec2 <__libc_init_array+0x1e>
 8004edc:	08004f44 	.word	0x08004f44
 8004ee0:	08004f44 	.word	0x08004f44
 8004ee4:	08004f44 	.word	0x08004f44
 8004ee8:	08004f48 	.word	0x08004f48

08004eec <memset>:
 8004eec:	4402      	add	r2, r0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <memset+0xa>
 8004ef4:	4770      	bx	lr
 8004ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8004efa:	e7f9      	b.n	8004ef0 <memset+0x4>

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
