
LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f4  080042f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080042f4  080042f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042f4  080042f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f4  080042f4  000142f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080042fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000108  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d300  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da1  00000000  00000000  0002d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b70  00000000  00000000  0002fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb2d  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e94b  00000000  00000000  000503dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c202c  00000000  00000000  0005ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00120d54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000339c  00000000  00000000  00120da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042ac 	.word	0x080042ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080042ac 	.word	0x080042ac

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb74 	bl	80008b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f99e 	bl	8000514 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f97e 	bl	80004d8 <MX_DMA_Init>
  MX_ADC1_Init();
 80001dc:	f000 f87c 	bl	80002d8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8ea 	bl	80003b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_value,1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	4907      	ldr	r1, [pc, #28]	; (8000204 <main+0x3c>)
 80001e8:	4807      	ldr	r0, [pc, #28]	; (8000208 <main+0x40>)
 80001ea:	f000 fd7b 	bl	8000ce4 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <main+0x44>)
 80001f2:	f003 f9b7 	bl	8003564 <HAL_TIM_PWM_Start_IT>

  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <main+0x48>)
 80001f8:	781a      	ldrb	r2, [r3, #0]
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <main+0x44>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	e7fe      	b.n	8000200 <main+0x38>
 8000202:	bf00      	nop
 8000204:	2000002c 	.word	0x2000002c
 8000208:	20000034 	.word	0x20000034
 800020c:	200000c8 	.word	0x200000c8
 8000210:	20000000 	.word	0x20000000

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f004 f83a 	bl	800429c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 031c 	add.w	r3, r7, #28
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]
 8000246:	615a      	str	r2, [r3, #20]
 8000248:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000266:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800026a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000270:	4618      	mov	r0, r3
 8000272:	f001 fefb 	bl	800206c <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800027c:	f000 f9c2 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	2102      	movs	r1, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fded 	bl	8002e7c <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002a8:	f000 f9ac 	bl	8000604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002ac:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 ffc2 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002ca:	f000 f99b 	bl	8000604 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3758      	adds	r7, #88	; 0x58
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08a      	sub	sp, #40	; 0x28
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2200      	movs	r2, #0
 80002ee:	601a      	str	r2, [r3, #0]
 80002f0:	605a      	str	r2, [r3, #4]
 80002f2:	609a      	str	r2, [r3, #8]
 80002f4:	60da      	str	r2, [r3, #12]
 80002f6:	611a      	str	r2, [r3, #16]
 80002f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fa:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <MX_ADC1_Init+0xdc>)
 80002fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000308:	4b2a      	ldr	r3, [pc, #168]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000314:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000316:	2201      	movs	r2, #1
 8000318:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031a:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000328:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800032a:	2201      	movs	r2, #1
 800032c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000334:	4b1f      	ldr	r3, [pc, #124]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000336:	2201      	movs	r2, #1
 8000338:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800033c:	2201      	movs	r2, #1
 800033e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000344:	2204      	movs	r2, #4
 8000346:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000348:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800034a:	2200      	movs	r2, #0
 800034c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800034e:	4b19      	ldr	r3, [pc, #100]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000350:	2200      	movs	r2, #0
 8000352:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000356:	f000 fb33 	bl	80009c0 <HAL_ADC_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000360:	f000 f950 	bl	8000604 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000364:	2300      	movs	r3, #0
 8000366:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000368:	f107 031c 	add.w	r3, r7, #28
 800036c:	4619      	mov	r1, r3
 800036e:	4811      	ldr	r0, [pc, #68]	; (80003b4 <MX_ADC1_Init+0xdc>)
 8000370:	f001 f854 	bl	800141c <HAL_ADCEx_MultiModeConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800037a:	f000 f943 	bl	8000604 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800037e:	2301      	movs	r3, #1
 8000380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000382:	2301      	movs	r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000386:	2300      	movs	r3, #0
 8000388:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038a:	2300      	movs	r3, #0
 800038c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <MX_ADC1_Init+0xdc>)
 800039c:	f000 fd7c 	bl	8000e98 <HAL_ADC_ConfigChannel>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003a6:	f000 f92d 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	3728      	adds	r7, #40	; 0x28
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000034 	.word	0x20000034

080003b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b096      	sub	sp, #88	; 0x58
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	615a      	str	r2, [r3, #20]
 80003dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	222c      	movs	r2, #44	; 0x2c
 80003e2:	2100      	movs	r1, #0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f003 ff59 	bl	800429c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ea:	4b39      	ldr	r3, [pc, #228]	; (80004d0 <MX_TIM1_Init+0x118>)
 80003ec:	4a39      	ldr	r2, [pc, #228]	; (80004d4 <MX_TIM1_Init+0x11c>)
 80003ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003f0:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <MX_TIM1_Init+0x118>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <MX_TIM1_Init+0x118>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64999;
 80003fc:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <MX_TIM1_Init+0x118>)
 80003fe:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8000402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <MX_TIM1_Init+0x118>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040a:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MX_TIM1_Init+0x118>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <MX_TIM1_Init+0x118>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000416:	482e      	ldr	r0, [pc, #184]	; (80004d0 <MX_TIM1_Init+0x118>)
 8000418:	f003 f84c 	bl	80034b4 <HAL_TIM_PWM_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000422:	f000 f8ef 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000426:	2300      	movs	r3, #0
 8000428:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800042a:	2300      	movs	r3, #0
 800042c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800042e:	2300      	movs	r3, #0
 8000430:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000432:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000436:	4619      	mov	r1, r3
 8000438:	4825      	ldr	r0, [pc, #148]	; (80004d0 <MX_TIM1_Init+0x118>)
 800043a:	f003 fe25 	bl	8004088 <HAL_TIMEx_MasterConfigSynchronization>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000444:	f000 f8de 	bl	8000604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000448:	2360      	movs	r3, #96	; 0x60
 800044a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	2300      	movs	r3, #0
 8000452:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000454:	2300      	movs	r3, #0
 8000456:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000458:	2300      	movs	r3, #0
 800045a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800045c:	2300      	movs	r3, #0
 800045e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000460:	2300      	movs	r3, #0
 8000462:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000464:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000468:	2200      	movs	r2, #0
 800046a:	4619      	mov	r1, r3
 800046c:	4818      	ldr	r0, [pc, #96]	; (80004d0 <MX_TIM1_Init+0x118>)
 800046e:	f003 f9b3 	bl	80037d8 <HAL_TIM_PWM_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000478:	f000 f8c4 	bl	8000604 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000494:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800049a:	2300      	movs	r3, #0
 800049c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800049e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80004a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4619      	mov	r1, r3
 80004b0:	4807      	ldr	r0, [pc, #28]	; (80004d0 <MX_TIM1_Init+0x118>)
 80004b2:	f003 fe57 	bl	8004164 <HAL_TIMEx_ConfigBreakDeadTime>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80004bc:	f000 f8a2 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004c0:	4803      	ldr	r0, [pc, #12]	; (80004d0 <MX_TIM1_Init+0x118>)
 80004c2:	f000 f951 	bl	8000768 <HAL_TIM_MspPostInit>

}
 80004c6:	bf00      	nop
 80004c8:	3758      	adds	r7, #88	; 0x58
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000c8 	.word	0x200000c8
 80004d4:	40012c00 	.word	0x40012c00

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_DMA_Init+0x38>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <MX_DMA_Init+0x38>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_DMA_Init+0x38>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	200b      	movs	r0, #11
 80004fc:	f001 fa5f 	bl	80019be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000500:	200b      	movs	r0, #11
 8000502:	f001 fa78 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b34      	ldr	r3, [pc, #208]	; (80005fc <MX_GPIO_Init+0xe8>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a33      	ldr	r2, [pc, #204]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <MX_GPIO_Init+0xe8>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a21      	ldr	r2, [pc, #132]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <MX_GPIO_Init+0xe8>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fd53 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <MX_GPIO_Init+0xec>)
 80005ae:	f001 fbd3 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005b2:	230c      	movs	r3, #12
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005c2:	2307      	movs	r3, #7
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f001 fbc2 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d4:	2320      	movs	r3, #32
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f001 fbb3 	bl	8001d58 <HAL_GPIO_Init>

}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <Error_Handler+0x8>
	...

08000610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x44>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6193      	str	r3, [r2, #24]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x44>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a08      	ldr	r2, [pc, #32]	; (8000654 <HAL_MspInit+0x44>)
 8000634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_MspInit+0x44>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000646:	2007      	movs	r0, #7
 8000648:	f001 f9ae 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000678:	d14c      	bne.n	8000714 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <HAL_ADC_MspInit+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a27      	ldr	r2, [pc, #156]	; (800071c <HAL_ADC_MspInit+0xc4>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <HAL_ADC_MspInit+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <HAL_ADC_MspInit+0xc4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a21      	ldr	r2, [pc, #132]	; (800071c <HAL_ADC_MspInit+0xc4>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <HAL_ADC_MspInit+0xc4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006aa:	2301      	movs	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f001 fb4a 	bl	8001d58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006c6:	4a17      	ldr	r2, [pc, #92]	; (8000724 <HAL_ADC_MspInit+0xcc>)
 80006c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 80006fa:	f001 f996 	bl	8001a2a <HAL_DMA_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000704:	f7ff ff7e 	bl	8000604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 800070c:	639a      	str	r2, [r3, #56]	; 0x38
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_ADC_MspInit+0xc8>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	20000084 	.word	0x20000084
 8000724:	40020008 	.word	0x40020008

08000728 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <HAL_TIM_PWM_MspInit+0x38>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d10b      	bne.n	8000752 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_TIM_PWM_MspInit+0x3c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_TIM_PWM_MspInit+0x3c>)
 8000740:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <HAL_TIM_PWM_MspInit+0x3c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40012c00 	.word	0x40012c00
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a11      	ldr	r2, [pc, #68]	; (80007cc <HAL_TIM_MspPostInit+0x64>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d11b      	bne.n	80007c2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <HAL_TIM_MspPostInit+0x68>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <HAL_TIM_MspPostInit+0x68>)
 8000790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <HAL_TIM_MspPostInit+0x68>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a2:	2301      	movs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	; (80007d4 <HAL_TIM_MspPostInit+0x6c>)
 80007be:	f001 facb 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	3720      	adds	r7, #32
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40012c00 	.word	0x40012c00
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000800 	.word	0x48000800

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f88e 	bl	8000944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <DMA1_Channel1_IRQHandler+0x10>)
 8000832:	f001 f9a0 	bl	8001b76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000084 	.word	0x20000084

08000840 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f003 fcdf 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000896:	f7ff fc97 	bl	80001c8 <main>

0800089a <LoopForever>:

LoopForever:
    b LoopForever
 800089a:	e7fe      	b.n	800089a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800089c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008a8:	080042fc 	.word	0x080042fc
  ldr r2, =_sbss
 80008ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008b0:	20000118 	.word	0x20000118

080008b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <ADC1_2_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008bc:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_Init+0x28>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <HAL_Init+0x28>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f001 f86d 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 f808 	bl	80008e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d4:	f7ff fe9c 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x54>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x58>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f001 f885 	bl	8001a12 <HAL_SYSTICK_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00e      	b.n	8000930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2b0f      	cmp	r3, #15
 8000916:	d80a      	bhi.n	800092e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000918:	2200      	movs	r2, #0
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	f001 f84d 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000924:	4a06      	ldr	r2, [pc, #24]	; (8000940 <HAL_InitTick+0x5c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000004 	.word	0x20000004
 800093c:	2000000c 	.word	0x2000000c
 8000940:	20000008 	.word	0x20000008

08000944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x20>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x24>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4413      	add	r3, r2
 8000954:	4a04      	ldr	r2, [pc, #16]	; (8000968 <HAL_IncTick+0x24>)
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	2000000c 	.word	0x2000000c
 8000968:	20000114 	.word	0x20000114

0800096c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000114 	.word	0x20000114

08000984 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09a      	sub	sp, #104	; 0x68
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009ce:	2300      	movs	r3, #0
 80009d0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d101      	bne.n	80009e0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e172      	b.n	8000cc6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 0310 	and.w	r3, r3, #16
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d176      	bne.n	8000ae0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d152      	bne.n	8000aa0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff fe1f 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d13b      	bne.n	8000aa0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 fe87 	bl	800173c <ADC_Disable>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 0310 	and.w	r3, r3, #16
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d12f      	bne.n	8000aa0 <HAL_ADC_Init+0xe0>
 8000a40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d12b      	bne.n	8000aa0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a50:	f023 0302 	bic.w	r3, r3, #2
 8000a54:	f043 0202 	orr.w	r2, r3, #2
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a6a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a7c:	4b94      	ldr	r3, [pc, #592]	; (8000cd0 <HAL_ADC_Init+0x310>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a94      	ldr	r2, [pc, #592]	; (8000cd4 <HAL_ADC_Init+0x314>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	0c9a      	lsrs	r2, r3, #18
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a92:	e002      	b.n	8000a9a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f9      	bne.n	8000a94 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000abc:	d110      	bne.n	8000ae0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f023 0312 	bic.w	r3, r3, #18
 8000ac6:	f043 0210 	orr.w	r2, r3, #16
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f043 0201 	orr.w	r2, r3, #1
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f040 80df 	bne.w	8000cac <HAL_ADC_Init+0x2ec>
 8000aee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f040 80da 	bne.w	8000cac <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f040 80d2 	bne.w	8000cac <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b10:	f043 0202 	orr.w	r2, r3, #2
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b18:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <HAL_ADC_Init+0x318>)
 8000b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b24:	d102      	bne.n	8000b2c <HAL_ADC_Init+0x16c>
 8000b26:	4b6d      	ldr	r3, [pc, #436]	; (8000cdc <HAL_ADC_Init+0x31c>)
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e002      	b.n	8000b32 <HAL_ADC_Init+0x172>
 8000b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b30:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d108      	bne.n	8000b52 <HAL_ADC_Init+0x192>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Init+0x192>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_ADC_Init+0x194>
 8000b52:	2300      	movs	r3, #0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d11c      	bne.n	8000b92 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b58:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d010      	beq.n	8000b80 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <HAL_ADC_Init+0x1ba>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d101      	bne.n	8000b7a <HAL_ADC_Init+0x1ba>
 8000b76:	2301      	movs	r3, #1
 8000b78:	e000      	b.n	8000b7c <HAL_ADC_Init+0x1bc>
 8000b7a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d108      	bne.n	8000b92 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b90:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7e5b      	ldrb	r3, [r3, #25]
 8000b96:	035b      	lsls	r3, r3, #13
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b9c:	2a01      	cmp	r2, #1
 8000b9e:	d002      	beq.n	8000ba6 <HAL_ADC_Init+0x1e6>
 8000ba0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ba4:	e000      	b.n	8000ba8 <HAL_ADC_Init+0x1e8>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d11b      	bne.n	8000bfe <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7e5b      	ldrb	r3, [r3, #25]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d109      	bne.n	8000be2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	045a      	lsls	r2, r3, #17
 8000bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
 8000be0:	e00d      	b.n	8000bfe <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000bea:	f043 0220 	orr.w	r2, r3, #32
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c12:	4313      	orrs	r3, r2
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 030c 	and.w	r3, r3, #12
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d114      	bne.n	8000c4e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c32:	f023 0302 	bic.w	r3, r3, #2
 8000c36:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	7e1b      	ldrb	r3, [r3, #24]
 8000c3c:	039a      	lsls	r2, r3, #14
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4313      	orrs	r3, r2
 8000c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68da      	ldr	r2, [r3, #12]
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_ADC_Init+0x320>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c5e:	430b      	orrs	r3, r1
 8000c60:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	691b      	ldr	r3, [r3, #16]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d10c      	bne.n	8000c84 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f023 010f 	bic.w	r1, r3, #15
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
 8000c82:	e007      	b.n	8000c94 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020f 	bic.w	r2, r2, #15
 8000c92:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2200      	movs	r2, #0
 8000c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f023 0303 	bic.w	r3, r3, #3
 8000ca2:	f043 0201 	orr.w	r2, r3, #1
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8000caa:	e00a      	b.n	8000cc2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f023 0312 	bic.w	r3, r3, #18
 8000cb4:	f043 0210 	orr.w	r2, r3, #16
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3768      	adds	r7, #104	; 0x68
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	50000300 	.word	0x50000300
 8000cdc:	50000100 	.word	0x50000100
 8000ce0:	fff0c007 	.word	0xfff0c007

08000ce4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 80b9 	bne.w	8000e76 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d101      	bne.n	8000d12 <HAL_ADC_Start_DMA+0x2e>
 8000d0e:	2302      	movs	r3, #2
 8000d10:	e0b4      	b.n	8000e7c <HAL_ADC_Start_DMA+0x198>
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000d1a:	4b5a      	ldr	r3, [pc, #360]	; (8000e84 <HAL_ADC_Start_DMA+0x1a0>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 80a0 	bne.w	8000e68 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f000 fca3 	bl	8001674 <ADC_Enable>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000d32:	7dfb      	ldrb	r3, [r7, #23]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f040 8092 	bne.w	8000e5e <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d4e:	4b4d      	ldr	r3, [pc, #308]	; (8000e84 <HAL_ADC_Start_DMA+0x1a0>)
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_ADC_Start_DMA+0x80>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d62:	d115      	bne.n	8000d90 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d027      	beq.n	8000dce <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d8e:	e01e      	b.n	8000dce <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da4:	d004      	beq.n	8000db0 <HAL_ADC_Start_DMA+0xcc>
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <HAL_ADC_Start_DMA+0x1a4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d10e      	bne.n	8000dce <HAL_ADC_Start_DMA+0xea>
 8000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d007      	beq.n	8000dce <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dda:	d106      	bne.n	8000dea <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de0:	f023 0206 	bic.w	r2, r3, #6
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	645a      	str	r2, [r3, #68]	; 0x44
 8000de8:	e002      	b.n	8000df0 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2200      	movs	r2, #0
 8000dee:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <HAL_ADC_Start_DMA+0x1a8>)
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <HAL_ADC_Start_DMA+0x1ac>)
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e0c:	4a21      	ldr	r2, [pc, #132]	; (8000e94 <HAL_ADC_Start_DMA+0x1b0>)
 8000e0e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	221c      	movs	r2, #28
 8000e16:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0210 	orr.w	r2, r2, #16
 8000e26:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0201 	orr.w	r2, r2, #1
 8000e36:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3340      	adds	r3, #64	; 0x40
 8000e42:	4619      	mov	r1, r3
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f000 fe36 	bl	8001ab8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 0204 	orr.w	r2, r2, #4
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	e00d      	b.n	8000e7a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e66:	e008      	b.n	8000e7a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e74:	e001      	b.n	8000e7a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e76:	2302      	movs	r3, #2
 8000e78:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	50000300 	.word	0x50000300
 8000e88:	50000100 	.word	0x50000100
 8000e8c:	080015a9 	.word	0x080015a9
 8000e90:	08001623 	.word	0x08001623
 8000e94:	0800163f 	.word	0x0800163f

08000e98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b09b      	sub	sp, #108	; 0x6c
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d101      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x22>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e2a5      	b.n	8001406 <HAL_ADC_ConfigChannel+0x56e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 0304 	and.w	r3, r3, #4
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f040 8289 	bne.w	80013e4 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d81c      	bhi.n	8000f14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	461a      	mov	r2, r3
 8000eee:	231f      	movs	r3, #31
 8000ef0:	4093      	lsls	r3, r2
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	4019      	ands	r1, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
 8000f12:	e063      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d81e      	bhi.n	8000f5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	3b1e      	subs	r3, #30
 8000f30:	221f      	movs	r2, #31
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	4019      	ands	r1, r3
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	3b1e      	subs	r3, #30
 8000f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34
 8000f58:	e040      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b0e      	cmp	r3, #14
 8000f60:	d81e      	bhi.n	8000fa0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3b3c      	subs	r3, #60	; 0x3c
 8000f76:	221f      	movs	r2, #31
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	3b3c      	subs	r3, #60	; 0x3c
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f9e:	e01d      	b.n	8000fdc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3b5a      	subs	r3, #90	; 0x5a
 8000fb4:	221f      	movs	r2, #31
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4019      	ands	r1, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	6818      	ldr	r0, [r3, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3b5a      	subs	r3, #90	; 0x5a
 8000fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 80e5 	bne.w	80011b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d91c      	bls.n	800102e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6999      	ldr	r1, [r3, #24]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	3b1e      	subs	r3, #30
 8001006:	2207      	movs	r2, #7
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	4019      	ands	r1, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6898      	ldr	r0, [r3, #8]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	3b1e      	subs	r3, #30
 8001020:	fa00 f203 	lsl.w	r2, r0, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	619a      	str	r2, [r3, #24]
 800102c:	e019      	b.n	8001062 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6959      	ldr	r1, [r3, #20]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	2207      	movs	r2, #7
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	4019      	ands	r1, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	fa00 f203 	lsl.w	r2, r0, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	3b01      	subs	r3, #1
 8001080:	2b03      	cmp	r3, #3
 8001082:	d84f      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0x28c>
 8001084:	a201      	add	r2, pc, #4	; (adr r2, 800108c <HAL_ADC_ConfigChannel+0x1f4>)
 8001086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108a:	bf00      	nop
 800108c:	0800109d 	.word	0x0800109d
 8001090:	080010bf 	.word	0x080010bf
 8001094:	080010e1 	.word	0x080010e1
 8001098:	08001103 	.word	0x08001103
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a2:	4b9e      	ldr	r3, [pc, #632]	; (800131c <HAL_ADC_ConfigChannel+0x484>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	0691      	lsls	r1, r2, #26
 80010ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010ae:	430a      	orrs	r2, r1
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010bc:	e07e      	b.n	80011bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010c4:	4b95      	ldr	r3, [pc, #596]	; (800131c <HAL_ADC_ConfigChannel+0x484>)
 80010c6:	4013      	ands	r3, r2
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	0691      	lsls	r1, r2, #26
 80010ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010d0:	430a      	orrs	r2, r1
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010de:	e06d      	b.n	80011bc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010e6:	4b8d      	ldr	r3, [pc, #564]	; (800131c <HAL_ADC_ConfigChannel+0x484>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	0691      	lsls	r1, r2, #26
 80010f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010f2:	430a      	orrs	r2, r1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001100:	e05c      	b.n	80011bc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001108:	4b84      	ldr	r3, [pc, #528]	; (800131c <HAL_ADC_ConfigChannel+0x484>)
 800110a:	4013      	ands	r3, r2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	0691      	lsls	r1, r2, #26
 8001112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001114:	430a      	orrs	r2, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001120:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001122:	e04b      	b.n	80011bc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	069b      	lsls	r3, r3, #26
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001146:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800114e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	069b      	lsls	r3, r3, #26
 8001158:	429a      	cmp	r2, r3
 800115a:	d107      	bne.n	800116c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800116a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	069b      	lsls	r3, r3, #26
 800117c:	429a      	cmp	r2, r3
 800117e:	d107      	bne.n	8001190 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800118e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001196:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	069b      	lsls	r3, r3, #26
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d10a      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80011b4:	e001      	b.n	80011ba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80011b6:	bf00      	nop
 80011b8:	e000      	b.n	80011bc <HAL_ADC_ConfigChannel+0x324>
      break;
 80011ba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d108      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x344>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d101      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x344>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <HAL_ADC_ConfigChannel+0x346>
 80011dc:	2300      	movs	r3, #0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f040 810b 	bne.w	80013fa <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d00f      	beq.n	800120c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2201      	movs	r2, #1
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	400a      	ands	r2, r1
 8001206:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800120a:	e049      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2201      	movs	r2, #1
 800121a:	409a      	lsls	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b09      	cmp	r3, #9
 800122c:	d91c      	bls.n	8001268 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6999      	ldr	r1, [r3, #24]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	3b1b      	subs	r3, #27
 8001240:	2207      	movs	r2, #7
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	4019      	ands	r1, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	6898      	ldr	r0, [r3, #8]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	3b1b      	subs	r3, #27
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	619a      	str	r2, [r3, #24]
 8001266:	e01b      	b.n	80012a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6959      	ldr	r1, [r3, #20]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	2207      	movs	r2, #7
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	4019      	ands	r1, r3
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6898      	ldr	r0, [r3, #8]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	fa00 f203 	lsl.w	r2, r0, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	430a      	orrs	r2, r1
 800129e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <HAL_ADC_ConfigChannel+0x488>)
 80012a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b10      	cmp	r3, #16
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d015      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012bc:	2b11      	cmp	r3, #17
 80012be:	d105      	bne.n	80012cc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	f040 8092 	bne.w	80013fa <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80012d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 808b 	bne.w	80013fa <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ec:	d102      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x45c>
 80012ee:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_ConfigChannel+0x48c>)
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e002      	b.n	80012fa <HAL_ADC_ConfigChannel+0x462>
 80012f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d10f      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x490>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d108      	bne.n	8001328 <HAL_ADC_ConfigChannel+0x490>
 8001316:	2301      	movs	r3, #1
 8001318:	e007      	b.n	800132a <HAL_ADC_ConfigChannel+0x492>
 800131a:	bf00      	nop
 800131c:	83fff000 	.word	0x83fff000
 8001320:	50000300 	.word	0x50000300
 8001324:	50000100 	.word	0x50000100
 8001328:	2300      	movs	r3, #0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d150      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800132e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001330:	2b00      	cmp	r3, #0
 8001332:	d010      	beq.n	8001356 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d107      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x4b8>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x4b8>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_ADC_ConfigChannel+0x4ba>
 8001350:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001352:	2b00      	cmp	r3, #0
 8001354:	d13c      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d11d      	bne.n	800139a <HAL_ADC_ConfigChannel+0x502>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001366:	d118      	bne.n	800139a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001372:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_ADC_ConfigChannel+0x57c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <HAL_ADC_ConfigChannel+0x580>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9a      	lsrs	r2, r3, #18
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800138a:	e002      	b.n	8001392 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	3b01      	subs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f9      	bne.n	800138c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001398:	e02e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b11      	cmp	r3, #17
 80013a0:	d10b      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x522>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d106      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80013b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013b8:	e01e      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d11a      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80013c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ce:	e013      	b.n	80013f8 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f043 0220 	orr.w	r2, r3, #32
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013e2:	e00a      	b.n	80013fa <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013f6:	e000      	b.n	80013fa <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013f8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001402:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001406:	4618      	mov	r0, r3
 8001408:	376c      	adds	r7, #108	; 0x6c
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000004 	.word	0x20000004
 8001418:	431bde83 	.word	0x431bde83

0800141c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800141c:	b480      	push	{r7}
 800141e:	b099      	sub	sp, #100	; 0x64
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001434:	d102      	bne.n	800143c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001436:	4b5a      	ldr	r3, [pc, #360]	; (80015a0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	e002      	b.n	8001442 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800143c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001440:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0a2      	b.n	8001592 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001456:	2302      	movs	r3, #2
 8001458:	e09b      	b.n	8001592 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d17f      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	2b00      	cmp	r3, #0
 800147a:	d179      	bne.n	8001570 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800147e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d040      	beq.n	800150a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001488:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800149a:	035b      	lsls	r3, r3, #13
 800149c:	430b      	orrs	r3, r1
 800149e:	431a      	orrs	r2, r3
 80014a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014a2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d108      	bne.n	80014c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80014c4:	2300      	movs	r3, #0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d15c      	bne.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80014e6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d14b      	bne.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014f4:	f023 030f 	bic.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6811      	ldr	r1, [r2, #0]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	6892      	ldr	r2, [r2, #8]
 8001500:	430a      	orrs	r2, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001506:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001508:	e03c      	b.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800150a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001514:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001536:	2300      	movs	r3, #0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d123      	bne.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d107      	bne.n	8001558 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001558:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d112      	bne.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800155e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800156c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800156e:	e009      	b.n	8001584 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f043 0220 	orr.w	r2, r3, #32
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001582:	e000      	b.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001584:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001592:	4618      	mov	r0, r3
 8001594:	3764      	adds	r7, #100	; 0x64
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	50000100 	.word	0x50000100
 80015a4:	50000300 	.word	0x50000300

080015a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d126      	bne.n	8001610 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d115      	bne.n	8001608 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d111      	bne.n	8001608 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d105      	bne.n	8001608 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f043 0201 	orr.w	r2, r3, #1
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff f9bb 	bl	8000984 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800160e:	e004      	b.n	800161a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b084      	sub	sp, #16
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff f9b1 	bl	8000998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001636:	bf00      	nop
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f043 0204 	orr.w	r2, r3, #4
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff f9a1 	bl	80009ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <ADC_Enable+0x2c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <ADC_Enable+0x2c>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <ADC_Enable+0x2e>
 80016a0:	2300      	movs	r3, #0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d143      	bne.n	800172e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <ADC_Enable+0xc4>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e02f      	b.n	8001730 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016e0:	f7ff f944 	bl	800096c <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016e6:	e01b      	b.n	8001720 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016e8:	f7ff f940 	bl	800096c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d914      	bls.n	8001720 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d00d      	beq.n	8001720 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f043 0210 	orr.w	r2, r3, #16
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001714:	f043 0201 	orr.w	r2, r3, #1
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e007      	b.n	8001730 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b01      	cmp	r3, #1
 800172c:	d1dc      	bne.n	80016e8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	8000003f 	.word	0x8000003f

0800173c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <ADC_Disable+0x2c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <ADC_Disable+0x2c>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <ADC_Disable+0x2e>
 8001768:	2300      	movs	r3, #0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d047      	beq.n	80017fe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030d 	and.w	r3, r3, #13
 8001778:	2b01      	cmp	r3, #1
 800177a:	d10f      	bne.n	800179c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f042 0202 	orr.w	r2, r2, #2
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2203      	movs	r2, #3
 8001792:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001794:	f7ff f8ea 	bl	800096c <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800179a:	e029      	b.n	80017f0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f043 0210 	orr.w	r2, r3, #16
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e023      	b.n	8001800 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017b8:	f7ff f8d8 	bl	800096c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d914      	bls.n	80017f0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10d      	bne.n	80017f0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e007      	b.n	8001800 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d0dc      	beq.n	80017b8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187a:	2b00      	cmp	r3, #0
 800187c:	db0b      	blt.n	8001896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <__NVIC_EnableIRQ+0x38>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	2001      	movs	r0, #1
 800188e:	fa00 f202 	lsl.w	r2, r0, r2
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff29 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff3e 	bl	8001850 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa2 	bl	8001964 <SysTick_Config>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e037      	b.n	8001ab0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f940 	bl	8001d18 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}  
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_DMA_Start_IT+0x20>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e04a      	b.n	8001b6e <HAL_DMA_Start_IT+0xb6>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d13a      	bne.n	8001b60 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f8d4 	bl	8001cbc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 020e 	orr.w	r2, r2, #14
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e00f      	b.n	8001b4e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 020a 	orr.w	r2, r2, #10
 8001b3c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	e005      	b.n	8001b6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2204      	movs	r2, #4
 8001b94:	409a      	lsls	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d024      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x72>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01f      	beq.n	8001be8 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0204 	bic.w	r2, r2, #4
 8001bc4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	2104      	movs	r1, #4
 8001bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bd4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d06a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001be6:	e065      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2202      	movs	r2, #2
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d02c      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xdc>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d027      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 020a 	bic.w	r2, r2, #10
 8001c1e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c30:	2102      	movs	r1, #2
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d035      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c50:	e030      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2208      	movs	r2, #8
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d028      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d023      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 020e 	bic.w	r2, r2, #14
 8001c7a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
    }
  }
}  
 8001cb2:	e7ff      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x13e>
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d108      	bne.n	8001cfc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cfa:	e007      	b.n	8001d0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68ba      	ldr	r2, [r7, #8]
 8001d02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	60da      	str	r2, [r3, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <DMA_CalcBaseAndBitshift+0x34>)
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <DMA_CalcBaseAndBitshift+0x38>)
 8001d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	009a      	lsls	r2, r3, #2
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	bffdfff8 	.word	0xbffdfff8
 8001d50:	cccccccd 	.word	0xcccccccd
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e14e      	b.n	8002006 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8140 	beq.w	8002000 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x40>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	6939      	ldr	r1, [r7, #16]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 809a 	beq.w	8002000 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b55      	ldr	r3, [pc, #340]	; (8002024 <HAL_GPIO_Init+0x2cc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a54      	ldr	r2, [pc, #336]	; (8002024 <HAL_GPIO_Init+0x2cc>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b52      	ldr	r3, [pc, #328]	; (8002024 <HAL_GPIO_Init+0x2cc>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee4:	4a50      	ldr	r2, [pc, #320]	; (8002028 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f0e:	d013      	beq.n	8001f38 <HAL_GPIO_Init+0x1e0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a46      	ldr	r2, [pc, #280]	; (800202c <HAL_GPIO_Init+0x2d4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00d      	beq.n	8001f34 <HAL_GPIO_Init+0x1dc>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a45      	ldr	r2, [pc, #276]	; (8002030 <HAL_GPIO_Init+0x2d8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d007      	beq.n	8001f30 <HAL_GPIO_Init+0x1d8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_GPIO_Init+0x2dc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_GPIO_Init+0x1d4>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e006      	b.n	8001f3a <HAL_GPIO_Init+0x1e2>
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	e004      	b.n	8001f3a <HAL_GPIO_Init+0x1e2>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x1e2>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_GPIO_Init+0x1e2>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	f002 0203 	and.w	r2, r2, #3
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	4093      	lsls	r3, r2
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f4a:	4937      	ldr	r1, [pc, #220]	; (8002028 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	693a      	ldr	r2, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fac:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ffa:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_GPIO_Init+0x2e0>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	f47f aea9 	bne.w	8001d68 <HAL_GPIO_Init+0x10>
  }
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	40021000 	.word	0x40021000
 8002028:	40010000 	.word	0x40010000
 800202c:	48000400 	.word	0x48000400
 8002030:	48000800 	.word	0x48000800
 8002034:	48000c00 	.word	0x48000c00
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002058:	e002      	b.n	8002060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205a:	887a      	ldrh	r2, [r7, #2]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002072:	af00      	add	r7, sp, #0
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	f000 bef4 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 816a 	beq.w	800236a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002096:	4bb3      	ldr	r3, [pc, #716]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d00c      	beq.n	80020bc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a2:	4bb0      	ldr	r3, [pc, #704]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d159      	bne.n	8002162 <HAL_RCC_OscConfig+0xf6>
 80020ae:	4bad      	ldr	r3, [pc, #692]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d152      	bne.n	8002162 <HAL_RCC_OscConfig+0xf6>
 80020bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020d0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_OscConfig+0x82>
 80020e8:	4b9e      	ldr	r3, [pc, #632]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0xae>
 80020ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002106:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800210a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002116:	4b93      	ldr	r3, [pc, #588]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800211e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002122:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002126:	fa92 f2a2 	rbit	r2, r2
 800212a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800212e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002132:	fab2 f282 	clz	r2, r2
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	f042 0220 	orr.w	r2, r2, #32
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	f002 021f 	and.w	r2, r2, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f202 	lsl.w	r2, r1, r2
 8002148:	4013      	ands	r3, r2
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 810c 	beq.w	8002368 <HAL_RCC_OscConfig+0x2fc>
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	f040 8106 	bne.w	8002368 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	f000 be86 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x110>
 800216e:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7c      	ldr	r2, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e030      	b.n	80021de <HAL_RCC_OscConfig+0x172>
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x134>
 8002186:	4b77      	ldr	r3, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a76      	ldr	r2, [pc, #472]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 800218c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b74      	ldr	r3, [pc, #464]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a73      	ldr	r2, [pc, #460]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002198:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01e      	b.n	80021de <HAL_RCC_OscConfig+0x172>
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021aa:	d10c      	bne.n	80021c6 <HAL_RCC_OscConfig+0x15a>
 80021ac:	4b6d      	ldr	r3, [pc, #436]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6c      	ldr	r2, [pc, #432]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a69      	ldr	r2, [pc, #420]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e00b      	b.n	80021de <HAL_RCC_OscConfig+0x172>
 80021c6:	4b67      	ldr	r3, [pc, #412]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a66      	ldr	r2, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	4b64      	ldr	r3, [pc, #400]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a63      	ldr	r2, [pc, #396]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021dc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021de:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f023 020f 	bic.w	r2, r3, #15
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	495d      	ldr	r1, [pc, #372]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d059      	beq.n	80022b0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fbb6 	bl	800096c <HAL_GetTick>
 8002200:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002206:	f7fe fbb1 	bl	800096c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	; 0x64
 8002214:	d902      	bls.n	800221c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	f000 be29 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
 800221c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002220:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002230:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002234:	fab3 f383 	clz	r3, r3
 8002238:	b2db      	uxtb	r3, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <HAL_RCC_OscConfig+0x1e2>
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e015      	b.n	800227a <HAL_RCC_OscConfig+0x20e>
 800224e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002252:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002262:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002266:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800226a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800227e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002282:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002286:	fa92 f2a2 	rbit	r2, r2
 800228a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800228e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002292:	fab2 f282 	clz	r2, r2
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	f002 021f 	and.w	r2, r2, #31
 80022a2:	2101      	movs	r1, #1
 80022a4:	fa01 f202 	lsl.w	r2, r1, r2
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0ab      	beq.n	8002206 <HAL_RCC_OscConfig+0x19a>
 80022ae:	e05c      	b.n	800236a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fb5c 	bl	800096c <HAL_GetTick>
 80022b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ba:	f7fe fb57 	bl	800096c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d902      	bls.n	80022d0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f000 bdcf 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
 80022d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022e4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e8:	fab3 f383 	clz	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x296>
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x2c2>
 8002302:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002306:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002316:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800231e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_RCC_OscConfig+0x2f8>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002332:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002336:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002342:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ab      	bne.n	80022ba <HAL_RCC_OscConfig+0x24e>
 8002362:	e002      	b.n	800236a <HAL_RCC_OscConfig+0x2fe>
 8002364:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 816f 	beq.w	8002658 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800237a:	4bd0      	ldr	r3, [pc, #832]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002386:	4bcd      	ldr	r3, [pc, #820]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d16c      	bne.n	800246c <HAL_RCC_OscConfig+0x400>
 8002392:	4bca      	ldr	r3, [pc, #808]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d166      	bne.n	800246c <HAL_RCC_OscConfig+0x400>
 800239e:	2302      	movs	r3, #2
 80023a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023b0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0x362>
 80023c8:	4bbc      	ldr	r3, [pc, #752]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e013      	b.n	80023f6 <HAL_RCC_OscConfig+0x38a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023e0:	2302      	movs	r3, #2
 80023e2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023f2:	4bb2      	ldr	r3, [pc, #712]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	2202      	movs	r2, #2
 80023f8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002400:	fa92 f2a2 	rbit	r2, r2
 8002404:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002408:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800240c:	fab2 f282 	clz	r2, r2
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_RCC_OscConfig+0x3cc>
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d002      	beq.n	8002438 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	f000 bd1b 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4ba0      	ldr	r3, [pc, #640]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	21f8      	movs	r1, #248	; 0xf8
 8002448:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002450:	fa91 f1a1 	rbit	r1, r1
 8002454:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002458:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800245c:	fab1 f181 	clz	r1, r1
 8002460:	b2c9      	uxtb	r1, r1
 8002462:	408b      	lsls	r3, r1
 8002464:	4995      	ldr	r1, [pc, #596]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246a:	e0f5      	b.n	8002658 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8085 	beq.w	8002582 <HAL_RCC_OscConfig+0x516>
 8002478:	2301      	movs	r3, #1
 800247a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800248a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	2301      	movs	r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fa62 	bl	800096c <HAL_GetTick>
 80024a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ae:	f7fe fa5d 	bl	800096c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d902      	bls.n	80024c4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f000 bcd5 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
 80024c4:	2302      	movs	r3, #2
 80024c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_OscConfig+0x488>
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e013      	b.n	800251c <HAL_RCC_OscConfig+0x4b0>
 80024f4:	2302      	movs	r3, #2
 80024f6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002506:	2302      	movs	r3, #2
 8002508:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800250c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002518:	4b68      	ldr	r3, [pc, #416]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251c:	2202      	movs	r2, #2
 800251e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002522:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002526:	fa92 f2a2 	rbit	r2, r2
 800252a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800252e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002532:	fab2 f282 	clz	r2, r2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	f042 0220 	orr.w	r2, r2, #32
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	f002 021f 	and.w	r2, r2, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f202 	lsl.w	r2, r1, r2
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0af      	beq.n	80024ae <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	21f8      	movs	r1, #248	; 0xf8
 800255e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002566:	fa91 f1a1 	rbit	r1, r1
 800256a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800256e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002572:	fab1 f181 	clz	r1, r1
 8002576:	b2c9      	uxtb	r1, r1
 8002578:	408b      	lsls	r3, r1
 800257a:	4950      	ldr	r1, [pc, #320]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e06a      	b.n	8002658 <HAL_RCC_OscConfig+0x5ec>
 8002582:	2301      	movs	r3, #1
 8002584:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002594:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	461a      	mov	r2, r3
 80025aa:	2300      	movs	r3, #0
 80025ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe f9dd 	bl	800096c <HAL_GetTick>
 80025b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b8:	f7fe f9d8 	bl	800096c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d902      	bls.n	80025ce <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	f000 bc50 	b.w	8002e6e <HAL_RCC_OscConfig+0xe02>
 80025ce:	2302      	movs	r3, #2
 80025d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025d8:	fa93 f3a3 	rbit	r3, r3
 80025dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_OscConfig+0x592>
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e013      	b.n	8002626 <HAL_RCC_OscConfig+0x5ba>
 80025fe:	2302      	movs	r3, #2
 8002600:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002608:	fa93 f3a3 	rbit	r3, r3
 800260c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002616:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002622:	4b26      	ldr	r3, [pc, #152]	; (80026bc <HAL_RCC_OscConfig+0x650>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	2202      	movs	r2, #2
 8002628:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800262c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002630:	fa92 f2a2 	rbit	r2, r2
 8002634:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002638:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f042 0220 	orr.w	r2, r2, #32
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f002 021f 	and.w	r2, r2, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1af      	bne.n	80025b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002658:	1d3b      	adds	r3, r7, #4
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80da 	beq.w	800281c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d069      	beq.n	8002746 <HAL_RCC_OscConfig+0x6da>
 8002672:	2301      	movs	r3, #1
 8002674:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x654>)
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	461a      	mov	r2, r3
 8002698:	2301      	movs	r3, #1
 800269a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269c:	f7fe f966 	bl	800096c <HAL_GetTick>
 80026a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a4:	e00e      	b.n	80026c4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a6:	f7fe f961 	bl	800096c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d906      	bls.n	80026c4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e3d9      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	10908120 	.word	0x10908120
 80026c4:	2302      	movs	r3, #2
 80026c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026f2:	2202      	movs	r2, #2
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	fa93 f2a3 	rbit	r2, r3
 8002700:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002704:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	4ba5      	ldr	r3, [pc, #660]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800270e:	2102      	movs	r1, #2
 8002710:	6019      	str	r1, [r3, #0]
 8002712:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f1a3 	rbit	r1, r3
 800271c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002720:	6019      	str	r1, [r3, #0]
  return result;
 8002722:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0b0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x63a>
 8002744:	e06a      	b.n	800281c <HAL_RCC_OscConfig+0x7b0>
 8002746:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fa93 f2a3 	rbit	r2, r3
 8002758:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800275c:	601a      	str	r2, [r3, #0]
  return result;
 800275e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002762:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <HAL_RCC_OscConfig+0x934>)
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2300      	movs	r3, #0
 8002776:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002778:	f7fe f8f8 	bl	800096c <HAL_GetTick>
 800277c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e009      	b.n	8002796 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe f8f3 	bl	800096c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e36b      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 8002796:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	fa93 f2a3 	rbit	r2, r3
 80027a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027b2:	2202      	movs	r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027ca:	2202      	movs	r2, #2
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027de:	4b6f      	ldr	r3, [pc, #444]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80027e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027e6:	2102      	movs	r1, #2
 80027e8:	6019      	str	r1, [r3, #0]
 80027ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f1a3 	rbit	r1, r3
 80027f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027f8:	6019      	str	r1, [r3, #0]
  return result;
 80027fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1b2      	bne.n	8002782 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8158 	beq.w	8002adc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b5a      	ldr	r3, [pc, #360]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b57      	ldr	r3, [pc, #348]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a56      	ldr	r2, [pc, #344]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCC_OscConfig+0x930>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002852:	f107 0308 	add.w	r3, r7, #8
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <HAL_RCC_OscConfig+0x938>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11a      	bne.n	80028a6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x938>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a4b      	ldr	r2, [pc, #300]	; (80029a4 <HAL_RCC_OscConfig+0x938>)
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287c:	f7fe f876 	bl	800096c <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e009      	b.n	800289a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe f871 	bl	800096c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e2e9      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289a:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCC_OscConfig+0x938>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0ef      	beq.n	8002886 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x852>
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a39      	ldr	r2, [pc, #228]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6213      	str	r3, [r2, #32]
 80028bc:	e02f      	b.n	800291e <HAL_RCC_OscConfig+0x8b2>
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCC_OscConfig+0x876>
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a33      	ldr	r2, [pc, #204]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028ce:	f023 0301 	bic.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	4b31      	ldr	r3, [pc, #196]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a30      	ldr	r2, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028da:	f023 0304 	bic.w	r3, r3, #4
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	e01d      	b.n	800291e <HAL_RCC_OscConfig+0x8b2>
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d10c      	bne.n	8002906 <HAL_RCC_OscConfig+0x89a>
 80028ec:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a2a      	ldr	r2, [pc, #168]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028f2:	f043 0304 	orr.w	r3, r3, #4
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <HAL_RCC_OscConfig+0x930>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6213      	str	r3, [r2, #32]
 8002904:	e00b      	b.n	800291e <HAL_RCC_OscConfig+0x8b2>
 8002906:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x930>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	6213      	str	r3, [r2, #32]
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4a21      	ldr	r2, [pc, #132]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d06b      	beq.n	8002a00 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe f820 	bl	800096c <HAL_GetTick>
 800292c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	e00b      	b.n	800294a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7fe f81b 	bl	800096c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e291      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 800294a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800294e:	2202      	movs	r2, #2
 8002950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002966:	2202      	movs	r2, #2
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	fa93 f2a3 	rbit	r2, r3
 8002974:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002978:	601a      	str	r2, [r3, #0]
  return result;
 800297a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800297e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f043 0302 	orr.w	r3, r3, #2
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_OscConfig+0x93c>
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <HAL_RCC_OscConfig+0x930>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	e014      	b.n	80029c4 <HAL_RCC_OscConfig+0x958>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	10908120 	.word	0x10908120
 80029a4:	40007000 	.word	0x40007000
 80029a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029ac:	2202      	movs	r2, #2
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	4bbb      	ldr	r3, [pc, #748]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029c8:	2102      	movs	r1, #2
 80029ca:	6011      	str	r1, [r2, #0]
 80029cc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	fa92 f1a2 	rbit	r1, r2
 80029d6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029da:	6011      	str	r1, [r2, #0]
  return result;
 80029dc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	fab2 f282 	clz	r2, r2
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f002 021f 	and.w	r2, r2, #31
 80029f2:	2101      	movs	r1, #1
 80029f4:	fa01 f202 	lsl.w	r2, r1, r2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d099      	beq.n	8002932 <HAL_RCC_OscConfig+0x8c6>
 80029fe:	e063      	b.n	8002ac8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fd ffb4 	bl	800096c <HAL_GetTick>
 8002a04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a0a:	f7fd ffaf 	bl	800096c <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e225      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 8002a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a26:	2202      	movs	r2, #2
 8002a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	fa93 f2a3 	rbit	r2, r3
 8002a34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a3e:	2202      	movs	r2, #2
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a50:	601a      	str	r2, [r3, #0]
  return result;
 8002a52:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_OscConfig+0xa06>
 8002a6c:	4b90      	ldr	r3, [pc, #576]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	e00d      	b.n	8002a8e <HAL_RCC_OscConfig+0xa22>
 8002a72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a76:	2202      	movs	r2, #2
 8002a78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	fa93 f2a3 	rbit	r2, r3
 8002a84:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a92:	2102      	movs	r1, #2
 8002a94:	6011      	str	r1, [r2, #0]
 8002a96:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	fa92 f1a2 	rbit	r1, r2
 8002aa0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002aa4:	6011      	str	r1, [r2, #0]
  return result;
 8002aa6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	f002 021f 	and.w	r2, r2, #31
 8002abc:	2101      	movs	r1, #1
 8002abe:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1a0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ac8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d105      	bne.n	8002adc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad0:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	4a76      	ldr	r2, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ada:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 81c2 	beq.w	8002e6c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae8:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	f000 819c 	beq.w	8002e2e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	f040 8114 	bne.w	8002d2a <HAL_RCC_OscConfig+0xcbe>
 8002b02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b1a:	601a      	str	r2, [r3, #0]
  return result;
 8002b1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fd ff18 	bl	800096c <HAL_GetTick>
 8002b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fd ff13 	bl	800096c <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e18b      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 8002b56:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	fa93 f2a3 	rbit	r2, r3
 8002b6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b6e:	601a      	str	r2, [r3, #0]
  return result;
 8002b70:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_OscConfig+0xb24>
 8002b8a:	4b49      	ldr	r3, [pc, #292]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e01b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xb5c>
 8002b90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	fa93 f2a3 	rbit	r2, r3
 8002ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fa93 f2a3 	rbit	r2, r3
 8002bbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bd0:	6011      	str	r1, [r2, #0]
 8002bd2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	fa92 f1a2 	rbit	r1, r2
 8002bdc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002be0:	6011      	str	r1, [r2, #0]
  return result;
 8002be2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f042 0220 	orr.w	r2, r2, #32
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	f002 021f 	and.w	r2, r2, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d19e      	bne.n	8002b42 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c04:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	4925      	ldr	r1, [pc, #148]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	fa93 f2a3 	rbit	r2, r3
 8002c34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c38:	601a      	str	r2, [r3, #0]
  return result;
 8002c3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c3e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	2301      	movs	r3, #1
 8002c54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fd fe89 	bl	800096c <HAL_GetTick>
 8002c5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7fd fe84 	bl	800096c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0fc      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 8002c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c8c:	601a      	str	r2, [r3, #0]
  return result;
 8002c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	fab3 f383 	clz	r3, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xc48>
 8002ca8:	4b01      	ldr	r3, [pc, #4]	; (8002cb0 <HAL_RCC_OscConfig+0xc44>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	e01e      	b.n	8002cec <HAL_RCC_OscConfig+0xc80>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	fa93 f2a3 	rbit	r2, r3
 8002ce2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b63      	ldr	r3, [pc, #396]	; (8002e78 <HAL_RCC_OscConfig+0xe0c>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cf0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002cf4:	6011      	str	r1, [r2, #0]
 8002cf6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	fa92 f1a2 	rbit	r1, r2
 8002d00:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d04:	6011      	str	r1, [r2, #0]
  return result;
 8002d06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d09b      	beq.n	8002c60 <HAL_RCC_OscConfig+0xbf4>
 8002d28:	e0a0      	b.n	8002e6c <HAL_RCC_OscConfig+0xe00>
 8002d2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	fa93 f2a3 	rbit	r2, r3
 8002d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d42:	601a      	str	r2, [r3, #0]
  return result;
 8002d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d48:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d54:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fd fe04 	bl	800096c <HAL_GetTick>
 8002d64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d68:	e009      	b.n	8002d7e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6a:	f7fd fdff 	bl	800096c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e077      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
 8002d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	fa93 f2a3 	rbit	r2, r3
 8002d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d96:	601a      	str	r2, [r3, #0]
  return result;
 8002d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9e:	fab3 f383 	clz	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_RCC_OscConfig+0xd4c>
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <HAL_RCC_OscConfig+0xe0c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	e01b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd84>
 8002db8:	f107 0320 	add.w	r3, r7, #32
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f107 0320 	add.w	r3, r7, #32
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f107 0318 	add.w	r3, r7, #24
 8002dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f107 0314 	add.w	r3, r7, #20
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_OscConfig+0xe0c>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	f107 0210 	add.w	r2, r7, #16
 8002df4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	f107 0210 	add.w	r2, r7, #16
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	fa92 f1a2 	rbit	r1, r2
 8002e04:	f107 020c 	add.w	r2, r7, #12
 8002e08:	6011      	str	r1, [r2, #0]
  return result;
 8002e0a:	f107 020c 	add.w	r2, r7, #12
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d19e      	bne.n	8002d6a <HAL_RCC_OscConfig+0xcfe>
 8002e2c:	e01e      	b.n	8002e6c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e018      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e3c:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_RCC_OscConfig+0xe0c>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e44:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e56:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d001      	beq.n	8002e6c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000

08002e7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b09e      	sub	sp, #120	; 0x78
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e162      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e94:	4b90      	ldr	r3, [pc, #576]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d910      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea2:	4b8d      	ldr	r3, [pc, #564]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f023 0207 	bic.w	r2, r3, #7
 8002eaa:	498b      	ldr	r1, [pc, #556]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b89      	ldr	r3, [pc, #548]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e14a      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d008      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed0:	4b82      	ldr	r3, [pc, #520]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	497f      	ldr	r1, [pc, #508]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80dc 	beq.w	80030a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d13c      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xf6>
 8002ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_ClockConfig+0xa6>
 8002f1c:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	e00f      	b.n	8002f42 <HAL_RCC_ClockConfig+0xc6>
 8002f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f34:	663b      	str	r3, [r7, #96]	; 0x60
 8002f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3e:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f46:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f4a:	fa92 f2a2 	rbit	r2, r2
 8002f4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f52:	fab2 f282 	clz	r2, r2
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	f042 0220 	orr.w	r2, r2, #32
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f002 021f 	and.w	r2, r2, #31
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d17b      	bne.n	8003066 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0f3      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d13c      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x178>
 8002f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x128>
 8002f9e:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	e00f      	b.n	8002fc4 <HAL_RCC_ClockConfig+0x148>
 8002fa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fa8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fc0:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fcc:	fa92 f2a2 	rbit	r2, r2
 8002fd0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd4:	fab2 f282 	clz	r2, r2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f042 0220 	orr.w	r2, r2, #32
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	f002 021f 	and.w	r2, r2, #31
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13a      	bne.n	8003066 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b2      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d102      	bne.n	800301c <HAL_RCC_ClockConfig+0x1a0>
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	e00d      	b.n	8003038 <HAL_RCC_ClockConfig+0x1bc>
 800301c:	2302      	movs	r3, #2
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	2302      	movs	r3, #2
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	4b29      	ldr	r3, [pc, #164]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2202      	movs	r2, #2
 800303a:	61ba      	str	r2, [r7, #24]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	617a      	str	r2, [r7, #20]
  return result;
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	fab2 f282 	clz	r2, r2
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f042 0220 	orr.w	r2, r2, #32
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f002 021f 	and.w	r2, r2, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e079      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	491a      	ldr	r1, [pc, #104]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003078:	f7fd fc78 	bl	800096c <HAL_GetTick>
 800307c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7fd fc74 	bl	800096c <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e061      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCC_ClockConfig+0x260>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a8:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d214      	bcs.n	80030e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f023 0207 	bic.w	r2, r3, #7
 80030be:	4906      	ldr	r1, [pc, #24]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <HAL_RCC_ClockConfig+0x25c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e040      	b.n	800315a <HAL_RCC_ClockConfig+0x2de>
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	491a      	ldr	r1, [pc, #104]	; (8003164 <HAL_RCC_ClockConfig+0x2e8>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d009      	beq.n	800311e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310a:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x2e8>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4912      	ldr	r1, [pc, #72]	; (8003164 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	4313      	orrs	r3, r2
 800311c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800311e:	f000 f829 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003122:	4601      	mov	r1, r0
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_ClockConfig+0x2e8>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800312c:	22f0      	movs	r2, #240	; 0xf0
 800312e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	60fa      	str	r2, [r7, #12]
  return result;
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	40d3      	lsrs	r3, r2
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x2ec>)
 8003144:	5cd3      	ldrb	r3, [r2, r3]
 8003146:	fa21 f303 	lsr.w	r3, r1, r3
 800314a:	4a08      	ldr	r2, [pc, #32]	; (800316c <HAL_RCC_ClockConfig+0x2f0>)
 800314c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_RCC_ClockConfig+0x2f4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fbc6 	bl	80008e4 <HAL_InitTick>
  
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3778      	adds	r7, #120	; 0x78
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40021000 	.word	0x40021000
 8003168:	080042c4 	.word	0x080042c4
 800316c:	20000004 	.word	0x20000004
 8003170:	20000008 	.word	0x20000008

08003174 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b08b      	sub	sp, #44	; 0x2c
 8003178:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	2300      	movs	r3, #0
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800318e:	4b29      	ldr	r3, [pc, #164]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b04      	cmp	r3, #4
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x30>
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x36>
 80031a2:	e03c      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031a6:	623b      	str	r3, [r7, #32]
      break;
 80031a8:	e03c      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	fa92 f2a2 	rbit	r2, r2
 80031bc:	607a      	str	r2, [r7, #4]
  return result;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	fab2 f282 	clz	r2, r2
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	40d3      	lsrs	r3, r2
 80031c8:	4a1c      	ldr	r2, [pc, #112]	; (800323c <HAL_RCC_GetSysClockFreq+0xc8>)
 80031ca:	5cd3      	ldrb	r3, [r2, r3]
 80031cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031ce:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	220f      	movs	r2, #15
 80031d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	fa92 f2a2 	rbit	r2, r2
 80031e0:	60fa      	str	r2, [r7, #12]
  return result;
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	40d3      	lsrs	r3, r2
 80031ec:	4a14      	ldr	r2, [pc, #80]	; (8003240 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031fc:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_GetSysClockFreq+0xc4>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	fbb2 f2f3 	udiv	r2, r2, r3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	e004      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	623b      	str	r3, [r7, #32]
      break;
 800321c:	e002      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003220:	623b      	str	r3, [r7, #32]
      break;
 8003222:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003224:	6a3b      	ldr	r3, [r7, #32]
}
 8003226:	4618      	mov	r0, r3
 8003228:	372c      	adds	r7, #44	; 0x2c
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40021000 	.word	0x40021000
 8003238:	007a1200 	.word	0x007a1200
 800323c:	080042d4 	.word	0x080042d4
 8003240:	080042e4 	.word	0x080042e4
 8003244:	003d0900 	.word	0x003d0900

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b092      	sub	sp, #72	; 0x48
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80cd 	beq.w	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326c:	4b8e      	ldr	r3, [pc, #568]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10e      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003278:	4b8b      	ldr	r3, [pc, #556]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4a8a      	ldr	r2, [pc, #552]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003282:	61d3      	str	r3, [r2, #28]
 8003284:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b85      	ldr	r3, [pc, #532]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d118      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a2:	4b82      	ldr	r3, [pc, #520]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a81      	ldr	r2, [pc, #516]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fb5d 	bl	800096c <HAL_GetTick>
 80032b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	e008      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b6:	f7fd fb59 	bl	800096c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b64      	cmp	r3, #100	; 0x64
 80032c2:	d901      	bls.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0ea      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c8:	4b78      	ldr	r3, [pc, #480]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032d4:	4b74      	ldr	r3, [pc, #464]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d07d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d076      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f2:	4b6d      	ldr	r3, [pc, #436]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	4b66      	ldr	r3, [pc, #408]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	461a      	mov	r2, r3
 800331c:	2301      	movs	r3, #1
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800332e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	4b5d      	ldr	r3, [pc, #372]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	461a      	mov	r2, r3
 8003340:	2300      	movs	r3, #0
 8003342:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003344:	4a58      	ldr	r2, [pc, #352]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003348:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800334a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d045      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fd fb0a 	bl	800096c <HAL_GetTick>
 8003358:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fd fb06 	bl	800096c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	; 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e095      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003372:	2302      	movs	r3, #2
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	2302      	movs	r3, #2
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	61fb      	str	r3, [r7, #28]
  return result;
 800338a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	fab3 f383 	clz	r3, r3
 8003390:	b2db      	uxtb	r3, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	b2db      	uxtb	r3, r3
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d102      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80033a0:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	e007      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2202      	movs	r2, #2
 80033b8:	613a      	str	r2, [r7, #16]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	fa92 f2a2 	rbit	r2, r2
 80033c0:	60fa      	str	r2, [r7, #12]
  return result;
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	f002 021f 	and.w	r2, r2, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0bd      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033e0:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	492e      	ldr	r1, [pc, #184]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d105      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003404:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003412:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f023 0203 	bic.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4922      	ldr	r1, [pc, #136]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003420:	4313      	orrs	r3, r2
 8003422:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f023 0210 	bic.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	491a      	ldr	r1, [pc, #104]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	4313      	orrs	r3, r2
 8003440:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	4913      	ldr	r1, [pc, #76]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800346c:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003470:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	490b      	ldr	r1, [pc, #44]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	4313      	orrs	r3, r2
 800347c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800348a:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	4904      	ldr	r1, [pc, #16]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003498:	4313      	orrs	r3, r2
 800349a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3748      	adds	r7, #72	; 0x48
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	10908100 	.word	0x10908100

080034b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e049      	b.n	800355a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd f924 	bl	8000728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4619      	mov	r1, r3
 80034f2:	4610      	mov	r0, r2
 80034f4:	f000 fa84 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_TIM_PWM_Start_IT+0x28>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf14      	ite	ne
 8003584:	2301      	movne	r3, #1
 8003586:	2300      	moveq	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	e03c      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xa2>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2b04      	cmp	r3, #4
 8003590:	d109      	bne.n	80035a6 <HAL_TIM_PWM_Start_IT+0x42>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	e02f      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xa2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d109      	bne.n	80035c0 <HAL_TIM_PWM_Start_IT+0x5c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	bf14      	ite	ne
 80035b8:	2301      	movne	r3, #1
 80035ba:	2300      	moveq	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e022      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xa2>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d109      	bne.n	80035da <HAL_TIM_PWM_Start_IT+0x76>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	bf14      	ite	ne
 80035d2:	2301      	movne	r3, #1
 80035d4:	2300      	moveq	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e015      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xa2>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d109      	bne.n	80035f4 <HAL_TIM_PWM_Start_IT+0x90>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e008      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e0d3      	b.n	80037b6 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start_IT+0xba>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	e023      	b.n	8003666 <HAL_TIM_PWM_Start_IT+0x102>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Start_IT+0xca>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	e01b      	b.n	8003666 <HAL_TIM_PWM_Start_IT+0x102>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Start_IT+0xda>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800363c:	e013      	b.n	8003666 <HAL_TIM_PWM_Start_IT+0x102>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Start_IT+0xea>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800364c:	e00b      	b.n	8003666 <HAL_TIM_PWM_Start_IT+0x102>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Start_IT+0xfa>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800365c:	e003      	b.n	8003666 <HAL_TIM_PWM_Start_IT+0x102>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d841      	bhi.n	80036f0 <HAL_TIM_PWM_Start_IT+0x18c>
 800366c:	a201      	add	r2, pc, #4	; (adr r2, 8003674 <HAL_TIM_PWM_Start_IT+0x110>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036f1 	.word	0x080036f1
 800367c:	080036f1 	.word	0x080036f1
 8003680:	080036f1 	.word	0x080036f1
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036f1 	.word	0x080036f1
 800368c:	080036f1 	.word	0x080036f1
 8003690:	080036f1 	.word	0x080036f1
 8003694:	080036cd 	.word	0x080036cd
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036df 	.word	0x080036df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0202 	orr.w	r2, r2, #2
 80036b6:	60da      	str	r2, [r3, #12]
      break;
 80036b8:	e01d      	b.n	80036f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0204 	orr.w	r2, r2, #4
 80036c8:	60da      	str	r2, [r3, #12]
      break;
 80036ca:	e014      	b.n	80036f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0208 	orr.w	r2, r2, #8
 80036da:	60da      	str	r2, [r3, #12]
      break;
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0210 	orr.w	r2, r2, #16
 80036ec:	60da      	str	r2, [r3, #12]
      break;
 80036ee:	e002      	b.n	80036f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      break;
 80036f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d15b      	bne.n	80037b4 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	6839      	ldr	r1, [r7, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fc99 	bl	800403c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <HAL_TIM_PWM_Start_IT+0x25c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIM_PWM_Start_IT+0x1ce>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <HAL_TIM_PWM_Start_IT+0x260>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIM_PWM_Start_IT+0x1ce>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a29      	ldr	r2, [pc, #164]	; (80037c8 <HAL_TIM_PWM_Start_IT+0x264>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIM_PWM_Start_IT+0x1ce>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a27      	ldr	r2, [pc, #156]	; (80037cc <HAL_TIM_PWM_Start_IT+0x268>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_TIM_PWM_Start_IT+0x1d2>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_TIM_PWM_Start_IT+0x1d4>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a1b      	ldr	r2, [pc, #108]	; (80037c0 <HAL_TIM_PWM_Start_IT+0x25c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_TIM_PWM_Start_IT+0x210>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800375e:	d009      	beq.n	8003774 <HAL_TIM_PWM_Start_IT+0x210>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1a      	ldr	r2, [pc, #104]	; (80037d0 <HAL_TIM_PWM_Start_IT+0x26c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <HAL_TIM_PWM_Start_IT+0x210>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a15      	ldr	r2, [pc, #84]	; (80037c4 <HAL_TIM_PWM_Start_IT+0x260>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d115      	bne.n	80037a0 <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_TIM_PWM_Start_IT+0x270>)
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b06      	cmp	r3, #6
 8003784:	d015      	beq.n	80037b2 <HAL_TIM_PWM_Start_IT+0x24e>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378c:	d011      	beq.n	80037b2 <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 0201 	orr.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379e:	e008      	b.n	80037b2 <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e000      	b.n	80037b4 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40000400 	.word	0x40000400
 80037d4:	00010007 	.word	0x00010007

080037d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e0ff      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b14      	cmp	r3, #20
 8003802:	f200 80f0 	bhi.w	80039e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003861 	.word	0x08003861
 8003810:	080039e7 	.word	0x080039e7
 8003814:	080039e7 	.word	0x080039e7
 8003818:	080039e7 	.word	0x080039e7
 800381c:	080038a1 	.word	0x080038a1
 8003820:	080039e7 	.word	0x080039e7
 8003824:	080039e7 	.word	0x080039e7
 8003828:	080039e7 	.word	0x080039e7
 800382c:	080038e3 	.word	0x080038e3
 8003830:	080039e7 	.word	0x080039e7
 8003834:	080039e7 	.word	0x080039e7
 8003838:	080039e7 	.word	0x080039e7
 800383c:	08003923 	.word	0x08003923
 8003840:	080039e7 	.word	0x080039e7
 8003844:	080039e7 	.word	0x080039e7
 8003848:	080039e7 	.word	0x080039e7
 800384c:	08003965 	.word	0x08003965
 8003850:	080039e7 	.word	0x080039e7
 8003854:	080039e7 	.word	0x080039e7
 8003858:	080039e7 	.word	0x080039e7
 800385c:	080039a5 	.word	0x080039a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f942 	bl	8003af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0208 	orr.w	r2, r2, #8
 800387a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6999      	ldr	r1, [r3, #24]
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	619a      	str	r2, [r3, #24]
      break;
 800389e:	e0a5      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f9a8 	bl	8003bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6999      	ldr	r1, [r3, #24]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	021a      	lsls	r2, r3, #8
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	619a      	str	r2, [r3, #24]
      break;
 80038e0:	e084      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fa07 	bl	8003cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0208 	orr.w	r2, r2, #8
 80038fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69da      	ldr	r2, [r3, #28]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0204 	bic.w	r2, r2, #4
 800390c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69d9      	ldr	r1, [r3, #28]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	61da      	str	r2, [r3, #28]
      break;
 8003920:	e064      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fa65 	bl	8003df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	69d9      	ldr	r1, [r3, #28]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	61da      	str	r2, [r3, #28]
      break;
 8003962:	e043      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68b9      	ldr	r1, [r7, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f000 faa8 	bl	8003ec0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0208 	orr.w	r2, r2, #8
 800397e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039a2:	e023      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fae6 	bl	8003f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	021a      	lsls	r2, r3, #8
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039e4:	e002      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a32      	ldr	r2, [pc, #200]	; (8003adc <TIM_Base_SetConfig+0xdc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x28>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x28>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a2f      	ldr	r2, [pc, #188]	; (8003ae0 <TIM_Base_SetConfig+0xe0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <TIM_Base_SetConfig+0xdc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <TIM_Base_SetConfig+0x6a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d00f      	beq.n	8003a6a <TIM_Base_SetConfig+0x6a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <TIM_Base_SetConfig+0xe0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00b      	beq.n	8003a6a <TIM_Base_SetConfig+0x6a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <TIM_Base_SetConfig+0xe4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d007      	beq.n	8003a6a <TIM_Base_SetConfig+0x6a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <TIM_Base_SetConfig+0xe8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <TIM_Base_SetConfig+0x6a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a21      	ldr	r2, [pc, #132]	; (8003aec <TIM_Base_SetConfig+0xec>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <TIM_Base_SetConfig+0xdc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <TIM_Base_SetConfig+0xc0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <TIM_Base_SetConfig+0xe4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d007      	beq.n	8003ac0 <TIM_Base_SetConfig+0xc0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <TIM_Base_SetConfig+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <TIM_Base_SetConfig+0xc0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <TIM_Base_SetConfig+0xec>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	615a      	str	r2, [r3, #20]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800

08003af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0201 	bic.w	r2, r3, #1
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 0303 	bic.w	r3, r3, #3
 8003b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0302 	bic.w	r3, r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	; (8003bec <TIM_OC1_SetConfig+0xfc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_OC1_SetConfig+0x78>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <TIM_OC1_SetConfig+0x100>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d007      	beq.n	8003b68 <TIM_OC1_SetConfig+0x78>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <TIM_OC1_SetConfig+0x104>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC1_SetConfig+0x78>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <TIM_OC1_SetConfig+0x108>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10c      	bne.n	8003b82 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0308 	bic.w	r3, r3, #8
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 0304 	bic.w	r3, r3, #4
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <TIM_OC1_SetConfig+0xfc>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00b      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xb2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <TIM_OC1_SetConfig+0x100>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xb2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <TIM_OC1_SetConfig+0x104>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d003      	beq.n	8003ba2 <TIM_OC1_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <TIM_OC1_SetConfig+0x108>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d111      	bne.n	8003bc6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014000 	.word	0x40014000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	40014800 	.word	0x40014800

08003bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0210 	bic.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0320 	bic.w	r3, r3, #32
 8003c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <TIM_OC2_SetConfig+0xf0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10d      	bne.n	8003c7c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <TIM_OC2_SetConfig+0xf0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <TIM_OC2_SetConfig+0xa0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <TIM_OC2_SetConfig+0xf4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d007      	beq.n	8003c9c <TIM_OC2_SetConfig+0xa0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <TIM_OC2_SetConfig+0xf8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d003      	beq.n	8003c9c <TIM_OC2_SetConfig+0xa0>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <TIM_OC2_SetConfig+0xfc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d113      	bne.n	8003cc4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ca2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003caa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	621a      	str	r2, [r3, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a23      	ldr	r2, [pc, #140]	; (8003de8 <TIM_OC3_SetConfig+0xec>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10d      	bne.n	8003d7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <TIM_OC3_SetConfig+0xec>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00b      	beq.n	8003d9a <TIM_OC3_SetConfig+0x9e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a19      	ldr	r2, [pc, #100]	; (8003dec <TIM_OC3_SetConfig+0xf0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d007      	beq.n	8003d9a <TIM_OC3_SetConfig+0x9e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <TIM_OC3_SetConfig+0xf4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d003      	beq.n	8003d9a <TIM_OC3_SetConfig+0x9e>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <TIM_OC3_SetConfig+0xf8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d113      	bne.n	8003dc2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	031b      	lsls	r3, r3, #12
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <TIM_OC4_SetConfig+0xb8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <TIM_OC4_SetConfig+0x7c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <TIM_OC4_SetConfig+0xbc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d007      	beq.n	8003e74 <TIM_OC4_SetConfig+0x7c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <TIM_OC4_SetConfig+0xc0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d003      	beq.n	8003e74 <TIM_OC4_SetConfig+0x7c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <TIM_OC4_SetConfig+0xc4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d109      	bne.n	8003e88 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003f04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a15      	ldr	r2, [pc, #84]	; (8003f6c <TIM_OC5_SetConfig+0xac>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_OC5_SetConfig+0x72>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <TIM_OC5_SetConfig+0xb0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_OC5_SetConfig+0x72>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <TIM_OC5_SetConfig+0xb4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_OC5_SetConfig+0x72>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <TIM_OC5_SetConfig+0xb8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d109      	bne.n	8003f46 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	621a      	str	r2, [r3, #32]
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <TIM_OC6_SetConfig+0xb0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <TIM_OC6_SetConfig+0x74>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC6_SetConfig+0xb4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <TIM_OC6_SetConfig+0x74>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a14      	ldr	r2, [pc, #80]	; (8004034 <TIM_OC6_SetConfig+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_OC6_SetConfig+0x74>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a13      	ldr	r2, [pc, #76]	; (8004038 <TIM_OC6_SetConfig+0xbc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d109      	bne.n	8004004 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40012c00 	.word	0x40012c00
 8004030:	40014000 	.word	0x40014000
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800

0800403c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	2201      	movs	r2, #1
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	43db      	mvns	r3, r3
 800405e:	401a      	ands	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 031f 	and.w	r3, r3, #31
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800409c:	2302      	movs	r3, #2
 800409e:	e054      	b.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a24      	ldr	r2, [pc, #144]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d108      	bne.n	80040dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00e      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d009      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a13      	ldr	r2, [pc, #76]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d004      	beq.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a11      	ldr	r2, [pc, #68]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10c      	bne.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	4313      	orrs	r3, r2
 800412e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40000400 	.word	0x40000400
 8004160:	40014000 	.word	0x40014000

08004164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800417c:	2302      	movs	r3, #2
 800417e:	e060      	b.n	8004242 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	041b      	lsls	r3, r3, #16
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a14      	ldr	r2, [pc, #80]	; (8004250 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d115      	bne.n	8004230 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	051b      	lsls	r3, r3, #20
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40012c00 	.word	0x40012c00

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4d0d      	ldr	r5, [pc, #52]	; (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2600      	movs	r6, #0
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4d0b      	ldr	r5, [pc, #44]	; (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <__libc_init_array+0x44>)
 8004268:	f000 f820 	bl	80042ac <_init>
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2600      	movs	r6, #0
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f855 3b04 	ldr.w	r3, [r5], #4
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f855 3b04 	ldr.w	r3, [r5], #4
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	080042f4 	.word	0x080042f4
 8004290:	080042f4 	.word	0x080042f4
 8004294:	080042f4 	.word	0x080042f4
 8004298:	080042f8 	.word	0x080042f8

0800429c <memset>:
 800429c:	4402      	add	r2, r0
 800429e:	4603      	mov	r3, r0
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d100      	bne.n	80042a6 <memset+0xa>
 80042a4:	4770      	bx	lr
 80042a6:	f803 1b01 	strb.w	r1, [r3], #1
 80042aa:	e7f9      	b.n	80042a0 <memset+0x4>

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
