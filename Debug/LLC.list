
LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080050c0  080050c0  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050c0  080050c0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080050c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00000150  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea3c  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209a  00000000  00000000  0002eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00030bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd0  00000000  00000000  00031878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021157  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f326  00000000  00000000  0005359f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6a23  00000000  00000000  000628c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001292e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003738  00000000  00000000  0012933c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005078 	.word	0x08005078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08005078 	.word	0x08005078

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <z1Value>:

static void INTEGRAL(double *INT) {
    //INTERGRAL INT
}

static void z1Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000ab4:	b5b0      	push	{r4, r5, r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	603b      	str	r3, [r7, #0]
    *z1p = (*z1p * axd11) + (*z2p * axd12) + (*z3p * axd13) + (*up * bxd11) + (*yp * bxd12);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <z1Value+0xc0>)
 8000aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ace:	f7ff fd37 	bl	8000540 <__aeabi_dmul>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4614      	mov	r4, r2
 8000ad8:	461d      	mov	r5, r3
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <z1Value+0xc4>)
 8000ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae6:	f7ff fd2b 	bl	8000540 <__aeabi_dmul>
 8000aea:	4602      	mov	r2, r0
 8000aec:	460b      	mov	r3, r1
 8000aee:	4620      	mov	r0, r4
 8000af0:	4629      	mov	r1, r5
 8000af2:	f7ff fb6f 	bl	80001d4 <__adddf3>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4614      	mov	r4, r2
 8000afc:	461d      	mov	r5, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <z1Value+0xc8>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	f7ff fd19 	bl	8000540 <__aeabi_dmul>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4620      	mov	r0, r4
 8000b14:	4629      	mov	r1, r5
 8000b16:	f7ff fb5d 	bl	80001d4 <__adddf3>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	4614      	mov	r4, r2
 8000b20:	461d      	mov	r5, r3
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <z1Value+0xcc>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f7ff fd07 	bl	8000540 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	4620      	mov	r0, r4
 8000b38:	4629      	mov	r1, r5
 8000b3a:	f7ff fb4b 	bl	80001d4 <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4614      	mov	r4, r2
 8000b44:	461d      	mov	r5, r3
 8000b46:	6a3b      	ldr	r3, [r7, #32]
 8000b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <z1Value+0xd0>)
 8000b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b52:	f7ff fcf5 	bl	8000540 <__aeabi_dmul>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	4629      	mov	r1, r5
 8000b5e:	f7ff fb39 	bl	80001d4 <__adddf3>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	68f9      	ldr	r1, [r7, #12]
 8000b68:	e9c1 2300 	strd	r2, r3, [r1]
    //INTEGRAL(&z1p);
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bdb0      	pop	{r4, r5, r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000010 	.word	0x20000010
 8000b80:	20000048 	.word	0x20000048
 8000b84:	20000050 	.word	0x20000050

08000b88 <z2Value>:

static void z2Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000b88:	b5b0      	push	{r4, r5, r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
    *z2p = (*z1p * axd21) + (*z2p * axd22) + (*z3p * axd23) + (*up * bxd21) + (*yp * bxd22);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <z2Value+0xc0>)
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba2:	f7ff fccd 	bl	8000540 <__aeabi_dmul>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	460b      	mov	r3, r1
 8000baa:	4614      	mov	r4, r2
 8000bac:	461d      	mov	r5, r3
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <z2Value+0xc4>)
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f7ff fcc1 	bl	8000540 <__aeabi_dmul>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f7ff fb05 	bl	80001d4 <__adddf3>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4614      	mov	r4, r2
 8000bd0:	461d      	mov	r5, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <z2Value+0xc8>)
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f7ff fcaf 	bl	8000540 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4620      	mov	r0, r4
 8000be8:	4629      	mov	r1, r5
 8000bea:	f7ff faf3 	bl	80001d4 <__adddf3>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	4614      	mov	r4, r2
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <z2Value+0xcc>)
 8000bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c02:	f7ff fc9d 	bl	8000540 <__aeabi_dmul>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	f7ff fae1 	bl	80001d4 <__adddf3>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <z2Value+0xd0>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fc8b 	bl	8000540 <__aeabi_dmul>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4620      	mov	r0, r4
 8000c30:	4629      	mov	r1, r5
 8000c32:	f7ff facf 	bl	80001d4 <__adddf3>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	68b9      	ldr	r1, [r7, #8]
 8000c3c:	e9c1 2300 	strd	r2, r3, [r1]
    //INTEGRAL(&z2p);
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bdb0      	pop	{r4, r5, r7, pc}
 8000c48:	20000018 	.word	0x20000018
 8000c4c:	20000020 	.word	0x20000020
 8000c50:	20000028 	.word	0x20000028
 8000c54:	20000058 	.word	0x20000058
 8000c58:	20000060 	.word	0x20000060

08000c5c <z3Value>:

static void z3Value(double *z1p ,double *z2p ,double *z3p ,double *up ,double *yp){
 8000c5c:	b5b0      	push	{r4, r5, r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
    *z3p = (*z1p * axd31) + (*z2p * axd32) + (*z3p * axd33) + (*up * bxd31) + (*yp * bxd32);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c70:	4b2a      	ldr	r3, [pc, #168]	; (8000d1c <z3Value+0xc0>)
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f7ff fc63 	bl	8000540 <__aeabi_dmul>
 8000c7a:	4602      	mov	r2, r0
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4614      	mov	r4, r2
 8000c80:	461d      	mov	r5, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <z3Value+0xc4>)
 8000c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8e:	f7ff fc57 	bl	8000540 <__aeabi_dmul>
 8000c92:	4602      	mov	r2, r0
 8000c94:	460b      	mov	r3, r1
 8000c96:	4620      	mov	r0, r4
 8000c98:	4629      	mov	r1, r5
 8000c9a:	f7ff fa9b 	bl	80001d4 <__adddf3>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4614      	mov	r4, r2
 8000ca4:	461d      	mov	r5, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <z3Value+0xc8>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fc45 	bl	8000540 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4620      	mov	r0, r4
 8000cbc:	4629      	mov	r1, r5
 8000cbe:	f7ff fa89 	bl	80001d4 <__adddf3>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4614      	mov	r4, r2
 8000cc8:	461d      	mov	r5, r3
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <z3Value+0xcc>)
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	f7ff fc33 	bl	8000540 <__aeabi_dmul>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4620      	mov	r0, r4
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	f7ff fa77 	bl	80001d4 <__adddf3>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	460b      	mov	r3, r1
 8000cea:	4614      	mov	r4, r2
 8000cec:	461d      	mov	r5, r3
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <z3Value+0xd0>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fc21 	bl	8000540 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4620      	mov	r0, r4
 8000d04:	4629      	mov	r1, r5
 8000d06:	f7ff fa65 	bl	80001d4 <__adddf3>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	e9c1 2300 	strd	r2, r3, [r1]
    //INTEGRAL(&z3p);
}
 8000d14:	bf00      	nop
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d1c:	20000030 	.word	0x20000030
 8000d20:	20000038 	.word	0x20000038
 8000d24:	20000040 	.word	0x20000040
 8000d28:	20000068 	.word	0x20000068
 8000d2c:	20000070 	.word	0x20000070

08000d30 <xValue>:

static void xValue(double *xp , double *rep , double *z1p){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
    *xp = (*rep - *z1p) * kp_dig ;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fa42 	bl	80001d0 <__aeabi_dsub>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <xValue+0x40>)
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	f7ff fbf1 	bl	8000540 <__aeabi_dmul>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	68f9      	ldr	r1, [r7, #12]
 8000d64:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000088 	.word	0x20000088

08000d74 <yValue>:

static void yValue(double *yp , double *z2p){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
    *yp = *z2p * kd_dig ;
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <yValue+0x2c>)
 8000d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8a:	f7ff fbd9 	bl	8000540 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000080 	.word	0x20000080

08000da4 <u0Value>:

static void u0Value(double *u0p, double *xp , double *yp){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
    *u0p = *xp - *yp ;
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dbc:	f7ff fa08 	bl	80001d0 <__aeabi_dsub>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	68f9      	ldr	r1, [r7, #12]
 8000dc6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <uValue>:

static void uValue(double *up, double *u0p, double *z3p , double *b0p){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	60f8      	str	r0, [r7, #12]
 8000dda:	60b9      	str	r1, [r7, #8]
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	603b      	str	r3, [r7, #0]
    *up = ( *u0p - *z3p ) / *b0p ;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff f9f0 	bl	80001d0 <__aeabi_dsub>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff fcc9 	bl	8000794 <__aeabi_ddiv>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	68f9      	ldr	r1, [r7, #12]
 8000e08:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <mapTimer>:

void mapTimer(uint16_t *x) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    *x =  (*x - 858) * (55940 - 32000) / (1500 - 858) + 32000;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f2a3 335a 	subw	r3, r3, #858	; 0x35a
 8000e24:	f645 5284 	movw	r2, #23940	; 0x5d84
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <mapTimer+0x3c>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1212      	asrs	r2, r2, #8
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	801a      	strh	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	6614bc37 	.word	0x6614bc37

08000e54 <CALCULATOR>:

uint16_t CALCULATOR(uint16_t* ADC_VALUE) {
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]

    *adc = *ADC_VALUE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	4a32      	ldr	r2, [pc, #200]	; (8000f2c <CALCULATOR+0xd8>)
 8000e62:	6814      	ldr	r4, [r2, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff faf1 	bl	800044c <__aeabi_ui2d>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	e9c4 2300 	strd	r2, r3, [r4]

    z1Value(&z1,&z2,&z3,&u,&y);
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <CALCULATOR+0xdc>)
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <CALCULATOR+0xe0>)
 8000e78:	4a2f      	ldr	r2, [pc, #188]	; (8000f38 <CALCULATOR+0xe4>)
 8000e7a:	4930      	ldr	r1, [pc, #192]	; (8000f3c <CALCULATOR+0xe8>)
 8000e7c:	4830      	ldr	r0, [pc, #192]	; (8000f40 <CALCULATOR+0xec>)
 8000e7e:	f7ff fe19 	bl	8000ab4 <z1Value>
    z2Value(&z1,&z2,&z3,&u,&y);
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <CALCULATOR+0xdc>)
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <CALCULATOR+0xe0>)
 8000e88:	4a2b      	ldr	r2, [pc, #172]	; (8000f38 <CALCULATOR+0xe4>)
 8000e8a:	492c      	ldr	r1, [pc, #176]	; (8000f3c <CALCULATOR+0xe8>)
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <CALCULATOR+0xec>)
 8000e8e:	f7ff fe7b 	bl	8000b88 <z2Value>
    z3Value(&z1,&z2,&z3,&u,&y);
 8000e92:	4b27      	ldr	r3, [pc, #156]	; (8000f30 <CALCULATOR+0xdc>)
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <CALCULATOR+0xe0>)
 8000e98:	4a27      	ldr	r2, [pc, #156]	; (8000f38 <CALCULATOR+0xe4>)
 8000e9a:	4928      	ldr	r1, [pc, #160]	; (8000f3c <CALCULATOR+0xe8>)
 8000e9c:	4828      	ldr	r0, [pc, #160]	; (8000f40 <CALCULATOR+0xec>)
 8000e9e:	f7ff fedd 	bl	8000c5c <z3Value>

    xValue(&x,&ref,&z1);
 8000ea2:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <CALCULATOR+0xec>)
 8000ea4:	4927      	ldr	r1, [pc, #156]	; (8000f44 <CALCULATOR+0xf0>)
 8000ea6:	4828      	ldr	r0, [pc, #160]	; (8000f48 <CALCULATOR+0xf4>)
 8000ea8:	f7ff ff42 	bl	8000d30 <xValue>
    yValue(&y,&z2);
 8000eac:	4923      	ldr	r1, [pc, #140]	; (8000f3c <CALCULATOR+0xe8>)
 8000eae:	4820      	ldr	r0, [pc, #128]	; (8000f30 <CALCULATOR+0xdc>)
 8000eb0:	f7ff ff60 	bl	8000d74 <yValue>
    u0Value(&u0,&x,&y);
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <CALCULATOR+0xdc>)
 8000eb6:	4924      	ldr	r1, [pc, #144]	; (8000f48 <CALCULATOR+0xf4>)
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <CALCULATOR+0xf8>)
 8000eba:	f7ff ff73 	bl	8000da4 <u0Value>

    uValue(&u,&u0,&z3,&b0);
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <CALCULATOR+0xfc>)
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <CALCULATOR+0xe4>)
 8000ec2:	4922      	ldr	r1, [pc, #136]	; (8000f4c <CALCULATOR+0xf8>)
 8000ec4:	481b      	ldr	r0, [pc, #108]	; (8000f34 <CALCULATOR+0xe0>)
 8000ec6:	f7ff ff84 	bl	8000dd2 <uValue>

    if (u < MIN_FREQ_VALUE)
 8000eca:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <CALCULATOR+0x100>)
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff facb 	bl	800046c <__aeabi_i2d>
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <CALCULATOR+0xe0>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fdc0 	bl	8000a60 <__aeabi_dcmpgt>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <CALCULATOR+0x9a>
        return MIN_FREQ_VALUE;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <CALCULATOR+0x100>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	e01a      	b.n	8000f24 <CALCULATOR+0xd0>
    else if (u > MAX_FREQ_VALUE)
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <CALCULATOR+0x104>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fab9 	bl	800046c <__aeabi_i2d>
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <CALCULATOR+0xe0>)
 8000efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f00:	f7ff fd90 	bl	8000a24 <__aeabi_dcmplt>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <CALCULATOR+0xbe>
        return MAX_FREQ_VALUE;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <CALCULATOR+0x104>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	e008      	b.n	8000f24 <CALCULATOR+0xd0>
    return u;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <CALCULATOR+0xe0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	4610      	mov	r0, r2
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f7ff fdaa 	bl	8000a74 <__aeabi_d2uiz>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b29b      	uxth	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	200000e0 	.word	0x200000e0
 8000f34:	200000e8 	.word	0x200000e8
 8000f38:	200000d8 	.word	0x200000d8
 8000f3c:	200000d0 	.word	0x200000d0
 8000f40:	200000c8 	.word	0x200000c8
 8000f44:	20000100 	.word	0x20000100
 8000f48:	200000f8 	.word	0x200000f8
 8000f4c:	200000f0 	.word	0x200000f0
 8000f50:	20000078 	.word	0x20000078
 8000f54:	20000092 	.word	0x20000092
 8000f58:	20000090 	.word	0x20000090

08000f5c <TIM_SET_PERIOD>:
#include "formula.h"

uint32_t adc_value[2];
uint16_t period_value = 0 ;

uint16_t TIM_SET_PERIOD(uint16_t *PERIOD_VALUE){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	htim1.Init.Period = *PERIOD_VALUE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <TIM_SET_PERIOD+0x24>)
 8000f6c:	60da      	str	r2, [r3, #12]
	return *PERIOD_VALUE;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	881b      	ldrh	r3, [r3, #0]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200001a8 	.word	0x200001a8

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f88:	f000 fb7c 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8c:	f000 f828 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f90:	f000 f9a6 	bl	80012e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f94:	f000 f986 	bl	80012a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f98:	f000 f884 	bl	80010a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f9c:	f000 f8f2 	bl	8001184 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_value,1);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	490b      	ldr	r1, [pc, #44]	; (8000fd0 <main+0x4c>)
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <main+0x50>)
 8000fa6:	f000 fd83 	bl	8001ab0 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000faa:	2100      	movs	r1, #0
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <main+0x54>)
 8000fae:	f003 f9bf 	bl	8004330 <HAL_TIM_PWM_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    period_value = CALCULATOR(&adc_value);
 8000fb2:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <main+0x4c>)
 8000fb4:	f7ff ff4e 	bl	8000e54 <CALCULATOR>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <main+0x58>)
 8000fbe:	801a      	strh	r2, [r3, #0]
    mapTimer(&period_value);
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <main+0x58>)
 8000fc2:	f7ff ff27 	bl	8000e14 <mapTimer>
	TIM_SET_PERIOD(&period_value);
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <main+0x58>)
 8000fc8:	f7ff ffc8 	bl	8000f5c <TIM_SET_PERIOD>
    period_value = CALCULATOR(&adc_value);
 8000fcc:	e7f1      	b.n	8000fb2 <main+0x2e>
 8000fce:	bf00      	nop
 8000fd0:	2000010c 	.word	0x2000010c
 8000fd4:	20000114 	.word	0x20000114
 8000fd8:	200001a8 	.word	0x200001a8
 8000fdc:	20000108 	.word	0x20000108

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b096      	sub	sp, #88	; 0x58
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 f83a 	bl	8005068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]
 8001014:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001032:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fefb 	bl	8002e38 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001048:	f000 f9c2 	bl	80013d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104c:	230f      	movs	r3, #15
 800104e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001050:	2302      	movs	r3, #2
 8001052:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001054:	2300      	movs	r3, #0
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2101      	movs	r1, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f002 fded 	bl	8003c48 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001074:	f000 f9ac 	bl	80013d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 8001078:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800107c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800107e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001082:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4618      	mov	r0, r3
 800108c:	f002 ffc2 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001096:	f000 f99b 	bl	80013d0 <Error_Handler>
  }
}
 800109a:	bf00      	nop
 800109c:	3758      	adds	r7, #88	; 0x58
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010e0:	4b27      	ldr	r3, [pc, #156]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_ADC1_Init+0xdc>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001102:	2201      	movs	r2, #1
 8001104:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001110:	2204      	movs	r2, #4
 8001112:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001114:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800111a:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_ADC1_Init+0xdc>)
 800111c:	2200      	movs	r2, #0
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001120:	4817      	ldr	r0, [pc, #92]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001122:	f000 fb33 	bl	800178c <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 f950 	bl	80013d0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4811      	ldr	r0, [pc, #68]	; (8001180 <MX_ADC1_Init+0xdc>)
 800113c:	f001 f854 	bl	80021e8 <HAL_ADCEx_MultiModeConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001146:	f000 f943 	bl	80013d0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800114a:	2301      	movs	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114e:	2301      	movs	r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_ADC1_Init+0xdc>)
 8001168:	f000 fd7c 	bl	8001c64 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001172:	f000 f92d 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000114 	.word	0x20000114

08001184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b096      	sub	sp, #88	; 0x58
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001196:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	222c      	movs	r2, #44	; 0x2c
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 ff59 	bl	8005068 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <MX_TIM1_Init+0x118>)
 80011b8:	4a39      	ldr	r2, [pc, #228]	; (80012a0 <MX_TIM1_Init+0x11c>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011bc:	4b37      	ldr	r3, [pc, #220]	; (800129c <MX_TIM1_Init+0x118>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <MX_TIM1_Init+0x118>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47799;
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <MX_TIM1_Init+0x118>)
 80011ca:	f64b 22b7 	movw	r2, #47799	; 0xbab7
 80011ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <MX_TIM1_Init+0x118>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <MX_TIM1_Init+0x118>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <MX_TIM1_Init+0x118>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <MX_TIM1_Init+0x118>)
 80011e4:	f003 f84c 	bl	8004280 <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80011ee:	f000 f8ef 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001202:	4619      	mov	r1, r3
 8001204:	4825      	ldr	r0, [pc, #148]	; (800129c <MX_TIM1_Init+0x118>)
 8001206:	f003 fe25 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001210:	f000 f8de 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001214:	2360      	movs	r3, #96	; 0x60
 8001216:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8001218:	2332      	movs	r3, #50	; 0x32
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121c:	2300      	movs	r3, #0
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_TIM1_Init+0x118>)
 800123a:	f003 f9b3 	bl	80045a4 <HAL_TIM_PWM_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001244:	f000 f8c4 	bl	80013d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800125c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001260:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800126a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	; (800129c <MX_TIM1_Init+0x118>)
 800127e:	f003 fe57 	bl	8004f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001288:	f000 f8a2 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800128c:	4803      	ldr	r0, [pc, #12]	; (800129c <MX_TIM1_Init+0x118>)
 800128e:	f000 f951 	bl	8001534 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3758      	adds	r7, #88	; 0x58
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001a8 	.word	0x200001a8
 80012a0:	40012c00 	.word	0x40012c00

080012a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_DMA_Init+0x38>)
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <MX_DMA_Init+0x38>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6153      	str	r3, [r2, #20]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_DMA_Init+0x38>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	200b      	movs	r0, #11
 80012c8:	f001 fa5f 	bl	800278a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012cc:	200b      	movs	r0, #11
 80012ce:	f001 fa78 	bl	80027c2 <HAL_NVIC_EnableIRQ>

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	4b34      	ldr	r3, [pc, #208]	; (80013c8 <MX_GPIO_Init+0xe8>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <MX_GPIO_Init+0xe8>)
 80012fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001300:	6153      	str	r3, [r2, #20]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a2d      	ldr	r2, [pc, #180]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	6153      	str	r3, [r2, #20]
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <MX_GPIO_Init+0xe8>)
 8001344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <MX_GPIO_Init+0xe8>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2120      	movs	r1, #32
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f001 fd53 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800136c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <MX_GPIO_Init+0xec>)
 800137a:	f001 fbd3 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137e:	230c      	movs	r3, #12
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138e:	2307      	movs	r3, #7
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f001 fbc2 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a0:	2320      	movs	r3, #32
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 fbb3 	bl	8002b24 <HAL_GPIO_Init>

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000800 	.word	0x48000800

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_MspInit+0x44>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <HAL_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <HAL_MspInit+0x44>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x44>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x44>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	61d3      	str	r3, [r2, #28]
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x44>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f001 f9ae 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d14c      	bne.n	80014e0 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a27      	ldr	r2, [pc, #156]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6153      	str	r3, [r2, #20]
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	6153      	str	r3, [r2, #20]
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <HAL_ADC_MspInit+0xc4>)
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001476:	2301      	movs	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147a:	2303      	movs	r3, #3
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148c:	f001 fb4a 	bl	8002b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_ADC_MspInit+0xcc>)
 8001494:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014a4:	2280      	movs	r2, #128	; 0x80
 80014a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a8:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014c6:	f001 f996 	bl	80027f6 <HAL_DMA_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80014d0:	f7ff ff7e 	bl	80013d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_ADC_MspInit+0xc8>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	20000164 	.word	0x20000164
 80014f0:	40020008 	.word	0x40020008

080014f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_TIM_PWM_MspInit+0x38>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d10b      	bne.n	800151e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_TIM_PWM_MspInit+0x3c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a09      	ldr	r2, [pc, #36]	; (8001530 <HAL_TIM_PWM_MspInit+0x3c>)
 800150c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_TIM_PWM_MspInit+0x3c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40021000 	.word	0x40021000

08001534 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_TIM_MspPostInit+0x64>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11b      	bne.n	800158e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 800155c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001560:	6153      	str	r3, [r2, #20]
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_TIM_MspPostInit+0x68>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800156e:	2301      	movs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800157e:	2302      	movs	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_TIM_MspPostInit+0x6c>)
 800158a:	f001 facb 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40012c00 	.word	0x40012c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 f88e 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <DMA1_Channel1_IRQHandler+0x10>)
 80015fe:	f001 f9a0 	bl	8002942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000164 	.word	0x20000164

0800160c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0b      	ldr	r4, [pc, #44]	; (800167c <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800165a:	f7ff ffd7 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f003 fcdf 	bl	8005020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001662:	f7ff fc8f 	bl	8000f84 <main>

08001666 <LoopForever>:

LoopForever:
    b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001668:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001674:	080050c8 	.word	0x080050c8
  ldr r2, =_sbss
 8001678:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800167c:	200001f8 	.word	0x200001f8

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>
	...

08001684 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x28>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x28>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f001 f86d 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fe9c 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 f885 	bl	80027de <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f001 f84d 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000098 	.word	0x20000098
 8001708:	200000a0 	.word	0x200000a0
 800170c:	2000009c 	.word	0x2000009c

08001710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200000a0 	.word	0x200000a0
 8001734:	200001f4 	.word	0x200001f4

08001738 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;  
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200001f4 	.word	0x200001f4

08001750 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b09a      	sub	sp, #104	; 0x68
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e172      	b.n	8001a92 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0310 	and.w	r3, r3, #16
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d176      	bne.n	80018ac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d152      	bne.n	800186c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fe1f 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d13b      	bne.n	800186c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fe87 	bl	8002508 <ADC_Disable>
 80017fa:	4603      	mov	r3, r0
 80017fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d12f      	bne.n	800186c <HAL_ADC_Init+0xe0>
 800180c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001810:	2b00      	cmp	r3, #0
 8001812:	d12b      	bne.n	800186c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800181c:	f023 0302 	bic.w	r3, r3, #2
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001836:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001846:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001848:	4b94      	ldr	r3, [pc, #592]	; (8001a9c <HAL_ADC_Init+0x310>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a94      	ldr	r2, [pc, #592]	; (8001aa0 <HAL_ADC_Init+0x314>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0c9a      	lsrs	r2, r3, #18
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800185e:	e002      	b.n	8001866 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	3b01      	subs	r3, #1
 8001864:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f9      	bne.n	8001860 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d007      	beq.n	800188a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001888:	d110      	bne.n	80018ac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f023 0312 	bic.w	r3, r3, #18
 8001892:	f043 0210 	orr.w	r2, r3, #16
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 0310 	and.w	r3, r3, #16
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 80df 	bne.w	8001a78 <HAL_ADC_Init+0x2ec>
 80018ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80da 	bne.w	8001a78 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80d2 	bne.w	8001a78 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018dc:	f043 0202 	orr.w	r2, r3, #2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e4:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_ADC_Init+0x318>)
 80018e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f0:	d102      	bne.n	80018f8 <HAL_ADC_Init+0x16c>
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_ADC_Init+0x31c>)
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	e002      	b.n	80018fe <HAL_ADC_Init+0x172>
 80018f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b01      	cmp	r3, #1
 800190a:	d108      	bne.n	800191e <HAL_ADC_Init+0x192>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d101      	bne.n	800191e <HAL_ADC_Init+0x192>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_ADC_Init+0x194>
 800191e:	2300      	movs	r3, #0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11c      	bne.n	800195e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001924:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_ADC_Init+0x1ba>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_ADC_Init+0x1ba>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_ADC_Init+0x1bc>
 8001946:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001948:	2b00      	cmp	r3, #0
 800194a:	d108      	bne.n	800195e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800194c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	431a      	orrs	r2, r3
 800195a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800195c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7e5b      	ldrb	r3, [r3, #25]
 8001962:	035b      	lsls	r3, r3, #13
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001968:	2a01      	cmp	r2, #1
 800196a:	d002      	beq.n	8001972 <HAL_ADC_Init+0x1e6>
 800196c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001970:	e000      	b.n	8001974 <HAL_ADC_Init+0x1e8>
 8001972:	2200      	movs	r2, #0
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4313      	orrs	r3, r2
 8001982:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001984:	4313      	orrs	r3, r2
 8001986:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11b      	bne.n	80019ca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7e5b      	ldrb	r3, [r3, #25]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	3b01      	subs	r3, #1
 80019a0:	045a      	lsls	r2, r3, #17
 80019a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019a4:	4313      	orrs	r3, r2
 80019a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
 80019ac:	e00d      	b.n	80019ca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80019b6:	f043 0220 	orr.w	r2, r3, #32
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f043 0201 	orr.w	r2, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d007      	beq.n	80019e2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	4313      	orrs	r3, r2
 80019dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019de:	4313      	orrs	r3, r2
 80019e0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d114      	bne.n	8001a1a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019fe:	f023 0302 	bic.w	r3, r3, #2
 8001a02:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
 8001a08:	039a      	lsls	r2, r3, #14
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4313      	orrs	r3, r2
 8001a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a16:	4313      	orrs	r3, r2
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <HAL_ADC_Init+0x320>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10c      	bne.n	8001a50 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f023 010f 	bic.w	r1, r3, #15
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a4e:	e007      	b.n	8001a60 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 020f 	bic.w	r2, r2, #15
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
 8001a76:	e00a      	b.n	8001a8e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	f023 0312 	bic.w	r3, r3, #18
 8001a80:	f043 0210 	orr.w	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3768      	adds	r7, #104	; 0x68
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000098 	.word	0x20000098
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	50000300 	.word	0x50000300
 8001aa8:	50000100 	.word	0x50000100
 8001aac:	fff0c007 	.word	0xfff0c007

08001ab0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abc:	2300      	movs	r3, #0
 8001abe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 80b9 	bne.w	8001c42 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Start_DMA+0x2e>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e0b4      	b.n	8001c48 <HAL_ADC_Start_DMA+0x198>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001ae6:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_ADC_Start_DMA+0x1a0>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f040 80a0 	bne.w	8001c34 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fca3 	bl	8002440 <ADC_Enable>
 8001afa:	4603      	mov	r3, r0
 8001afc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 8092 	bne.w	8001c2a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	; (8001c50 <HAL_ADC_Start_DMA+0x1a0>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_Start_DMA+0x80>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2e:	d115      	bne.n	8001b5c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d027      	beq.n	8001b9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b5a:	e01e      	b.n	8001b9a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_Start_DMA+0xcc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <HAL_ADC_Start_DMA+0x1a4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d10e      	bne.n	8001b9a <HAL_ADC_Start_DMA+0xea>
 8001b7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d007      	beq.n	8001b9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f023 0206 	bic.w	r2, r3, #6
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	4a23      	ldr	r2, [pc, #140]	; (8001c58 <HAL_ADC_Start_DMA+0x1a8>)
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	4a22      	ldr	r2, [pc, #136]	; (8001c5c <HAL_ADC_Start_DMA+0x1ac>)
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	4a21      	ldr	r2, [pc, #132]	; (8001c60 <HAL_ADC_Start_DMA+0x1b0>)
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	221c      	movs	r2, #28
 8001be2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0210 	orr.w	r2, r2, #16
 8001bf2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3340      	adds	r3, #64	; 0x40
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f000 fe36 	bl	8002884 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0204 	orr.w	r2, r2, #4
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	e00d      	b.n	8001c46 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c32:	e008      	b.n	8001c46 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c40:	e001      	b.n	8001c46 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	50000300 	.word	0x50000300
 8001c54:	50000100 	.word	0x50000100
 8001c58:	08002375 	.word	0x08002375
 8001c5c:	080023ef 	.word	0x080023ef
 8001c60:	0800240b 	.word	0x0800240b

08001c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b09b      	sub	sp, #108	; 0x6c
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x22>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e2a5      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x56e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 8289 	bne.w	80021b0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d81c      	bhi.n	8001ce0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	461a      	mov	r2, r3
 8001cba:	231f      	movs	r3, #31
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	4019      	ands	r1, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cde:	e063      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b09      	cmp	r3, #9
 8001ce6:	d81e      	bhi.n	8001d26 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	3b1e      	subs	r3, #30
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	4019      	ands	r1, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3b1e      	subs	r3, #30
 8001d18:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34
 8001d24:	e040      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b0e      	cmp	r3, #14
 8001d2c:	d81e      	bhi.n	8001d6c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	3b3c      	subs	r3, #60	; 0x3c
 8001d42:	221f      	movs	r2, #31
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4019      	ands	r1, r3
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	3b3c      	subs	r3, #60	; 0x3c
 8001d5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
 8001d6a:	e01d      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	3b5a      	subs	r3, #90	; 0x5a
 8001d80:	221f      	movs	r2, #31
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	4019      	ands	r1, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	3b5a      	subs	r3, #90	; 0x5a
 8001d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 80e5 	bne.w	8001f82 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d91c      	bls.n	8001dfa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6999      	ldr	r1, [r3, #24]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4019      	ands	r1, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6898      	ldr	r0, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	3b1e      	subs	r3, #30
 8001dec:	fa00 f203 	lsl.w	r2, r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	619a      	str	r2, [r3, #24]
 8001df8:	e019      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6959      	ldr	r1, [r3, #20]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	4019      	ands	r1, r3
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6898      	ldr	r0, [r3, #8]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d84f      	bhi.n	8001ef0 <HAL_ADC_ConfigChannel+0x28c>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e8b 	.word	0x08001e8b
 8001e60:	08001ead 	.word	0x08001ead
 8001e64:	08001ecf 	.word	0x08001ecf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e6e:	4b9e      	ldr	r3, [pc, #632]	; (80020e8 <HAL_ADC_ConfigChannel+0x484>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	0691      	lsls	r1, r2, #26
 8001e78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e86:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e88:	e07e      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e90:	4b95      	ldr	r3, [pc, #596]	; (80020e8 <HAL_ADC_ConfigChannel+0x484>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6812      	ldr	r2, [r2, #0]
 8001e98:	0691      	lsls	r1, r2, #26
 8001e9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ea8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eaa:	e06d      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001eb2:	4b8d      	ldr	r3, [pc, #564]	; (80020e8 <HAL_ADC_ConfigChannel+0x484>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	0691      	lsls	r1, r2, #26
 8001ebc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ecc:	e05c      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ed4:	4b84      	ldr	r3, [pc, #528]	; (80020e8 <HAL_ADC_ConfigChannel+0x484>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	0691      	lsls	r1, r2, #26
 8001ede:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eee:	e04b      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	069b      	lsls	r3, r3, #26
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f12:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	069b      	lsls	r3, r3, #26
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d107      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f36:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	069b      	lsls	r3, r3, #26
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f5a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d10a      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f80:	e001      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f82:	bf00      	nop
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f86:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x344>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x344>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_ADC_ConfigChannel+0x346>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f040 810b 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d00f      	beq.n	8001fd8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	400a      	ands	r2, r1
 8001fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fd6:	e049      	b.n	800206c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	d91c      	bls.n	8002034 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6999      	ldr	r1, [r3, #24]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	3b1b      	subs	r3, #27
 800200c:	2207      	movs	r2, #7
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	4019      	ands	r1, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6898      	ldr	r0, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	3b1b      	subs	r3, #27
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	619a      	str	r2, [r3, #24]
 8002032:	e01b      	b.n	800206c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6959      	ldr	r1, [r3, #20]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	4019      	ands	r1, r3
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6898      	ldr	r0, [r3, #8]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	fa00 f203 	lsl.w	r2, r0, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_ADC_ConfigChannel+0x488>)
 800206e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b10      	cmp	r3, #16
 8002076:	d105      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002088:	2b11      	cmp	r3, #17
 800208a:	d105      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800208c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00b      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800209c:	2b12      	cmp	r3, #18
 800209e:	f040 8092 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 808b 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b8:	d102      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x45c>
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_ADC_ConfigChannel+0x48c>)
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x462>
 80020c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020c4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10f      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x490>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x490>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x492>
 80020e6:	bf00      	nop
 80020e8:	83fff000 	.word	0x83fff000
 80020ec:	50000300 	.word	0x50000300
 80020f0:	50000100 	.word	0x50000100
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d150      	bne.n	800219c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_ADC_ConfigChannel+0x4b8>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_ADC_ConfigChannel+0x4b8>
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_ADC_ConfigChannel+0x4ba>
 800211c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800211e:	2b00      	cmp	r3, #0
 8002120:	d13c      	bne.n	800219c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b10      	cmp	r3, #16
 8002128:	d11d      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x502>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002132:	d118      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800213c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800213e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_ADC_ConfigChannel+0x57c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_ADC_ConfigChannel+0x580>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	0c9a      	lsrs	r2, r3, #18
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002156:	e002      	b.n	800215e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f9      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002164:	e02e      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b11      	cmp	r3, #17
 800216c:	d10b      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x522>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002176:	d106      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002182:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002184:	e01e      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b12      	cmp	r3, #18
 800218c:	d11a      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800218e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002198:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800219a:	e013      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f043 0220 	orr.w	r2, r3, #32
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021ae:	e00a      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021c2:	e000      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021c4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	376c      	adds	r7, #108	; 0x6c
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000098 	.word	0x20000098
 80021e4:	431bde83 	.word	0x431bde83

080021e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b099      	sub	sp, #100	; 0x64
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002200:	d102      	bne.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	e002      	b.n	800220e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002208:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800220c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0a2      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002222:	2302      	movs	r3, #2
 8002224:	e09b      	b.n	800235e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d17f      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d179      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800224a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d040      	beq.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002266:	035b      	lsls	r3, r3, #13
 8002268:	430b      	orrs	r3, r1
 800226a:	431a      	orrs	r2, r3
 800226c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800226e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d15c      	bne.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80022b2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d14b      	bne.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022c0:	f023 030f 	bic.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6811      	ldr	r1, [r2, #0]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	6892      	ldr	r2, [r2, #8]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022d4:	e03c      	b.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002302:	2300      	movs	r3, #0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d123      	bne.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002324:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002326:	2b00      	cmp	r3, #0
 8002328:	d112      	bne.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800232a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002332:	f023 030f 	bic.w	r3, r3, #15
 8002336:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002338:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800233a:	e009      	b.n	8002350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800234e:	e000      	b.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002350:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800235a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800235e:	4618      	mov	r0, r3
 8002360:	3764      	adds	r7, #100	; 0x64
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	50000100 	.word	0x50000100
 8002370:	50000300 	.word	0x50000300

08002374 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800238a:	2b00      	cmp	r3, #0
 800238c:	d126      	bne.n	80023dc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d115      	bne.n	80023d4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff f9bb 	bl	8001750 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023da:	e004      	b.n	80023e6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	4798      	blx	r3
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7ff f9b1 	bl	8001764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002428:	f043 0204 	orr.w	r2, r3, #4
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff f9a1 	bl	8001778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d108      	bne.n	800246c <ADC_Enable+0x2c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <ADC_Enable+0x2c>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <ADC_Enable+0x2e>
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d143      	bne.n	80024fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <ADC_Enable+0xc4>)
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00d      	beq.n	800249c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	f043 0210 	orr.w	r2, r3, #16
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e02f      	b.n	80024fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024ac:	f7ff f944 	bl	8001738 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024b2:	e01b      	b.n	80024ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024b4:	f7ff f940 	bl	8001738 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d914      	bls.n	80024ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d00d      	beq.n	80024ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0210 	orr.w	r2, r3, #16
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e007      	b.n	80024fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d1dc      	bne.n	80024b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	8000003f 	.word	0x8000003f

08002508 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d108      	bne.n	8002534 <ADC_Disable+0x2c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <ADC_Disable+0x2c>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <ADC_Disable+0x2e>
 8002534:	2300      	movs	r3, #0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d047      	beq.n	80025ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030d 	and.w	r3, r3, #13
 8002544:	2b01      	cmp	r3, #1
 8002546:	d10f      	bne.n	8002568 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0202 	orr.w	r2, r2, #2
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2203      	movs	r2, #3
 800255e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002560:	f7ff f8ea 	bl	8001738 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002566:	e029      	b.n	80025bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256c:	f043 0210 	orr.w	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f043 0201 	orr.w	r2, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e023      	b.n	80025cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002584:	f7ff f8d8 	bl	8001738 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d914      	bls.n	80025bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f043 0210 	orr.w	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0201 	orr.w	r2, r3, #1
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e007      	b.n	80025cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d0dc      	beq.n	8002584 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <__NVIC_EnableIRQ+0x38>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6039      	str	r1, [r7, #0]
 800267e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db0a      	blt.n	800269e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	490c      	ldr	r1, [pc, #48]	; (80026c0 <__NVIC_SetPriority+0x4c>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	0112      	lsls	r2, r2, #4
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	440b      	add	r3, r1
 8002698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800269c:	e00a      	b.n	80026b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4908      	ldr	r1, [pc, #32]	; (80026c4 <__NVIC_SetPriority+0x50>)
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3b04      	subs	r3, #4
 80026ac:	0112      	lsls	r2, r2, #4
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	440b      	add	r3, r1
 80026b2:	761a      	strb	r2, [r3, #24]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000e100 	.word	0xe000e100
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	bf28      	it	cs
 80026e6:	2304      	movcs	r3, #4
 80026e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2b06      	cmp	r3, #6
 80026f0:	d902      	bls.n	80026f8 <NVIC_EncodePriority+0x30>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b03      	subs	r3, #3
 80026f6:	e000      	b.n	80026fa <NVIC_EncodePriority+0x32>
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43da      	mvns	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002710:	f04f 31ff 	mov.w	r1, #4294967295
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	43d9      	mvns	r1, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002720:	4313      	orrs	r3, r2
         );
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295
 8002754:	f7ff ff8e 	bl	8002674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff29 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff3e 	bl	800261c <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff8e 	bl	80026c8 <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5d 	bl	8002674 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff31 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e037      	b.n	800287c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002822:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f940 	bl	8002ae4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}  
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_DMA_Start_IT+0x20>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e04a      	b.n	800293a <HAL_DMA_Start_IT+0xb6>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d13a      	bne.n	800292c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0201 	bic.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f8d4 	bl	8002a88 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 020e 	orr.w	r2, r2, #14
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	e00f      	b.n	800291a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 020a 	orr.w	r2, r2, #10
 8002908:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0204 	bic.w	r2, r2, #4
 8002918:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e005      	b.n	8002938 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002934:	2302      	movs	r3, #2
 8002936:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002938:	7dfb      	ldrb	r3, [r7, #23]
} 
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2204      	movs	r2, #4
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d024      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x72>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01f      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0204 	bic.w	r2, r2, #4
 8002990:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299a:	2104      	movs	r1, #4
 800299c:	fa01 f202 	lsl.w	r2, r1, r2
 80029a0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d06a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	e065      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	2202      	movs	r2, #2
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xdc>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d027      	beq.n	8002a1e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10b      	bne.n	80029f4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 020a 	bic.w	r2, r2, #10
 80029ea:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	2102      	movs	r1, #2
 80029fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002a02:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d035      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a1c:	e030      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2208      	movs	r2, #8
 8002a24:	409a      	lsls	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d028      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d023      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 020e 	bic.w	r2, r2, #14
 8002a46:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
    }
  }
}  
 8002a7e:	e7ff      	b.n	8002a80 <HAL_DMA_IRQHandler+0x13e>
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d108      	bne.n	8002ac8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ac6:	e007      	b.n	8002ad8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	60da      	str	r2, [r3, #12]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <DMA_CalcBaseAndBitshift+0x34>)
 8002af4:	4413      	add	r3, r2
 8002af6:	4a09      	ldr	r2, [pc, #36]	; (8002b1c <DMA_CalcBaseAndBitshift+0x38>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	009a      	lsls	r2, r3, #2
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <DMA_CalcBaseAndBitshift+0x3c>)
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	bffdfff8 	.word	0xbffdfff8
 8002b1c:	cccccccd 	.word	0xcccccccd
 8002b20:	40020000 	.word	0x40020000

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b32:	e14e      	b.n	8002dd2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8140 	beq.w	8002dcc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d005      	beq.n	8002b64 <HAL_GPIO_Init+0x40>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d130      	bne.n	8002bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2203      	movs	r2, #3
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0201 	and.w	r2, r3, #1
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d017      	beq.n	8002c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d123      	bne.n	8002c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	6939      	ldr	r1, [r7, #16]
 8002c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2203      	movs	r2, #3
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0203 	and.w	r2, r3, #3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 809a 	beq.w	8002dcc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c98:	4b55      	ldr	r3, [pc, #340]	; (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	4a54      	ldr	r2, [pc, #336]	; (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6193      	str	r3, [r2, #24]
 8002ca4:	4b52      	ldr	r3, [pc, #328]	; (8002df0 <HAL_GPIO_Init+0x2cc>)
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cb0:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cda:	d013      	beq.n	8002d04 <HAL_GPIO_Init+0x1e0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a46      	ldr	r2, [pc, #280]	; (8002df8 <HAL_GPIO_Init+0x2d4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_GPIO_Init+0x1dc>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a45      	ldr	r2, [pc, #276]	; (8002dfc <HAL_GPIO_Init+0x2d8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <HAL_GPIO_Init+0x1d8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a44      	ldr	r2, [pc, #272]	; (8002e00 <HAL_GPIO_Init+0x2dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_GPIO_Init+0x1d4>
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e006      	b.n	8002d06 <HAL_GPIO_Init+0x1e2>
 8002cf8:	2305      	movs	r3, #5
 8002cfa:	e004      	b.n	8002d06 <HAL_GPIO_Init+0x1e2>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e002      	b.n	8002d06 <HAL_GPIO_Init+0x1e2>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <HAL_GPIO_Init+0x1e2>
 8002d04:	2300      	movs	r3, #0
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	f002 0203 	and.w	r2, r2, #3
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	4093      	lsls	r3, r2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d16:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_GPIO_Init+0x2d0>)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d24:	4b37      	ldr	r3, [pc, #220]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d48:	4a2e      	ldr	r2, [pc, #184]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d4e:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d78:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dc6:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_GPIO_Init+0x2e0>)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f aea9 	bne.w	8002b34 <HAL_GPIO_Init+0x10>
  }
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40010000 	.word	0x40010000
 8002df8:	48000400 	.word	0x48000400
 8002dfc:	48000800 	.word	0x48000800
 8002e00:	48000c00 	.word	0x48000c00
 8002e04:	40010400 	.word	0x40010400

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f000 bef4 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 816a 	beq.w	8003136 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e62:	4bb3      	ldr	r3, [pc, #716]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e6e:	4bb0      	ldr	r3, [pc, #704]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d159      	bne.n	8002f2e <HAL_RCC_OscConfig+0xf6>
 8002e7a:	4bad      	ldr	r3, [pc, #692]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e86:	d152      	bne.n	8002f2e <HAL_RCC_OscConfig+0xf6>
 8002e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0x82>
 8002eb4:	4b9e      	ldr	r3, [pc, #632]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0xae>
 8002eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebe:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ed6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ee2:	4b93      	ldr	r3, [pc, #588]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eea:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002eee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ef2:	fa92 f2a2 	rbit	r2, r2
 8002ef6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002efa:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002efe:	fab2 f282 	clz	r2, r2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f042 0220 	orr.w	r2, r2, #32
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f002 021f 	and.w	r2, r2, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 810c 	beq.w	8003134 <HAL_RCC_OscConfig+0x2fc>
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 8106 	bne.w	8003134 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f000 be86 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x110>
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e030      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x134>
 8002f52:	4b77      	ldr	r3, [pc, #476]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a76      	ldr	r2, [pc, #472]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b74      	ldr	r3, [pc, #464]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01e      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCC_OscConfig+0x15a>
 8002f78:	4b6d      	ldr	r3, [pc, #436]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a6c      	ldr	r2, [pc, #432]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a69      	ldr	r2, [pc, #420]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e00b      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f92:	4b67      	ldr	r3, [pc, #412]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a66      	ldr	r2, [pc, #408]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002faa:	4b61      	ldr	r3, [pc, #388]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f023 020f 	bic.w	r2, r3, #15
 8002fb2:	1d3b      	adds	r3, r7, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	495d      	ldr	r1, [pc, #372]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d059      	beq.n	800307c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fbb6 	bl	8001738 <HAL_GetTick>
 8002fcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fbb1 	bl	8001738 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d902      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	f000 be29 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
 8002fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002ffc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003000:	fab3 f383 	clz	r3, r3
 8003004:	b2db      	uxtb	r3, r3
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HAL_RCC_OscConfig+0x1e2>
 8003014:	4b46      	ldr	r3, [pc, #280]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	e015      	b.n	8003046 <HAL_RCC_OscConfig+0x20e>
 800301a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800301e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800302e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003032:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003036:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800304a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800304e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800305a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	f042 0220 	orr.w	r2, r2, #32
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	f002 021f 	and.w	r2, r2, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f202 	lsl.w	r2, r1, r2
 8003074:	4013      	ands	r3, r2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ab      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x19a>
 800307a:	e05c      	b.n	8003136 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe fb5c 	bl	8001738 <HAL_GetTick>
 8003080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003086:	f7fe fb57 	bl	8001738 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d902      	bls.n	800309c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	f000 bdcf 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
 800309c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80030b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <HAL_RCC_OscConfig+0x296>
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	e015      	b.n	80030fa <HAL_RCC_OscConfig+0x2c2>
 80030ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030f6:	4b0e      	ldr	r3, [pc, #56]	; (8003130 <HAL_RCC_OscConfig+0x2f8>)
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030fe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003102:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003106:	fa92 f2a2 	rbit	r2, r2
 800310a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800310e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f042 0220 	orr.w	r2, r2, #32
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	f002 021f 	and.w	r2, r2, #31
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ab      	bne.n	8003086 <HAL_RCC_OscConfig+0x24e>
 800312e:	e002      	b.n	8003136 <HAL_RCC_OscConfig+0x2fe>
 8003130:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 816f 	beq.w	8003424 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003146:	4bd0      	ldr	r3, [pc, #832]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00b      	beq.n	800316a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003152:	4bcd      	ldr	r3, [pc, #820]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b08      	cmp	r3, #8
 800315c:	d16c      	bne.n	8003238 <HAL_RCC_OscConfig+0x400>
 800315e:	4bca      	ldr	r3, [pc, #808]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d166      	bne.n	8003238 <HAL_RCC_OscConfig+0x400>
 800316a:	2302      	movs	r3, #2
 800316c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003174:	fa93 f3a3 	rbit	r3, r3
 8003178:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800317c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_RCC_OscConfig+0x362>
 8003194:	4bbc      	ldr	r3, [pc, #752]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	e013      	b.n	80031c2 <HAL_RCC_OscConfig+0x38a>
 800319a:	2302      	movs	r3, #2
 800319c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80031ac:	2302      	movs	r3, #2
 80031ae:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80031b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80031be:	4bb2      	ldr	r3, [pc, #712]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2202      	movs	r2, #2
 80031c4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80031c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031cc:	fa92 f2a2 	rbit	r2, r2
 80031d0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80031d4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	f002 021f 	and.w	r2, r2, #31
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f202 	lsl.w	r2, r1, r2
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_RCC_OscConfig+0x3cc>
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f000 bd1b 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4ba0      	ldr	r3, [pc, #640]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	21f8      	movs	r1, #248	; 0xf8
 8003214:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800321c:	fa91 f1a1 	rbit	r1, r1
 8003220:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003224:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003228:	fab1 f181 	clz	r1, r1
 800322c:	b2c9      	uxtb	r1, r1
 800322e:	408b      	lsls	r3, r1
 8003230:	4995      	ldr	r1, [pc, #596]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	e0f5      	b.n	8003424 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 8085 	beq.w	800334e <HAL_RCC_OscConfig+0x516>
 8003244:	2301      	movs	r3, #1
 8003246:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003256:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003264:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	461a      	mov	r2, r3
 800326c:	2301      	movs	r3, #1
 800326e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fa62 	bl	8001738 <HAL_GetTick>
 8003274:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fa5d 	bl	8001738 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d902      	bls.n	8003290 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	f000 bcd5 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003290:	2302      	movs	r3, #2
 8003292:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800329a:	fa93 f3a3 	rbit	r3, r3
 800329e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80032a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <HAL_RCC_OscConfig+0x488>
 80032ba:	4b73      	ldr	r3, [pc, #460]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e013      	b.n	80032e8 <HAL_RCC_OscConfig+0x4b0>
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032d8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80032dc:	fa93 f3a3 	rbit	r3, r3
 80032e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80032e4:	4b68      	ldr	r3, [pc, #416]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2202      	movs	r2, #2
 80032ea:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80032ee:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032f2:	fa92 f2a2 	rbit	r2, r2
 80032f6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032fe:	fab2 f282 	clz	r2, r2
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	f042 0220 	orr.w	r2, r2, #32
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	f002 021f 	and.w	r2, r2, #31
 800330e:	2101      	movs	r1, #1
 8003310:	fa01 f202 	lsl.w	r2, r1, r2
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0af      	beq.n	800327a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	21f8      	movs	r1, #248	; 0xf8
 800332a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003332:	fa91 f1a1 	rbit	r1, r1
 8003336:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800333a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800333e:	fab1 f181 	clz	r1, r1
 8003342:	b2c9      	uxtb	r1, r1
 8003344:	408b      	lsls	r3, r1
 8003346:	4950      	ldr	r1, [pc, #320]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e06a      	b.n	8003424 <HAL_RCC_OscConfig+0x5ec>
 800334e:	2301      	movs	r3, #1
 8003350:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003360:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800336e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	461a      	mov	r2, r3
 8003376:	2300      	movs	r3, #0
 8003378:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337a:	f7fe f9dd 	bl	8001738 <HAL_GetTick>
 800337e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe f9d8 	bl	8001738 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d902      	bls.n	800339a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f000 bc50 	b.w	8003c3a <HAL_RCC_OscConfig+0xe02>
 800339a:	2302      	movs	r3, #2
 800339c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80033ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0x592>
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	e013      	b.n	80033f2 <HAL_RCC_OscConfig+0x5ba>
 80033ca:	2302      	movs	r3, #2
 80033cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033dc:	2302      	movs	r3, #2
 80033de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033ee:	4b26      	ldr	r3, [pc, #152]	; (8003488 <HAL_RCC_OscConfig+0x650>)
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2202      	movs	r2, #2
 80033f4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033fc:	fa92 f2a2 	rbit	r2, r2
 8003400:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003404:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0220 	orr.w	r2, r2, #32
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1af      	bne.n	8003384 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80da 	beq.w	80035e8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d069      	beq.n	8003512 <HAL_RCC_OscConfig+0x6da>
 800343e:	2301      	movs	r3, #1
 8003440:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x654>)
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	461a      	mov	r2, r3
 8003464:	2301      	movs	r3, #1
 8003466:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003468:	f7fe f966 	bl	8001738 <HAL_GetTick>
 800346c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003470:	e00e      	b.n	8003490 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe f961 	bl	8001738 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d906      	bls.n	8003490 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e3d9      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003486:	bf00      	nop
 8003488:	40021000 	.word	0x40021000
 800348c:	10908120 	.word	0x10908120
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80034a6:	2202      	movs	r2, #2
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80034be:	2202      	movs	r2, #2
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	fa93 f2a3 	rbit	r2, r3
 80034cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	4ba5      	ldr	r3, [pc, #660]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80034d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034da:	2102      	movs	r1, #2
 80034dc:	6019      	str	r1, [r3, #0]
 80034de:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fa93 f1a3 	rbit	r1, r3
 80034e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034ec:	6019      	str	r1, [r3, #0]
  return result;
 80034ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	fab3 f383 	clz	r3, r3
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2101      	movs	r1, #1
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0b0      	beq.n	8003472 <HAL_RCC_OscConfig+0x63a>
 8003510:	e06a      	b.n	80035e8 <HAL_RCC_OscConfig+0x7b0>
 8003512:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003528:	601a      	str	r2, [r3, #0]
  return result;
 800352a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800352e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	4b8c      	ldr	r3, [pc, #560]	; (800376c <HAL_RCC_OscConfig+0x934>)
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	461a      	mov	r2, r3
 8003540:	2300      	movs	r3, #0
 8003542:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003544:	f7fe f8f8 	bl	8001738 <HAL_GetTick>
 8003548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354c:	e009      	b.n	8003562 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe f8f3 	bl	8001738 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e36b      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003562:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003566:	2202      	movs	r2, #2
 8003568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fa93 f2a3 	rbit	r2, r3
 8003574:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800357e:	2202      	movs	r2, #2
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003596:	2202      	movs	r2, #2
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80035ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035b2:	2102      	movs	r1, #2
 80035b4:	6019      	str	r1, [r3, #0]
 80035b6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	fa93 f1a3 	rbit	r1, r3
 80035c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035c4:	6019      	str	r1, [r3, #0]
  return result;
 80035c6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	fab3 f383 	clz	r3, r3
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2101      	movs	r1, #1
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1b2      	bne.n	800354e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8158 	beq.w	80038a8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fe:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d112      	bne.n	8003630 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b57      	ldr	r3, [pc, #348]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4a56      	ldr	r2, [pc, #344]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	61d3      	str	r3, [r2, #28]
 8003616:	4b54      	ldr	r3, [pc, #336]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800361e:	f107 0308 	add.w	r3, r7, #8
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCC_OscConfig+0x938>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11a      	bne.n	8003672 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x938>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <HAL_RCC_OscConfig+0x938>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003648:	f7fe f876 	bl	8001738 <HAL_GetTick>
 800364c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	e009      	b.n	8003666 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003652:	f7fe f871 	bl	8001738 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e2e9      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCC_OscConfig+0x938>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0ef      	beq.n	8003652 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x852>
 800367c:	4b3a      	ldr	r3, [pc, #232]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a39      	ldr	r2, [pc, #228]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	e02f      	b.n	80036ea <HAL_RCC_OscConfig+0x8b2>
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x876>
 8003694:	4b34      	ldr	r3, [pc, #208]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a33      	ldr	r2, [pc, #204]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	4b31      	ldr	r3, [pc, #196]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a30      	ldr	r2, [pc, #192]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036a6:	f023 0304 	bic.w	r3, r3, #4
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e01d      	b.n	80036ea <HAL_RCC_OscConfig+0x8b2>
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x89a>
 80036b8:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	6213      	str	r3, [r2, #32]
 80036c4:	4b28      	ldr	r3, [pc, #160]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a27      	ldr	r2, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6213      	str	r3, [r2, #32]
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x8b2>
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a24      	ldr	r2, [pc, #144]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	4b22      	ldr	r3, [pc, #136]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a21      	ldr	r2, [pc, #132]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ea:	1d3b      	adds	r3, r7, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d06b      	beq.n	80037cc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f4:	f7fe f820 	bl	8001738 <HAL_GetTick>
 80036f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fc:	e00b      	b.n	8003716 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe f81b 	bl	8001738 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e291      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003716:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800371a:	2202      	movs	r2, #2
 800371c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	fa93 f2a3 	rbit	r2, r3
 8003728:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003732:	2202      	movs	r2, #2
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	fa93 f2a3 	rbit	r2, r3
 8003740:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003744:	601a      	str	r2, [r3, #0]
  return result;
 8003746:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800374a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d109      	bne.n	8003774 <HAL_RCC_OscConfig+0x93c>
 8003760:	4b01      	ldr	r3, [pc, #4]	; (8003768 <HAL_RCC_OscConfig+0x930>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x958>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	10908120 	.word	0x10908120
 8003770:	40007000 	.word	0x40007000
 8003774:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003778:	2202      	movs	r2, #2
 800377a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	fa93 f2a3 	rbit	r2, r3
 8003786:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	4bbb      	ldr	r3, [pc, #748]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003794:	2102      	movs	r1, #2
 8003796:	6011      	str	r1, [r2, #0]
 8003798:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	fa92 f1a2 	rbit	r1, r2
 80037a2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80037a6:	6011      	str	r1, [r2, #0]
  return result;
 80037a8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80037ac:	6812      	ldr	r2, [r2, #0]
 80037ae:	fab2 f282 	clz	r2, r2
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b8:	b2d2      	uxtb	r2, r2
 80037ba:	f002 021f 	and.w	r2, r2, #31
 80037be:	2101      	movs	r1, #1
 80037c0:	fa01 f202 	lsl.w	r2, r1, r2
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d099      	beq.n	80036fe <HAL_RCC_OscConfig+0x8c6>
 80037ca:	e063      	b.n	8003894 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037cc:	f7fd ffb4 	bl	8001738 <HAL_GetTick>
 80037d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7fd ffaf 	bl	8001738 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e225      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 80037ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037f2:	2202      	movs	r2, #2
 80037f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	fa93 f2a3 	rbit	r2, r3
 8003800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800380a:	2202      	movs	r2, #2
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800381c:	601a      	str	r2, [r3, #0]
  return result;
 800381e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003822:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003824:	fab3 f383 	clz	r3, r3
 8003828:	b2db      	uxtb	r3, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0xa06>
 8003838:	4b90      	ldr	r3, [pc, #576]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	e00d      	b.n	800385a <HAL_RCC_OscConfig+0xa22>
 800383e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003842:	2202      	movs	r2, #2
 8003844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	fa93 f2a3 	rbit	r2, r3
 8003850:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800385e:	2102      	movs	r1, #2
 8003860:	6011      	str	r1, [r2, #0]
 8003862:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	fa92 f1a2 	rbit	r1, r2
 800386c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003870:	6011      	str	r1, [r2, #0]
  return result;
 8003872:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f002 021f 	and.w	r2, r2, #31
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f202 	lsl.w	r2, r1, r2
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1a0      	bne.n	80037d6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003894:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003898:	2b01      	cmp	r3, #1
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389c:	4b77      	ldr	r3, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4a76      	ldr	r2, [pc, #472]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80038a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 81c2 	beq.w	8003c38 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b4:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	f000 819c 	beq.w	8003bfa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c2:	1d3b      	adds	r3, r7, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	f040 8114 	bne.w	8003af6 <HAL_RCC_OscConfig+0xcbe>
 80038ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	fa93 f2a3 	rbit	r2, r3
 80038e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038ec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	461a      	mov	r2, r3
 8003900:	2300      	movs	r3, #0
 8003902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd ff18 	bl	8001738 <HAL_GetTick>
 8003908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800390c:	e009      	b.n	8003922 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd ff13 	bl	8001738 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e18b      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003922:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003940:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0xb24>
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	e01b      	b.n	8003994 <HAL_RCC_OscConfig+0xb5c>
 800395c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fa93 f2a3 	rbit	r2, r3
 8003970:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800397a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	fa93 f2a3 	rbit	r2, r3
 800398a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003998:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	fa92 f1a2 	rbit	r1, r2
 80039a8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80039ac:	6011      	str	r1, [r2, #0]
  return result;
 80039ae:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	fab2 f282 	clz	r2, r2
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f002 021f 	and.w	r2, r2, #31
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d19e      	bne.n	800390e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	4925      	ldr	r1, [pc, #148]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a04:	601a      	str	r2, [r3, #0]
  return result;
 8003a06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a0a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2301      	movs	r3, #1
 8003a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fe89 	bl	8001738 <HAL_GetTick>
 8003a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2a:	e009      	b.n	8003a40 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fe84 	bl	8001738 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0fc      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003a40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a58:	601a      	str	r2, [r3, #0]
  return result;
 8003a5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_RCC_OscConfig+0xc48>
 8003a74:	4b01      	ldr	r3, [pc, #4]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e01e      	b.n	8003ab8 <HAL_RCC_OscConfig+0xc80>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_OscConfig+0xe0c>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	fa92 f1a2 	rbit	r1, r2
 8003acc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ad0:	6011      	str	r1, [r2, #0]
  return result;
 8003ad2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d09b      	beq.n	8003a2c <HAL_RCC_OscConfig+0xbf4>
 8003af4:	e0a0      	b.n	8003c38 <HAL_RCC_OscConfig+0xe00>
 8003af6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b0e:	601a      	str	r2, [r3, #0]
  return result;
 8003b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fe04 	bl	8001738 <HAL_GetTick>
 8003b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b34:	e009      	b.n	8003b4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fdff 	bl	8001738 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e077      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
 8003b4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b62:	601a      	str	r2, [r3, #0]
  return result;
 8003b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_OscConfig+0xd4c>
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_OscConfig+0xe0c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	e01b      	b.n	8003bbc <HAL_RCC_OscConfig+0xd84>
 8003b84:	f107 0320 	add.w	r3, r7, #32
 8003b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f107 0320 	add.w	r3, r7, #32
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f107 0318 	add.w	r3, r7, #24
 8003ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f107 0318 	add.w	r3, r7, #24
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f107 0314 	add.w	r3, r7, #20
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <HAL_RCC_OscConfig+0xe0c>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f107 0210 	add.w	r2, r7, #16
 8003bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	f107 0210 	add.w	r2, r7, #16
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	fa92 f1a2 	rbit	r1, r2
 8003bd0:	f107 020c 	add.w	r2, r7, #12
 8003bd4:	6011      	str	r1, [r2, #0]
  return result;
 8003bd6:	f107 020c 	add.w	r2, r7, #12
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	fab2 f282 	clz	r2, r2
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f002 021f 	and.w	r2, r2, #31
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d19e      	bne.n	8003b36 <HAL_RCC_OscConfig+0xcfe>
 8003bf8:	e01e      	b.n	8003c38 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e018      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c08:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCC_OscConfig+0xe0c>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c18:	1d3b      	adds	r3, r7, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d108      	bne.n	8003c34 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c2a:	1d3b      	adds	r3, r7, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b09e      	sub	sp, #120	; 0x78
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e162      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c60:	4b90      	ldr	r3, [pc, #576]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d910      	bls.n	8003c90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 0207 	bic.w	r2, r3, #7
 8003c76:	498b      	ldr	r1, [pc, #556]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b89      	ldr	r3, [pc, #548]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e14a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b82      	ldr	r3, [pc, #520]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	497f      	ldr	r1, [pc, #508]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80dc 	beq.w	8003e74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13c      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xf6>
 8003cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_ClockConfig+0xa6>
 8003ce8:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	e00f      	b.n	8003d0e <HAL_RCC_ClockConfig+0xc6>
 8003cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	667b      	str	r3, [r7, #100]	; 0x64
 8003cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d00:	663b      	str	r3, [r7, #96]	; 0x60
 8003d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d0a:	4b67      	ldr	r3, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d12:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d16:	fa92 f2a2 	rbit	r2, r2
 8003d1a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d1e:	fab2 f282 	clz	r2, r2
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	f042 0220 	orr.w	r2, r2, #32
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f002 021f 	and.w	r2, r2, #31
 8003d2e:	2101      	movs	r1, #1
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d17b      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0f3      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d13c      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0x178>
 8003d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_ClockConfig+0x128>
 8003d6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e00f      	b.n	8003d90 <HAL_RCC_ClockConfig+0x148>
 8003d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	fa93 f3a3 	rbit	r3, r3
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8c:	4b46      	ldr	r3, [pc, #280]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d94:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d98:	fa92 f2a2 	rbit	r2, r2
 8003d9c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da0:	fab2 f282 	clz	r2, r2
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	f042 0220 	orr.w	r2, r2, #32
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	f002 021f 	and.w	r2, r2, #31
 8003db0:	2101      	movs	r1, #1
 8003db2:	fa01 f202 	lsl.w	r2, r1, r2
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d13a      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b2      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	fab3 f383 	clz	r3, r3
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d102      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x1a0>
 8003de2:	4b31      	ldr	r3, [pc, #196]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	e00d      	b.n	8003e04 <HAL_RCC_ClockConfig+0x1bc>
 8003de8:	2302      	movs	r3, #2
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	fa93 f3a3 	rbit	r3, r3
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
 8003df4:	2302      	movs	r3, #2
 8003df6:	623b      	str	r3, [r7, #32]
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	fa93 f3a3 	rbit	r3, r3
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2202      	movs	r2, #2
 8003e06:	61ba      	str	r2, [r7, #24]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	fa92 f2a2 	rbit	r2, r2
 8003e0e:	617a      	str	r2, [r7, #20]
  return result;
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	fab2 f282 	clz	r2, r2
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	f042 0220 	orr.w	r2, r2, #32
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	f002 021f 	and.w	r2, r2, #31
 8003e22:	2101      	movs	r1, #1
 8003e24:	fa01 f202 	lsl.w	r2, r1, r2
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e079      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	491a      	ldr	r1, [pc, #104]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e44:	f7fd fc78 	bl	8001738 <HAL_GetTick>
 8003e48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd fc74 	bl	8001738 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e061      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <HAL_RCC_ClockConfig+0x260>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d214      	bcs.n	8003eac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 0207 	bic.w	r2, r3, #7
 8003e8a:	4906      	ldr	r1, [pc, #24]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b04      	ldr	r3, [pc, #16]	; (8003ea4 <HAL_RCC_ClockConfig+0x25c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e040      	b.n	8003f26 <HAL_RCC_ClockConfig+0x2de>
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCC_ClockConfig+0x2e8>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	491a      	ldr	r1, [pc, #104]	; (8003f30 <HAL_RCC_ClockConfig+0x2e8>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ed6:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <HAL_RCC_ClockConfig+0x2e8>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4912      	ldr	r1, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x2e8>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eea:	f000 f829 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003eee:	4601      	mov	r1, r0
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_RCC_ClockConfig+0x2e8>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef8:	22f0      	movs	r2, #240	; 0xf0
 8003efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	fa92 f2a2 	rbit	r2, r2
 8003f02:	60fa      	str	r2, [r7, #12]
  return result;
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	fab2 f282 	clz	r2, r2
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	40d3      	lsrs	r3, r2
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <HAL_RCC_ClockConfig+0x2ec>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	fa21 f303 	lsr.w	r3, r1, r3
 8003f16:	4a08      	ldr	r2, [pc, #32]	; (8003f38 <HAL_RCC_ClockConfig+0x2f0>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCC_ClockConfig+0x2f4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fbc6 	bl	80016b0 <HAL_InitTick>
  
  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3778      	adds	r7, #120	; 0x78
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08005090 	.word	0x08005090
 8003f38:	20000098 	.word	0x20000098
 8003f3c:	2000009c 	.word	0x2000009c

08003f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b08b      	sub	sp, #44	; 0x2c
 8003f44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x30>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x36>
 8003f6e:	e03c      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f70:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f72:	623b      	str	r3, [r7, #32]
      break;
 8003f74:	e03c      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	fa92 f2a2 	rbit	r2, r2
 8003f88:	607a      	str	r2, [r7, #4]
  return result;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	40d3      	lsrs	r3, r2
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f96:	5cd3      	ldrb	r3, [r2, r3]
 8003f98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f9a:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	220f      	movs	r2, #15
 8003fa4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	fa92 f2a2 	rbit	r2, r2
 8003fac:	60fa      	str	r2, [r7, #12]
  return result;
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	fab2 f282 	clz	r2, r2
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	40d3      	lsrs	r3, r2
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fc8:	4a0e      	ldr	r2, [pc, #56]	; (8004004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fb02 f303 	mul.w	r3, r2, r3
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd8:	e004      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4a0c      	ldr	r2, [pc, #48]	; (8004010 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	623b      	str	r3, [r7, #32]
      break;
 8003fe8:	e002      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fec:	623b      	str	r3, [r7, #32]
      break;
 8003fee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	372c      	adds	r7, #44	; 0x2c
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	007a1200 	.word	0x007a1200
 8004008:	080050a0 	.word	0x080050a0
 800400c:	080050b0 	.word	0x080050b0
 8004010:	003d0900 	.word	0x003d0900

08004014 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b092      	sub	sp, #72	; 0x48
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004024:	2300      	movs	r3, #0
 8004026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80cd 	beq.w	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004038:	4b8e      	ldr	r3, [pc, #568]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10e      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004044:	4b8b      	ldr	r3, [pc, #556]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	4a8a      	ldr	r2, [pc, #552]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404e:	61d3      	str	r3, [r2, #28]
 8004050:	4b88      	ldr	r3, [pc, #544]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d118      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a81      	ldr	r2, [pc, #516]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407a:	f7fd fb5d 	bl	8001738 <HAL_GetTick>
 800407e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	e008      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fd fb59 	bl	8001738 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	; 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e0ea      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	4b78      	ldr	r3, [pc, #480]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040a0:	4b74      	ldr	r3, [pc, #464]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d07d      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d076      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040be:	4b6d      	ldr	r3, [pc, #436]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d0:	fa93 f3a3 	rbit	r3, r3
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	4b66      	ldr	r3, [pc, #408]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	461a      	mov	r2, r3
 80040e8:	2301      	movs	r3, #1
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040fc:	fab3 f383 	clz	r3, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	2300      	movs	r3, #0
 800410e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004114:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d045      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004120:	f7fd fb0a 	bl	8001738 <HAL_GetTick>
 8004124:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fd fb06 	bl	8001738 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e095      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800413e:	2302      	movs	r3, #2
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
 800414a:	2302      	movs	r3, #2
 800414c:	623b      	str	r3, [r7, #32]
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	fa93 f3a3 	rbit	r3, r3
 8004154:	61fb      	str	r3, [r7, #28]
  return result;
 8004156:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f043 0302 	orr.w	r3, r3, #2
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d102      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800416c:	4b41      	ldr	r3, [pc, #260]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	e007      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004172:	2302      	movs	r3, #2
 8004174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	4b3d      	ldr	r3, [pc, #244]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2202      	movs	r2, #2
 8004184:	613a      	str	r2, [r7, #16]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	fa92 f2a2 	rbit	r2, r2
 800418c:	60fa      	str	r2, [r7, #12]
  return result;
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	fab2 f282 	clz	r2, r2
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	f002 021f 	and.w	r2, r2, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0bd      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	492e      	ldr	r1, [pc, #184]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041de:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f023 0203 	bic.w	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	4922      	ldr	r1, [pc, #136]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f023 0210 	bic.w	r2, r3, #16
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	491a      	ldr	r1, [pc, #104]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800420a:	4313      	orrs	r3, r2
 800420c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800421a:	4b16      	ldr	r3, [pc, #88]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	4913      	ldr	r1, [pc, #76]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	490b      	ldr	r1, [pc, #44]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004246:	4313      	orrs	r3, r2
 8004248:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004264:	4313      	orrs	r3, r2
 8004266:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3748      	adds	r7, #72	; 0x48
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	40007000 	.word	0x40007000
 800427c:	10908100 	.word	0x10908100

08004280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e049      	b.n	8004326 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd f924 	bl	80014f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fa84 	bl	80047cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_TIM_PWM_Start_IT+0x28>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b01      	cmp	r3, #1
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e03c      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0xa2>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d109      	bne.n	8004372 <HAL_TIM_PWM_Start_IT+0x42>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b01      	cmp	r3, #1
 8004368:	bf14      	ite	ne
 800436a:	2301      	movne	r3, #1
 800436c:	2300      	moveq	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e02f      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0xa2>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d109      	bne.n	800438c <HAL_TIM_PWM_Start_IT+0x5c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	bf14      	ite	ne
 8004384:	2301      	movne	r3, #1
 8004386:	2300      	moveq	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	e022      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0xa2>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d109      	bne.n	80043a6 <HAL_TIM_PWM_Start_IT+0x76>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e015      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0xa2>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d109      	bne.n	80043c0 <HAL_TIM_PWM_Start_IT+0x90>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	bf14      	ite	ne
 80043b8:	2301      	movne	r3, #1
 80043ba:	2300      	moveq	r3, #0
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	e008      	b.n	80043d2 <HAL_TIM_PWM_Start_IT+0xa2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	bf14      	ite	ne
 80043cc:	2301      	movne	r3, #1
 80043ce:	2300      	moveq	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e0d3      	b.n	8004582 <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start_IT+0xba>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e8:	e023      	b.n	8004432 <HAL_TIM_PWM_Start_IT+0x102>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_PWM_Start_IT+0xca>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f8:	e01b      	b.n	8004432 <HAL_TIM_PWM_Start_IT+0x102>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start_IT+0xda>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	e013      	b.n	8004432 <HAL_TIM_PWM_Start_IT+0x102>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start_IT+0xea>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004418:	e00b      	b.n	8004432 <HAL_TIM_PWM_Start_IT+0x102>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d104      	bne.n	800442a <HAL_TIM_PWM_Start_IT+0xfa>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004428:	e003      	b.n	8004432 <HAL_TIM_PWM_Start_IT+0x102>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d841      	bhi.n	80044bc <HAL_TIM_PWM_Start_IT+0x18c>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <HAL_TIM_PWM_Start_IT+0x110>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	08004475 	.word	0x08004475
 8004444:	080044bd 	.word	0x080044bd
 8004448:	080044bd 	.word	0x080044bd
 800444c:	080044bd 	.word	0x080044bd
 8004450:	08004487 	.word	0x08004487
 8004454:	080044bd 	.word	0x080044bd
 8004458:	080044bd 	.word	0x080044bd
 800445c:	080044bd 	.word	0x080044bd
 8004460:	08004499 	.word	0x08004499
 8004464:	080044bd 	.word	0x080044bd
 8004468:	080044bd 	.word	0x080044bd
 800446c:	080044bd 	.word	0x080044bd
 8004470:	080044ab 	.word	0x080044ab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f042 0202 	orr.w	r2, r2, #2
 8004482:	60da      	str	r2, [r3, #12]
      break;
 8004484:	e01d      	b.n	80044c2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f042 0204 	orr.w	r2, r2, #4
 8004494:	60da      	str	r2, [r3, #12]
      break;
 8004496:	e014      	b.n	80044c2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	60da      	str	r2, [r3, #12]
      break;
 80044a8:	e00b      	b.n	80044c2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0210 	orr.w	r2, r2, #16
 80044b8:	60da      	str	r2, [r3, #12]
      break;
 80044ba:	e002      	b.n	80044c2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d15b      	bne.n	8004580 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	6839      	ldr	r1, [r7, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fc99 	bl	8004e08 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <HAL_TIM_PWM_Start_IT+0x25c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00e      	beq.n	80044fe <HAL_TIM_PWM_Start_IT+0x1ce>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <HAL_TIM_PWM_Start_IT+0x260>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_TIM_PWM_Start_IT+0x1ce>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a29      	ldr	r2, [pc, #164]	; (8004594 <HAL_TIM_PWM_Start_IT+0x264>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d004      	beq.n	80044fe <HAL_TIM_PWM_Start_IT+0x1ce>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_TIM_PWM_Start_IT+0x268>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_PWM_Start_IT+0x1d2>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_TIM_PWM_Start_IT+0x1d4>
 8004502:	2300      	movs	r3, #0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004516:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1b      	ldr	r2, [pc, #108]	; (800458c <HAL_TIM_PWM_Start_IT+0x25c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d00e      	beq.n	8004540 <HAL_TIM_PWM_Start_IT+0x210>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800452a:	d009      	beq.n	8004540 <HAL_TIM_PWM_Start_IT+0x210>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1a      	ldr	r2, [pc, #104]	; (800459c <HAL_TIM_PWM_Start_IT+0x26c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_TIM_PWM_Start_IT+0x210>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_TIM_PWM_Start_IT+0x260>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d115      	bne.n	800456c <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <HAL_TIM_PWM_Start_IT+0x270>)
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b06      	cmp	r3, #6
 8004550:	d015      	beq.n	800457e <HAL_TIM_PWM_Start_IT+0x24e>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d011      	beq.n	800457e <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0201 	orr.w	r2, r2, #1
 8004568:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456a:	e008      	b.n	800457e <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e000      	b.n	8004580 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40012c00 	.word	0x40012c00
 8004590:	40014000 	.word	0x40014000
 8004594:	40014400 	.word	0x40014400
 8004598:	40014800 	.word	0x40014800
 800459c:	40000400 	.word	0x40000400
 80045a0:	00010007 	.word	0x00010007

080045a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045be:	2302      	movs	r3, #2
 80045c0:	e0ff      	b.n	80047c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b14      	cmp	r3, #20
 80045ce:	f200 80f0 	bhi.w	80047b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	0800462d 	.word	0x0800462d
 80045dc:	080047b3 	.word	0x080047b3
 80045e0:	080047b3 	.word	0x080047b3
 80045e4:	080047b3 	.word	0x080047b3
 80045e8:	0800466d 	.word	0x0800466d
 80045ec:	080047b3 	.word	0x080047b3
 80045f0:	080047b3 	.word	0x080047b3
 80045f4:	080047b3 	.word	0x080047b3
 80045f8:	080046af 	.word	0x080046af
 80045fc:	080047b3 	.word	0x080047b3
 8004600:	080047b3 	.word	0x080047b3
 8004604:	080047b3 	.word	0x080047b3
 8004608:	080046ef 	.word	0x080046ef
 800460c:	080047b3 	.word	0x080047b3
 8004610:	080047b3 	.word	0x080047b3
 8004614:	080047b3 	.word	0x080047b3
 8004618:	08004731 	.word	0x08004731
 800461c:	080047b3 	.word	0x080047b3
 8004620:	080047b3 	.word	0x080047b3
 8004624:	080047b3 	.word	0x080047b3
 8004628:	08004771 	.word	0x08004771
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 f942 	bl	80048bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0208 	orr.w	r2, r2, #8
 8004646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0204 	bic.w	r2, r2, #4
 8004656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6999      	ldr	r1, [r3, #24]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	619a      	str	r2, [r3, #24]
      break;
 800466a:	e0a5      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	4618      	mov	r0, r3
 8004674:	f000 f9a8 	bl	80049c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699a      	ldr	r2, [r3, #24]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	619a      	str	r2, [r3, #24]
      break;
 80046ac:	e084      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fa07 	bl	8004ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f042 0208 	orr.w	r2, r2, #8
 80046c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69da      	ldr	r2, [r3, #28]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0204 	bic.w	r2, r2, #4
 80046d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69d9      	ldr	r1, [r3, #28]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691a      	ldr	r2, [r3, #16]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	61da      	str	r2, [r3, #28]
      break;
 80046ec:	e064      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fa65 	bl	8004bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69d9      	ldr	r1, [r3, #28]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	021a      	lsls	r2, r3, #8
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	430a      	orrs	r2, r1
 800472c:	61da      	str	r2, [r3, #28]
      break;
 800472e:	e043      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 faa8 	bl	8004c8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0208 	orr.w	r2, r2, #8
 800474a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0204 	bic.w	r2, r2, #4
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800476e:	e023      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fae6 	bl	8004d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	021a      	lsls	r2, r3, #8
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047b0:	e002      	b.n	80047b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
      break;
 80047b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop

080047cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x28>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <TIM_Base_SetConfig+0xe0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d00f      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a24      	ldr	r2, [pc, #144]	; (80048ac <TIM_Base_SetConfig+0xe0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00b      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a23      	ldr	r2, [pc, #140]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d007      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_Base_SetConfig+0x6a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a21      	ldr	r2, [pc, #132]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d108      	bne.n	8004848 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <TIM_Base_SetConfig+0xdc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <TIM_Base_SetConfig+0xe4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	; (80048b4 <TIM_Base_SetConfig+0xe8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0xc0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <TIM_Base_SetConfig+0xec>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	40012c00 	.word	0x40012c00
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0302 	bic.w	r3, r3, #2
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <TIM_OC1_SetConfig+0xfc>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00b      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a27      	ldr	r2, [pc, #156]	; (80049bc <TIM_OC1_SetConfig+0x100>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d007      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <TIM_OC1_SetConfig+0x104>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d003      	beq.n	8004934 <TIM_OC1_SetConfig+0x78>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <TIM_OC1_SetConfig+0x108>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <TIM_OC1_SetConfig+0xfc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00b      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a18      	ldr	r2, [pc, #96]	; (80049bc <TIM_OC1_SetConfig+0x100>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d007      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <TIM_OC1_SetConfig+0x104>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d003      	beq.n	800496e <TIM_OC1_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <TIM_OC1_SetConfig+0x108>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d111      	bne.n	8004992 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800497c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	621a      	str	r2, [r3, #32]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40012c00 	.word	0x40012c00
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800

080049c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f023 0210 	bic.w	r2, r3, #16
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a24      	ldr	r2, [pc, #144]	; (8004ab8 <TIM_OC2_SetConfig+0xf0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10d      	bne.n	8004a48 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <TIM_OC2_SetConfig+0xf0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <TIM_OC2_SetConfig+0xf4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <TIM_OC2_SetConfig+0xf8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC2_SetConfig+0xa0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC2_SetConfig+0xfc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d113      	bne.n	8004a90 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a76:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40014400 	.word	0x40014400
 8004ac4:	40014800 	.word	0x40014800

08004ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <TIM_OC3_SetConfig+0xec>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10d      	bne.n	8004b46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <TIM_OC3_SetConfig+0xec>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00b      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a19      	ldr	r2, [pc, #100]	; (8004bb8 <TIM_OC3_SetConfig+0xf0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d007      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <TIM_OC3_SetConfig+0xf4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d003      	beq.n	8004b66 <TIM_OC3_SetConfig+0x9e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <TIM_OC3_SetConfig+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d113      	bne.n	8004b8e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	621a      	str	r2, [r3, #32]
}
 8004ba8:	bf00      	nop
 8004baa:	371c      	adds	r7, #28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	40012c00 	.word	0x40012c00
 8004bb8:	40014000 	.word	0x40014000
 8004bbc:	40014400 	.word	0x40014400
 8004bc0:	40014800 	.word	0x40014800

08004bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	031b      	lsls	r3, r3, #12
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <TIM_OC4_SetConfig+0xb8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a15      	ldr	r2, [pc, #84]	; (8004c80 <TIM_OC4_SetConfig+0xbc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a14      	ldr	r2, [pc, #80]	; (8004c84 <TIM_OC4_SetConfig+0xc0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC4_SetConfig+0x7c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <TIM_OC4_SetConfig+0xc4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d109      	bne.n	8004c54 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	019b      	lsls	r3, r3, #6
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	621a      	str	r2, [r3, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40014400 	.word	0x40014400
 8004c88:	40014800 	.word	0x40014800

08004c8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC5_SetConfig+0xac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00b      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC5_SetConfig+0xb0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a13      	ldr	r2, [pc, #76]	; (8004d40 <TIM_OC5_SetConfig+0xb4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_OC5_SetConfig+0x72>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <TIM_OC5_SetConfig+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d109      	bne.n	8004d12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	051b      	lsls	r3, r3, #20
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a16      	ldr	r2, [pc, #88]	; (8004df8 <TIM_OC6_SetConfig+0xb0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <TIM_OC6_SetConfig+0xb4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <TIM_OC6_SetConfig+0xb8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC6_SetConfig+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a13      	ldr	r2, [pc, #76]	; (8004e04 <TIM_OC6_SetConfig+0xbc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d109      	bne.n	8004dd0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	029b      	lsls	r3, r3, #10
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40014000 	.word	0x40014000
 8004e00:	40014400 	.word	0x40014400
 8004e04:	40014800 	.word	0x40014800

08004e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	401a      	ands	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 031f 	and.w	r3, r3, #31
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e054      	b.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d108      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed4:	d009      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a11      	ldr	r2, [pc, #68]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d10c      	bne.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40014000 	.word	0x40014000

08004f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e060      	b.n	800500e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d115      	bne.n	8004ffc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	051b      	lsls	r3, r3, #20
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00

08005020 <__libc_init_array>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	4d0d      	ldr	r5, [pc, #52]	; (8005058 <__libc_init_array+0x38>)
 8005024:	4c0d      	ldr	r4, [pc, #52]	; (800505c <__libc_init_array+0x3c>)
 8005026:	1b64      	subs	r4, r4, r5
 8005028:	10a4      	asrs	r4, r4, #2
 800502a:	2600      	movs	r6, #0
 800502c:	42a6      	cmp	r6, r4
 800502e:	d109      	bne.n	8005044 <__libc_init_array+0x24>
 8005030:	4d0b      	ldr	r5, [pc, #44]	; (8005060 <__libc_init_array+0x40>)
 8005032:	4c0c      	ldr	r4, [pc, #48]	; (8005064 <__libc_init_array+0x44>)
 8005034:	f000 f820 	bl	8005078 <_init>
 8005038:	1b64      	subs	r4, r4, r5
 800503a:	10a4      	asrs	r4, r4, #2
 800503c:	2600      	movs	r6, #0
 800503e:	42a6      	cmp	r6, r4
 8005040:	d105      	bne.n	800504e <__libc_init_array+0x2e>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	f855 3b04 	ldr.w	r3, [r5], #4
 8005048:	4798      	blx	r3
 800504a:	3601      	adds	r6, #1
 800504c:	e7ee      	b.n	800502c <__libc_init_array+0xc>
 800504e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005052:	4798      	blx	r3
 8005054:	3601      	adds	r6, #1
 8005056:	e7f2      	b.n	800503e <__libc_init_array+0x1e>
 8005058:	080050c0 	.word	0x080050c0
 800505c:	080050c0 	.word	0x080050c0
 8005060:	080050c0 	.word	0x080050c0
 8005064:	080050c4 	.word	0x080050c4

08005068 <memset>:
 8005068:	4402      	add	r2, r0
 800506a:	4603      	mov	r3, r0
 800506c:	4293      	cmp	r3, r2
 800506e:	d100      	bne.n	8005072 <memset+0xa>
 8005070:	4770      	bx	lr
 8005072:	f803 1b01 	strb.w	r1, [r3], #1
 8005076:	e7f9      	b.n	800506c <memset+0x4>

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
