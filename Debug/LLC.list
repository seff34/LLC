
LLC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004130  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e8  080042e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080042e8  080042e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042e8  080042e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da1  00000000  00000000  0002d31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b70  00000000  00000000  0002fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb2d  00000000  00000000  00030888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e94a  00000000  00000000  000503b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2027  00000000  00000000  0005ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00120d26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000339c  00000000  00000000  00120d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042a0 	.word	0x080042a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042a0 	.word	0x080042a0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb6e 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f998 	bl	8000508 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f978 	bl	80004cc <MX_DMA_Init>
  MX_ADC1_Init();
 80001dc:	f000 f876 	bl	80002cc <MX_ADC1_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8e4 	bl	80003ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, adc_value,1);
 80001e4:	4b05      	ldr	r3, [pc, #20]	; (80001fc <main+0x34>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2201      	movs	r2, #1
 80001ea:	4619      	mov	r1, r3
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <main+0x38>)
 80001ee:	f000 fd73 	bl	8000cd8 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <main+0x3c>)
 80001f6:	f003 f9af 	bl	8003558 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fa:	e7fe      	b.n	80001fa <main+0x32>
 80001fc:	20000028 	.word	0x20000028
 8000200:	2000002c 	.word	0x2000002c
 8000204:	200000c0 	.word	0x200000c0

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b096      	sub	sp, #88	; 0x58
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 f83a 	bl	8004290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 031c 	add.w	r3, r7, #28
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]
 800023a:	615a      	str	r2, [r3, #20]
 800023c:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2301      	movs	r3, #1
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000246:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800025a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800025e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000264:	4618      	mov	r0, r3
 8000266:	f001 fefb 	bl	8002060 <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000270:	f000 f9c2 	bl	80005f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000284:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	f107 031c 	add.w	r3, r7, #28
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fded 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800029c:	f000 f9ac 	bl	80005f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80002a0:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80002a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002aa:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b0:	463b      	mov	r3, r7
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 ffc2 	bl	800323c <HAL_RCCEx_PeriphCLKConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002be:	f000 f99b 	bl	80005f8 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3758      	adds	r7, #88	; 0x58
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d2:	f107 031c 	add.w	r3, r7, #28
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
 80002ea:	611a      	str	r2, [r3, #16]
 80002ec:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002f6:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xdc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000308:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800030a:	2201      	movs	r2, #1
 800030c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000318:	2200      	movs	r2, #0
 800031a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000322:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800032a:	2201      	movs	r2, #1
 800032c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000330:	2201      	movs	r2, #1
 8000332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000338:	2204      	movs	r2, #4
 800033a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800033e:	2200      	movs	r2, #0
 8000340:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xdc>)
 800034a:	f000 fb33 	bl	80009b4 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000354:	f000 f950 	bl	80005f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 031c 	add.w	r3, r7, #28
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000364:	f001 f854 	bl	8001410 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800036e:	f000 f943 	bl	80005f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000372:	2301      	movs	r3, #1
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2301      	movs	r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800037e:	2300      	movs	r3, #0
 8000380:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xdc>)
 8000390:	f000 fd7c 	bl	8000e8c <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800039a:	f000 f92d 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800039e:	bf00      	nop
 80003a0:	3728      	adds	r7, #40	; 0x28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000002c 	.word	0x2000002c

080003ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	222c      	movs	r2, #44	; 0x2c
 80003d6:	2100      	movs	r1, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f003 ff59 	bl	8004290 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003de:	4b39      	ldr	r3, [pc, #228]	; (80004c4 <MX_TIM1_Init+0x118>)
 80003e0:	4a39      	ldr	r2, [pc, #228]	; (80004c8 <MX_TIM1_Init+0x11c>)
 80003e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003e4:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <MX_TIM1_Init+0x118>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <MX_TIM1_Init+0x118>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64999;
 80003f0:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <MX_TIM1_Init+0x118>)
 80003f2:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80003f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f8:	4b32      	ldr	r3, [pc, #200]	; (80004c4 <MX_TIM1_Init+0x118>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003fe:	4b31      	ldr	r3, [pc, #196]	; (80004c4 <MX_TIM1_Init+0x118>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000404:	4b2f      	ldr	r3, [pc, #188]	; (80004c4 <MX_TIM1_Init+0x118>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800040a:	482e      	ldr	r0, [pc, #184]	; (80004c4 <MX_TIM1_Init+0x118>)
 800040c:	f003 f84c 	bl	80034a8 <HAL_TIM_PWM_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000416:	f000 f8ef 	bl	80005f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800042a:	4619      	mov	r1, r3
 800042c:	4825      	ldr	r0, [pc, #148]	; (80004c4 <MX_TIM1_Init+0x118>)
 800042e:	f003 fe25 	bl	800407c <HAL_TIMEx_MasterConfigSynchronization>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000438:	f000 f8de 	bl	80005f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043c:	2360      	movs	r3, #96	; 0x60
 800043e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000444:	2300      	movs	r3, #0
 8000446:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000448:	2300      	movs	r3, #0
 800044a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000450:	2300      	movs	r3, #0
 8000452:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000454:	2300      	movs	r3, #0
 8000456:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800045c:	2200      	movs	r2, #0
 800045e:	4619      	mov	r1, r3
 8000460:	4818      	ldr	r0, [pc, #96]	; (80004c4 <MX_TIM1_Init+0x118>)
 8000462:	f003 f9b3 	bl	80037cc <HAL_TIM_PWM_ConfigChannel>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800046c:	f000 f8c4 	bl	80005f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000470:	2300      	movs	r3, #0
 8000472:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000474:	2300      	movs	r3, #0
 8000476:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800048e:	2300      	movs	r3, #0
 8000490:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4807      	ldr	r0, [pc, #28]	; (80004c4 <MX_TIM1_Init+0x118>)
 80004a6:	f003 fe57 	bl	8004158 <HAL_TIMEx_ConfigBreakDeadTime>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80004b0:	f000 f8a2 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <MX_TIM1_Init+0x118>)
 80004b6:	f000 f951 	bl	800075c <HAL_TIM_MspPostInit>

}
 80004ba:	bf00      	nop
 80004bc:	3758      	adds	r7, #88	; 0x58
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000c0 	.word	0x200000c0
 80004c8:	40012c00 	.word	0x40012c00

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <MX_DMA_Init+0x38>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <MX_DMA_Init+0x38>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <MX_DMA_Init+0x38>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	200b      	movs	r0, #11
 80004f0:	f001 fa5f 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f4:	200b      	movs	r0, #11
 80004f6:	f001 fa78 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b34      	ldr	r3, [pc, #208]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a33      	ldr	r2, [pc, #204]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000524:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b31      	ldr	r3, [pc, #196]	; (80005f0 <MX_GPIO_Init+0xe8>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a2d      	ldr	r2, [pc, #180]	; (80005f0 <MX_GPIO_Init+0xe8>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <MX_GPIO_Init+0xe8>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <MX_GPIO_Init+0xe8>)
 800056c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <MX_GPIO_Init+0xe8>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000586:	f001 fd53 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800058a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000590:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	4619      	mov	r1, r3
 80005a0:	4814      	ldr	r0, [pc, #80]	; (80005f4 <MX_GPIO_Init+0xec>)
 80005a2:	f001 fbd3 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a6:	230c      	movs	r3, #12
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2303      	movs	r3, #3
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005b6:	2307      	movs	r3, #7
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4619      	mov	r1, r3
 80005c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c4:	f001 fbc2 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005c8:	2320      	movs	r3, #32
 80005ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e2:	f001 fbb3 	bl	8001d4c <HAL_GPIO_Init>

}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48000800 	.word	0x48000800

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	e7fe      	b.n	8000600 <Error_Handler+0x8>
	...

08000604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <HAL_MspInit+0x44>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <HAL_MspInit+0x44>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800063a:	2007      	movs	r0, #7
 800063c:	f001 f9ae 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800066c:	d14c      	bne.n	8000708 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a21      	ldr	r2, [pc, #132]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <HAL_ADC_MspInit+0xc4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069e:	2301      	movs	r3, #1
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4619      	mov	r1, r3
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f001 fb4a 	bl	8001d4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	; (8000718 <HAL_ADC_MspInit+0xcc>)
 80006bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006d0:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 80006ee:	f001 f996 	bl	8001a1e <HAL_DMA_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80006f8:	f7ff ff7e 	bl	80005f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 8000700:	639a      	str	r2, [r3, #56]	; 0x38
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <HAL_ADC_MspInit+0xc8>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	2000007c 	.word	0x2000007c
 8000718:	40020008 	.word	0x40020008

0800071c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_TIM_PWM_MspInit+0x38>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d10b      	bne.n	8000746 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_TIM_PWM_MspInit+0x3c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a09      	ldr	r2, [pc, #36]	; (8000758 <HAL_TIM_PWM_MspInit+0x3c>)
 8000734:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <HAL_TIM_PWM_MspInit+0x3c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40012c00 	.word	0x40012c00
 8000758:	40021000 	.word	0x40021000

0800075c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <HAL_TIM_MspPostInit+0x64>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d11b      	bne.n	80007b6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_TIM_MspPostInit+0x68>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <HAL_TIM_MspPostInit+0x68>)
 8000784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000788:	6153      	str	r3, [r2, #20]
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_TIM_MspPostInit+0x68>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	2301      	movs	r3, #1
 8000798:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_TIM_MspPostInit+0x6c>)
 80007b2:	f001 facb 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40012c00 	.word	0x40012c00
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000800 	.word	0x48000800

080007cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <NMI_Handler+0x4>

080007d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <HardFault_Handler+0x4>

080007d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MemManage_Handler+0x4>

080007de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <BusFault_Handler+0x4>

080007e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <UsageFault_Handler+0x4>

080007ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000818:	f000 f88e 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <DMA1_Channel1_IRQHandler+0x10>)
 8000826:	f001 f9a0 	bl	8001b6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000007c 	.word	0x2000007c

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000890 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490e      	ldr	r1, [pc, #56]	; (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0e      	ldr	r2, [pc, #56]	; (800089c <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0b      	ldr	r4, [pc, #44]	; (80008a4 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffd7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f003 fcdf 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fc9d 	bl	80001c8 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000890:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800089c:	080042f0 	.word	0x080042f0
  ldr r2, =_sbss
 80008a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a4:	20000110 	.word	0x20000110

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f001 f86d 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff fe9c 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f001 f885 	bl	8001a06 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f001 f84d 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000000 	.word	0x20000000
 8000930:	20000008 	.word	0x20000008
 8000934:	20000004 	.word	0x20000004

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_IncTick+0x20>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_IncTick+0x24>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_IncTick+0x24>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000008 	.word	0x20000008
 800095c:	2000010c 	.word	0x2000010c

08000960 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;  
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <HAL_GetTick+0x14>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	2000010c 	.word	0x2000010c

08000978 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b09a      	sub	sp, #104	; 0x68
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2300      	movs	r3, #0
 80009be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e172      	b.n	8000cba <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 0310 	and.w	r3, r3, #16
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d176      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d152      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff fe1f 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d13b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 fe87 	bl	8001730 <ADC_Disable>
 8000a22:	4603      	mov	r3, r0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f003 0310 	and.w	r3, r3, #16
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d12f      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
 8000a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d12b      	bne.n	8000a94 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	f043 0202 	orr.w	r2, r3, #2
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a5e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a6e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a70:	4b94      	ldr	r3, [pc, #592]	; (8000cc4 <HAL_ADC_Init+0x310>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a94      	ldr	r2, [pc, #592]	; (8000cc8 <HAL_ADC_Init+0x314>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9a      	lsrs	r2, r3, #18
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a86:	e002      	b.n	8000a8e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1f9      	bne.n	8000a88 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d007      	beq.n	8000ab2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ab0:	d110      	bne.n	8000ad4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f023 0312 	bic.w	r3, r3, #18
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f043 0201 	orr.w	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f003 0310 	and.w	r3, r3, #16
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	f040 80df 	bne.w	8000ca0 <HAL_ADC_Init+0x2ec>
 8000ae2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 80da 	bne.w	8000ca0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 80d2 	bne.w	8000ca0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000b04:	f043 0202 	orr.w	r2, r3, #2
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b0c:	4b6f      	ldr	r3, [pc, #444]	; (8000ccc <HAL_ADC_Init+0x318>)
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b18:	d102      	bne.n	8000b20 <HAL_ADC_Init+0x16c>
 8000b1a:	4b6d      	ldr	r3, [pc, #436]	; (8000cd0 <HAL_ADC_Init+0x31c>)
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	e002      	b.n	8000b26 <HAL_ADC_Init+0x172>
 8000b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000b24:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d108      	bne.n	8000b46 <HAL_ADC_Init+0x192>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <HAL_ADC_Init+0x192>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <HAL_ADC_Init+0x194>
 8000b46:	2300      	movs	r3, #0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d11c      	bne.n	8000b86 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d010      	beq.n	8000b74 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d107      	bne.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d101      	bne.n	8000b6e <HAL_ADC_Init+0x1ba>
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e000      	b.n	8000b70 <HAL_ADC_Init+0x1bc>
 8000b6e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d108      	bne.n	8000b86 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	431a      	orrs	r2, r3
 8000b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b84:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7e5b      	ldrb	r3, [r3, #25]
 8000b8a:	035b      	lsls	r3, r3, #13
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b90:	2a01      	cmp	r2, #1
 8000b92:	d002      	beq.n	8000b9a <HAL_ADC_Init+0x1e6>
 8000b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b98:	e000      	b.n	8000b9c <HAL_ADC_Init+0x1e8>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bac:	4313      	orrs	r3, r2
 8000bae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d11b      	bne.n	8000bf2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7e5b      	ldrb	r3, [r3, #25]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d109      	bne.n	8000bd6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	045a      	lsls	r2, r3, #17
 8000bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd2:	663b      	str	r3, [r7, #96]	; 0x60
 8000bd4:	e00d      	b.n	8000bf2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000bde:	f043 0220 	orr.w	r2, r3, #32
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d007      	beq.n	8000c0a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c02:	4313      	orrs	r3, r2
 8000c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c06:	4313      	orrs	r3, r2
 8000c08:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 030c 	and.w	r3, r3, #12
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d114      	bne.n	8000c42 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c26:	f023 0302 	bic.w	r3, r3, #2
 8000c2a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7e1b      	ldrb	r3, [r3, #24]
 8000c30:	039a      	lsls	r2, r3, #14
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <HAL_ADC_Init+0x320>)
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c52:	430b      	orrs	r3, r1
 8000c54:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d10c      	bne.n	8000c78 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f023 010f 	bic.w	r1, r3, #15
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	430a      	orrs	r2, r1
 8000c74:	631a      	str	r2, [r3, #48]	; 0x30
 8000c76:	e007      	b.n	8000c88 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 020f 	bic.w	r2, r2, #15
 8000c86:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	e00a      	b.n	8000cb6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f023 0312 	bic.w	r3, r3, #18
 8000ca8:	f043 0210 	orr.w	r2, r3, #16
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000cb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3768      	adds	r7, #104	; 0x68
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	50000300 	.word	0x50000300
 8000cd0:	50000100 	.word	0x50000100
 8000cd4:	fff0c007 	.word	0xfff0c007

08000cd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 80b9 	bne.w	8000e6a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Start_DMA+0x2e>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e0b4      	b.n	8000e70 <HAL_ADC_Start_DMA+0x198>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000d0e:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <HAL_ADC_Start_DMA+0x1a0>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 031f 	and.w	r3, r3, #31
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 80a0 	bne.w	8000e5c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f000 fca3 	bl	8001668 <ADC_Enable>
 8000d22:	4603      	mov	r3, r0
 8000d24:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000d26:	7dfb      	ldrb	r3, [r7, #23]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d36:	f023 0301 	bic.w	r3, r3, #1
 8000d3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d42:	4b4d      	ldr	r3, [pc, #308]	; (8000e78 <HAL_ADC_Start_DMA+0x1a0>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 031f 	and.w	r3, r3, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d004      	beq.n	8000d58 <HAL_ADC_Start_DMA+0x80>
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d56:	d115      	bne.n	8000d84 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d027      	beq.n	8000dc2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d82:	e01e      	b.n	8000dc2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d98:	d004      	beq.n	8000da4 <HAL_ADC_Start_DMA+0xcc>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a37      	ldr	r2, [pc, #220]	; (8000e7c <HAL_ADC_Start_DMA+0x1a4>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d10e      	bne.n	8000dc2 <HAL_ADC_Start_DMA+0xea>
 8000da4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d007      	beq.n	8000dc2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dce:	d106      	bne.n	8000dde <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	f023 0206 	bic.w	r2, r3, #6
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	645a      	str	r2, [r3, #68]	; 0x44
 8000ddc:	e002      	b.n	8000de4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2200      	movs	r2, #0
 8000de2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_ADC_Start_DMA+0x1a8>)
 8000df2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df8:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_ADC_Start_DMA+0x1ac>)
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_ADC_Start_DMA+0x1b0>)
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	221c      	movs	r2, #28
 8000e0a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0210 	orr.w	r2, r2, #16
 8000e1a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3340      	adds	r3, #64	; 0x40
 8000e36:	4619      	mov	r1, r3
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f000 fe36 	bl	8001aac <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0204 	orr.w	r2, r2, #4
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	e00d      	b.n	8000e6e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e5a:	e008      	b.n	8000e6e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000e68:	e001      	b.n	8000e6e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	50000300 	.word	0x50000300
 8000e7c:	50000100 	.word	0x50000100
 8000e80:	0800159d 	.word	0x0800159d
 8000e84:	08001617 	.word	0x08001617
 8000e88:	08001633 	.word	0x08001633

08000e8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b09b      	sub	sp, #108	; 0x6c
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d101      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x22>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e2a5      	b.n	80013fa <HAL_ADC_ConfigChannel+0x56e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 8289 	bne.w	80013d8 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d81c      	bhi.n	8000f08 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	4019      	ands	r1, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa00 f203 	lsl.w	r2, r0, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	430a      	orrs	r2, r1
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
 8000f06:	e063      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d81e      	bhi.n	8000f4e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	3b1e      	subs	r3, #30
 8000f24:	221f      	movs	r2, #31
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4019      	ands	r1, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	3b1e      	subs	r3, #30
 8000f40:	fa00 f203 	lsl.w	r2, r0, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f4c:	e040      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b0e      	cmp	r3, #14
 8000f54:	d81e      	bhi.n	8000f94 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	3b3c      	subs	r3, #60	; 0x3c
 8000f6a:	221f      	movs	r2, #31
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4019      	ands	r1, r3
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	6818      	ldr	r0, [r3, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685a      	ldr	r2, [r3, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	3b3c      	subs	r3, #60	; 0x3c
 8000f86:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	639a      	str	r2, [r3, #56]	; 0x38
 8000f92:	e01d      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	3b5a      	subs	r3, #90	; 0x5a
 8000fa8:	221f      	movs	r2, #31
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4019      	ands	r1, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	3b5a      	subs	r3, #90	; 0x5a
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f040 80e5 	bne.w	80011aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b09      	cmp	r3, #9
 8000fe6:	d91c      	bls.n	8001022 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6999      	ldr	r1, [r3, #24]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3b1e      	subs	r3, #30
 8000ffa:	2207      	movs	r2, #7
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	4019      	ands	r1, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	6898      	ldr	r0, [r3, #8]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4613      	mov	r3, r2
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	4413      	add	r3, r2
 8001012:	3b1e      	subs	r3, #30
 8001014:	fa00 f203 	lsl.w	r2, r0, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	619a      	str	r2, [r3, #24]
 8001020:	e019      	b.n	8001056 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6959      	ldr	r1, [r3, #20]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	2207      	movs	r2, #7
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	4019      	ands	r1, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6898      	ldr	r0, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	08db      	lsrs	r3, r3, #3
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	3b01      	subs	r3, #1
 8001074:	2b03      	cmp	r3, #3
 8001076:	d84f      	bhi.n	8001118 <HAL_ADC_ConfigChannel+0x28c>
 8001078:	a201      	add	r2, pc, #4	; (adr r2, 8001080 <HAL_ADC_ConfigChannel+0x1f4>)
 800107a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107e:	bf00      	nop
 8001080:	08001091 	.word	0x08001091
 8001084:	080010b3 	.word	0x080010b3
 8001088:	080010d5 	.word	0x080010d5
 800108c:	080010f7 	.word	0x080010f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001096:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <HAL_ADC_ConfigChannel+0x484>)
 8001098:	4013      	ands	r3, r2
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	0691      	lsls	r1, r2, #26
 80010a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010a2:	430a      	orrs	r2, r1
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010b0:	e07e      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010b8:	4b95      	ldr	r3, [pc, #596]	; (8001310 <HAL_ADC_ConfigChannel+0x484>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	0691      	lsls	r1, r2, #26
 80010c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010c4:	430a      	orrs	r2, r1
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010d2:	e06d      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010da:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <HAL_ADC_ConfigChannel+0x484>)
 80010dc:	4013      	ands	r3, r2
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	0691      	lsls	r1, r2, #26
 80010e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e6:	430a      	orrs	r2, r1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010f4:	e05c      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010fc:	4b84      	ldr	r3, [pc, #528]	; (8001310 <HAL_ADC_ConfigChannel+0x484>)
 80010fe:	4013      	ands	r3, r2
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	0691      	lsls	r1, r2, #26
 8001106:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001108:	430a      	orrs	r2, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001114:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001116:	e04b      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	069b      	lsls	r3, r3, #26
 8001128:	429a      	cmp	r2, r3
 800112a:	d107      	bne.n	800113c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800113a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001142:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	069b      	lsls	r3, r3, #26
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800115e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001166:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	069b      	lsls	r3, r3, #26
 8001170:	429a      	cmp	r2, r3
 8001172:	d107      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001182:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800118a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	069b      	lsls	r3, r3, #26
 8001194:	429a      	cmp	r2, r3
 8001196:	d10a      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80011a8:	e001      	b.n	80011ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80011aa:	bf00      	nop
 80011ac:	e000      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80011ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x344>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_ADC_ConfigChannel+0x344>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x346>
 80011d0:	2300      	movs	r3, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 810b 	bne.w	80013ee <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d00f      	beq.n	8001200 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2201      	movs	r2, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	400a      	ands	r2, r1
 80011fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80011fe:	e049      	b.n	8001294 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2201      	movs	r2, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d91c      	bls.n	800125c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6999      	ldr	r1, [r3, #24]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	3b1b      	subs	r3, #27
 8001234:	2207      	movs	r2, #7
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	4019      	ands	r1, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6898      	ldr	r0, [r3, #8]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	3b1b      	subs	r3, #27
 800124e:	fa00 f203 	lsl.w	r2, r0, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	619a      	str	r2, [r3, #24]
 800125a:	e01b      	b.n	8001294 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6959      	ldr	r1, [r3, #20]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	2207      	movs	r2, #7
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	4019      	ands	r1, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001294:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <HAL_ADC_ConfigChannel+0x488>)
 8001296:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b10      	cmp	r3, #16
 800129e:	d105      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d015      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d105      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80012c4:	2b12      	cmp	r3, #18
 80012c6:	f040 8092 	bne.w	80013ee <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80012ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 808b 	bne.w	80013ee <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e0:	d102      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x45c>
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_ADC_ConfigChannel+0x48c>)
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	e002      	b.n	80012ee <HAL_ADC_ConfigChannel+0x462>
 80012e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10f      	bne.n	800131c <HAL_ADC_ConfigChannel+0x490>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b01      	cmp	r3, #1
 8001308:	d108      	bne.n	800131c <HAL_ADC_ConfigChannel+0x490>
 800130a:	2301      	movs	r3, #1
 800130c:	e007      	b.n	800131e <HAL_ADC_ConfigChannel+0x492>
 800130e:	bf00      	nop
 8001310:	83fff000 	.word	0x83fff000
 8001314:	50000300 	.word	0x50000300
 8001318:	50000100 	.word	0x50000100
 800131c:	2300      	movs	r3, #0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d150      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001322:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d107      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x4b8>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x4b8>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_ADC_ConfigChannel+0x4ba>
 8001344:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001346:	2b00      	cmp	r3, #0
 8001348:	d13c      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b10      	cmp	r3, #16
 8001350:	d11d      	bne.n	800138e <HAL_ADC_ConfigChannel+0x502>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800135a:	d118      	bne.n	800138e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001366:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <HAL_ADC_ConfigChannel+0x57c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a27      	ldr	r2, [pc, #156]	; (800140c <HAL_ADC_ConfigChannel+0x580>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	0c9a      	lsrs	r2, r3, #18
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800137e:	e002      	b.n	8001386 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	3b01      	subs	r3, #1
 8001384:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f9      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800138c:	e02e      	b.n	80013ec <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b11      	cmp	r3, #17
 8001394:	d10b      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x522>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800139e:	d106      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80013a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80013a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ac:	e01e      	b.n	80013ec <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d11a      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80013b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013c2:	e013      	b.n	80013ec <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f043 0220 	orr.w	r2, r3, #32
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013d6:	e00a      	b.n	80013ee <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f043 0220 	orr.w	r2, r3, #32
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80013ea:	e000      	b.n	80013ee <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	376c      	adds	r7, #108	; 0x6c
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000000 	.word	0x20000000
 800140c:	431bde83 	.word	0x431bde83

08001410 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001410:	b480      	push	{r7}
 8001412:	b099      	sub	sp, #100	; 0x64
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001428:	d102      	bne.n	8001430 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800142a:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	e002      	b.n	8001436 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001430:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001434:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0a2      	b.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800144a:	2302      	movs	r3, #2
 800144c:	e09b      	b.n	8001586 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	d17f      	bne.n	8001564 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d179      	bne.n	8001564 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001470:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001472:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d040      	beq.n	80014fe <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800147c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800148e:	035b      	lsls	r3, r3, #13
 8001490:	430b      	orrs	r3, r1
 8001492:	431a      	orrs	r2, r3
 8001494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001496:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d108      	bne.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d101      	bne.n	80014b8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80014b8:	2300      	movs	r3, #0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d15c      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80014da:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d14b      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80014e8:	f023 030f 	bic.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	6811      	ldr	r1, [r2, #0]
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	6892      	ldr	r2, [r2, #8]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	431a      	orrs	r2, r3
 80014f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014fa:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014fc:	e03c      	b.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80014fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001508:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d108      	bne.n	800152a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800152a:	2300      	movs	r3, #0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d123      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b01      	cmp	r3, #1
 800153a:	d107      	bne.n	800154c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800154c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800154e:	2b00      	cmp	r3, #0
 8001550:	d112      	bne.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800155a:	f023 030f 	bic.w	r3, r3, #15
 800155e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001560:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001562:	e009      	b.n	8001578 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f043 0220 	orr.w	r2, r3, #32
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001576:	e000      	b.n	800157a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001578:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001586:	4618      	mov	r0, r3
 8001588:	3764      	adds	r7, #100	; 0x64
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	50000100 	.word	0x50000100
 8001598:	50000300 	.word	0x50000300

0800159c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d126      	bne.n	8001604 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d115      	bne.n	80015fc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff f9bb 	bl	8000978 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001602:	e004      	b.n	800160e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff f9b1 	bl	800098c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	f043 0204 	orr.w	r2, r3, #4
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff f9a1 	bl	80009a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <ADC_Enable+0x2c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <ADC_Enable+0x2c>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <ADC_Enable+0x2e>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d143      	bne.n	8001722 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <ADC_Enable+0xc4>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00d      	beq.n	80016c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f043 0210 	orr.w	r2, r3, #16
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e02f      	b.n	8001724 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80016d4:	f7ff f944 	bl	8000960 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016da:	e01b      	b.n	8001714 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016dc:	f7ff f940 	bl	8000960 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d914      	bls.n	8001714 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d00d      	beq.n	8001714 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f043 0210 	orr.w	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e007      	b.n	8001724 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b01      	cmp	r3, #1
 8001720:	d1dc      	bne.n	80016dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	8000003f 	.word	0x8000003f

08001730 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <ADC_Disable+0x2c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <ADC_Disable+0x2c>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <ADC_Disable+0x2e>
 800175c:	2300      	movs	r3, #0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d047      	beq.n	80017f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030d 	and.w	r3, r3, #13
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10f      	bne.n	8001790 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0202 	orr.w	r2, r2, #2
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2203      	movs	r2, #3
 8001786:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001788:	f7ff f8ea 	bl	8000960 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800178e:	e029      	b.n	80017e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f043 0210 	orr.w	r2, r3, #16
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e023      	b.n	80017f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017ac:	f7ff f8d8 	bl	8000960 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d914      	bls.n	80017e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d10d      	bne.n	80017e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f043 0210 	orr.w	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e007      	b.n	80017f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d0dc      	beq.n	80017ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e037      	b.n	8001aa4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f940 	bl	8001d0c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}  
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_DMA_Start_IT+0x20>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e04a      	b.n	8001b62 <HAL_DMA_Start_IT+0xb6>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d13a      	bne.n	8001b54 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f8d4 	bl	8001cb0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 020e 	orr.w	r2, r2, #14
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	e00f      	b.n	8001b42 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 020a 	orr.w	r2, r2, #10
 8001b30:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e005      	b.n	8001b60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2204      	movs	r2, #4
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x72>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d107      	bne.n	8001bba <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0204 	bic.w	r2, r2, #4
 8001bb8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d06a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001bda:	e065      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	2202      	movs	r2, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02c      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xdc>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d027      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020a 	bic.w	r2, r2, #10
 8001c12:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c24:	2102      	movs	r1, #2
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d035      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001c44:	e030      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d028      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d023      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 020e 	bic.w	r2, r2, #14
 8001c6e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	2101      	movs	r1, #1
 8001c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c7e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
    }
  }
}  
 8001ca6:	e7ff      	b.n	8001ca8 <HAL_DMA_IRQHandler+0x13e>
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d108      	bne.n	8001cf0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cee:	e007      	b.n	8001d00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	60da      	str	r2, [r3, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <DMA_CalcBaseAndBitshift+0x34>)
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <DMA_CalcBaseAndBitshift+0x38>)
 8001d20:	fba2 2303 	umull	r2, r3, r2, r3
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	009a      	lsls	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <DMA_CalcBaseAndBitshift+0x3c>)
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	bffdfff8 	.word	0xbffdfff8
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	40020000 	.word	0x40020000

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5a:	e14e      	b.n	8001ffa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa01 f303 	lsl.w	r3, r1, r3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8140 	beq.w	8001ff4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d005      	beq.n	8001d8c <HAL_GPIO_Init+0x40>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d130      	bne.n	8001dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	091b      	lsrs	r3, r3, #4
 8001dd8:	f003 0201 	and.w	r2, r3, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d123      	bne.n	8001e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	08da      	lsrs	r2, r3, #3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	3208      	adds	r2, #8
 8001e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	6939      	ldr	r1, [r7, #16]
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0203 	and.w	r2, r3, #3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 809a 	beq.w	8001ff4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ec0:	4b55      	ldr	r3, [pc, #340]	; (8002018 <HAL_GPIO_Init+0x2cc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a54      	ldr	r2, [pc, #336]	; (8002018 <HAL_GPIO_Init+0x2cc>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b52      	ldr	r3, [pc, #328]	; (8002018 <HAL_GPIO_Init+0x2cc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ed8:	4a50      	ldr	r2, [pc, #320]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f02:	d013      	beq.n	8001f2c <HAL_GPIO_Init+0x1e0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a46      	ldr	r2, [pc, #280]	; (8002020 <HAL_GPIO_Init+0x2d4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1dc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a45      	ldr	r2, [pc, #276]	; (8002024 <HAL_GPIO_Init+0x2d8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1d8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a44      	ldr	r2, [pc, #272]	; (8002028 <HAL_GPIO_Init+0x2dc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1d4>
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e006      	b.n	8001f2e <HAL_GPIO_Init+0x1e2>
 8001f20:	2305      	movs	r3, #5
 8001f22:	e004      	b.n	8001f2e <HAL_GPIO_Init+0x1e2>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x1e2>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_GPIO_Init+0x1e2>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	f002 0203 	and.w	r2, r2, #3
 8001f34:	0092      	lsls	r2, r2, #2
 8001f36:	4093      	lsls	r3, r2
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f3e:	4937      	ldr	r1, [pc, #220]	; (800201c <HAL_GPIO_Init+0x2d0>)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f70:	4a2e      	ldr	r2, [pc, #184]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f9a:	4a24      	ldr	r2, [pc, #144]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_GPIO_Init+0x2e0>)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	fa22 f303 	lsr.w	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	f47f aea9 	bne.w	8001d5c <HAL_GPIO_Init+0x10>
  }
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	40021000 	.word	0x40021000
 800201c:	40010000 	.word	0x40010000
 8002020:	48000400 	.word	0x48000400
 8002024:	48000800 	.word	0x48000800
 8002028:	48000c00 	.word	0x48000c00
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800204c:	e002      	b.n	8002054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002066:	af00      	add	r7, sp, #0
 8002068:	1d3b      	adds	r3, r7, #4
 800206a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	f000 bef4 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 816a 	beq.w	800235e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800208a:	4bb3      	ldr	r3, [pc, #716]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002096:	4bb0      	ldr	r3, [pc, #704]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d159      	bne.n	8002156 <HAL_RCC_OscConfig+0xf6>
 80020a2:	4bad      	ldr	r3, [pc, #692]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ae:	d152      	bne.n	8002156 <HAL_RCC_OscConfig+0xf6>
 80020b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_RCC_OscConfig+0x82>
 80020dc:	4b9e      	ldr	r3, [pc, #632]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0xae>
 80020e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800210a:	4b93      	ldr	r3, [pc, #588]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002112:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002116:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800211a:	fa92 f2a2 	rbit	r2, r2
 800211e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002122:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002126:	fab2 f282 	clz	r2, r2
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f042 0220 	orr.w	r2, r2, #32
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	f002 021f 	and.w	r2, r2, #31
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	4013      	ands	r3, r2
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 810c 	beq.w	800235c <HAL_RCC_OscConfig+0x2fc>
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f040 8106 	bne.w	800235c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	f000 be86 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x110>
 8002162:	4b7d      	ldr	r3, [pc, #500]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7c      	ldr	r2, [pc, #496]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e030      	b.n	80021d2 <HAL_RCC_OscConfig+0x172>
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x134>
 800217a:	4b77      	ldr	r3, [pc, #476]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a76      	ldr	r2, [pc, #472]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b74      	ldr	r3, [pc, #464]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a73      	ldr	r2, [pc, #460]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800218c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e01e      	b.n	80021d2 <HAL_RCC_OscConfig+0x172>
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0x15a>
 80021a0:	4b6d      	ldr	r3, [pc, #436]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6c      	ldr	r2, [pc, #432]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a69      	ldr	r2, [pc, #420]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0x172>
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a66      	ldr	r2, [pc, #408]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b64      	ldr	r3, [pc, #400]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a63      	ldr	r2, [pc, #396]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f023 020f 	bic.w	r2, r3, #15
 80021da:	1d3b      	adds	r3, r7, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	495d      	ldr	r1, [pc, #372]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d059      	beq.n	80022a4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe fbb6 	bl	8000960 <HAL_GetTick>
 80021f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fa:	f7fe fbb1 	bl	8000960 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d902      	bls.n	8002210 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	f000 be29 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
 8002210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002214:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002224:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b01      	cmp	r3, #1
 800223a:	d102      	bne.n	8002242 <HAL_RCC_OscConfig+0x1e2>
 800223c:	4b46      	ldr	r3, [pc, #280]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x20e>
 8002242:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002246:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002256:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800225e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002272:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002276:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800227a:	fa92 f2a2 	rbit	r2, r2
 800227e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002282:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002286:	fab2 f282 	clz	r2, r2
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	f042 0220 	orr.w	r2, r2, #32
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	f002 021f 	and.w	r2, r2, #31
 8002296:	2101      	movs	r1, #1
 8002298:	fa01 f202 	lsl.w	r2, r1, r2
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ab      	beq.n	80021fa <HAL_RCC_OscConfig+0x19a>
 80022a2:	e05c      	b.n	800235e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fb5c 	bl	8000960 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ae:	f7fe fb57 	bl	8000960 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d902      	bls.n	80022c4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	f000 bdcf 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
 80022c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f043 0301 	orr.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d102      	bne.n	80022f6 <HAL_RCC_OscConfig+0x296>
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x2c2>
 80022f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800230a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800230e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002312:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800231e:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_RCC_OscConfig+0x2f8>)
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002326:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800232a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800232e:	fa92 f2a2 	rbit	r2, r2
 8002332:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002336:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800233a:	fab2 f282 	clz	r2, r2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f042 0220 	orr.w	r2, r2, #32
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f002 021f 	and.w	r2, r2, #31
 800234a:	2101      	movs	r1, #1
 800234c:	fa01 f202 	lsl.w	r2, r1, r2
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ab      	bne.n	80022ae <HAL_RCC_OscConfig+0x24e>
 8002356:	e002      	b.n	800235e <HAL_RCC_OscConfig+0x2fe>
 8002358:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 816f 	beq.w	800264c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800236e:	4bd0      	ldr	r3, [pc, #832]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800237a:	4bcd      	ldr	r3, [pc, #820]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d16c      	bne.n	8002460 <HAL_RCC_OscConfig+0x400>
 8002386:	4bca      	ldr	r3, [pc, #808]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d166      	bne.n	8002460 <HAL_RCC_OscConfig+0x400>
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002398:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80023a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_OscConfig+0x362>
 80023bc:	4bbc      	ldr	r3, [pc, #752]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	e013      	b.n	80023ea <HAL_RCC_OscConfig+0x38a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023d4:	2302      	movs	r3, #2
 80023d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023e6:	4bb2      	ldr	r3, [pc, #712]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2202      	movs	r2, #2
 80023ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023f4:	fa92 f2a2 	rbit	r2, r2
 80023f8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023fc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002400:	fab2 f282 	clz	r2, r2
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f042 0220 	orr.w	r2, r2, #32
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	f002 021f 	and.w	r2, r2, #31
 8002410:	2101      	movs	r1, #1
 8002412:	fa01 f202 	lsl.w	r2, r1, r2
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d007      	beq.n	800242c <HAL_RCC_OscConfig+0x3cc>
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f000 bd1b 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4ba0      	ldr	r3, [pc, #640]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	21f8      	movs	r1, #248	; 0xf8
 800243c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002444:	fa91 f1a1 	rbit	r1, r1
 8002448:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800244c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002450:	fab1 f181 	clz	r1, r1
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	408b      	lsls	r3, r1
 8002458:	4995      	ldr	r1, [pc, #596]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	e0f5      	b.n	800264c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8085 	beq.w	8002576 <HAL_RCC_OscConfig+0x516>
 800246c:	2301      	movs	r3, #1
 800246e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800247e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800248c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	461a      	mov	r2, r3
 8002494:	2301      	movs	r3, #1
 8002496:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe fa62 	bl	8000960 <HAL_GetTick>
 800249c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe fa5d 	bl	8000960 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f000 bcd5 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
 80024b8:	2302      	movs	r3, #2
 80024ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_OscConfig+0x488>
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	e013      	b.n	8002510 <HAL_RCC_OscConfig+0x4b0>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024f2:	fa93 f3a3 	rbit	r3, r3
 80024f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002500:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002516:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002522:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0af      	beq.n	80024a2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	21f8      	movs	r1, #248	; 0xf8
 8002552:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800255a:	fa91 f1a1 	rbit	r1, r1
 800255e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002562:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002566:	fab1 f181 	clz	r1, r1
 800256a:	b2c9      	uxtb	r1, r1
 800256c:	408b      	lsls	r3, r1
 800256e:	4950      	ldr	r1, [pc, #320]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
 8002574:	e06a      	b.n	800264c <HAL_RCC_OscConfig+0x5ec>
 8002576:	2301      	movs	r3, #1
 8002578:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002588:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002596:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	461a      	mov	r2, r3
 800259e:	2300      	movs	r3, #0
 80025a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a2:	f7fe f9dd 	bl	8000960 <HAL_GetTick>
 80025a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ac:	f7fe f9d8 	bl	8000960 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	f000 bc50 	b.w	8002e62 <HAL_RCC_OscConfig+0xe02>
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d8:	fab3 f383 	clz	r3, r3
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_OscConfig+0x592>
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e013      	b.n	800261a <HAL_RCC_OscConfig+0x5ba>
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002604:	2302      	movs	r3, #2
 8002606:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800260a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x650>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	2202      	movs	r2, #2
 800261c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002620:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800262c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002630:	fab2 f282 	clz	r2, r2
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f002 021f 	and.w	r2, r2, #31
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f202 	lsl.w	r2, r1, r2
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1af      	bne.n	80025ac <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80da 	beq.w	8002810 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d069      	beq.n	800273a <HAL_RCC_OscConfig+0x6da>
 8002666:	2301      	movs	r3, #1
 8002668:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x654>)
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2301      	movs	r3, #1
 800268e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7fe f966 	bl	8000960 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002698:	e00e      	b.n	80026b8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269a:	f7fe f961 	bl	8000960 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d906      	bls.n	80026b8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e3d9      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000
 80026b4:	10908120 	.word	0x10908120
 80026b8:	2302      	movs	r3, #2
 80026ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026ca:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026ce:	2202      	movs	r2, #2
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	fa93 f2a3 	rbit	r2, r3
 80026dc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026e6:	2202      	movs	r2, #2
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80026f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4ba5      	ldr	r3, [pc, #660]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80026fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fe:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002702:	2102      	movs	r1, #2
 8002704:	6019      	str	r1, [r3, #0]
 8002706:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f1a3 	rbit	r1, r3
 8002710:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002714:	6019      	str	r1, [r3, #0]
  return result;
 8002716:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fab3 f383 	clz	r3, r3
 8002720:	b2db      	uxtb	r3, r3
 8002722:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	2101      	movs	r1, #1
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0b0      	beq.n	800269a <HAL_RCC_OscConfig+0x63a>
 8002738:	e06a      	b.n	8002810 <HAL_RCC_OscConfig+0x7b0>
 800273a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002750:	601a      	str	r2, [r3, #0]
  return result;
 8002752:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002756:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <HAL_RCC_OscConfig+0x934>)
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2300      	movs	r3, #0
 800276a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7fe f8f8 	bl	8000960 <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002774:	e009      	b.n	800278a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002776:	f7fe f8f3 	bl	8000960 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e36b      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 800278a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800278e:	2202      	movs	r2, #2
 8002790:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002792:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	fa93 f2a3 	rbit	r2, r3
 800279c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027a6:	2202      	movs	r2, #2
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fa93 f2a3 	rbit	r2, r3
 80027b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027be:	2202      	movs	r2, #2
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	fa93 f2a3 	rbit	r2, r3
 80027cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d2:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80027d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027d6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027da:	2102      	movs	r1, #2
 80027dc:	6019      	str	r1, [r3, #0]
 80027de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	fa93 f1a3 	rbit	r1, r3
 80027e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027ec:	6019      	str	r1, [r3, #0]
  return result;
 80027ee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f303 	lsl.w	r3, r1, r3
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1b2      	bne.n	8002776 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8158 	beq.w	8002ad0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d112      	bne.n	8002858 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b57      	ldr	r3, [pc, #348]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a56      	ldr	r2, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b54      	ldr	r3, [pc, #336]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002846:	f107 0308 	add.w	r3, r7, #8
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_OscConfig+0x938>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11a      	bne.n	800289a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002864:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCC_OscConfig+0x938>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x938>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002870:	f7fe f876 	bl	8000960 <HAL_GetTick>
 8002874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e009      	b.n	800288e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe f871 	bl	8000960 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b64      	cmp	r3, #100	; 0x64
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e2e9      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_OscConfig+0x938>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0ef      	beq.n	800287a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x852>
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4a39      	ldr	r2, [pc, #228]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6213      	str	r3, [r2, #32]
 80028b0:	e02f      	b.n	8002912 <HAL_RCC_OscConfig+0x8b2>
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10c      	bne.n	80028d6 <HAL_RCC_OscConfig+0x876>
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a33      	ldr	r2, [pc, #204]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a30      	ldr	r2, [pc, #192]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e01d      	b.n	8002912 <HAL_RCC_OscConfig+0x8b2>
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x89a>
 80028e0:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6213      	str	r3, [r2, #32]
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x8b2>
 80028fa:	4b25      	ldr	r3, [pc, #148]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6213      	str	r3, [r2, #32]
 8002906:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d06b      	beq.n	80029f4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291c:	f7fe f820 	bl	8000960 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe f81b 	bl	8000960 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e291      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 800293e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800296c:	601a      	str	r2, [r3, #0]
  return result;
 800296e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002972:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	fab3 f383 	clz	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d109      	bne.n	800299c <HAL_RCC_OscConfig+0x93c>
 8002988:	4b01      	ldr	r3, [pc, #4]	; (8002990 <HAL_RCC_OscConfig+0x930>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	e014      	b.n	80029b8 <HAL_RCC_OscConfig+0x958>
 800298e:	bf00      	nop
 8002990:	40021000 	.word	0x40021000
 8002994:	10908120 	.word	0x10908120
 8002998:	40007000 	.word	0x40007000
 800299c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029a0:	2202      	movs	r2, #2
 80029a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	fa93 f2a3 	rbit	r2, r3
 80029ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	4bbb      	ldr	r3, [pc, #748]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029bc:	2102      	movs	r1, #2
 80029be:	6011      	str	r1, [r2, #0]
 80029c0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fa92 f1a2 	rbit	r1, r2
 80029ca:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029ce:	6011      	str	r1, [r2, #0]
  return result;
 80029d0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	fab2 f282 	clz	r2, r2
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	f002 021f 	and.w	r2, r2, #31
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d099      	beq.n	8002926 <HAL_RCC_OscConfig+0x8c6>
 80029f2:	e063      	b.n	8002abc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f4:	f7fd ffb4 	bl	8000960 <HAL_GetTick>
 80029f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fd ffaf 	bl	8000960 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e225      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 8002a16:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	fa93 f2a3 	rbit	r2, r3
 8002a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a32:	2202      	movs	r2, #2
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	fa93 f2a3 	rbit	r2, r3
 8002a40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a44:	601a      	str	r2, [r3, #0]
  return result;
 8002a46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d102      	bne.n	8002a66 <HAL_RCC_OscConfig+0xa06>
 8002a60:	4b90      	ldr	r3, [pc, #576]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	e00d      	b.n	8002a82 <HAL_RCC_OscConfig+0xa22>
 8002a66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	4b89      	ldr	r3, [pc, #548]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a86:	2102      	movs	r1, #2
 8002a88:	6011      	str	r1, [r2, #0]
 8002a8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	fa92 f1a2 	rbit	r1, r2
 8002a94:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a98:	6011      	str	r1, [r2, #0]
  return result;
 8002a9a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	fab2 f282 	clz	r2, r2
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	f002 021f 	and.w	r2, r2, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1a0      	bne.n	80029fe <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002abc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b77      	ldr	r3, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a76      	ldr	r2, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 81c2 	beq.w	8002e60 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b71      	ldr	r3, [pc, #452]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f000 819c 	beq.w	8002e22 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f040 8114 	bne.w	8002d1e <HAL_RCC_OscConfig+0xcbe>
 8002af6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b0e:	601a      	str	r2, [r3, #0]
  return result;
 8002b10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	461a      	mov	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fd ff18 	bl	8000960 <HAL_GetTick>
 8002b30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b34:	e009      	b.n	8002b4a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fd ff13 	bl	8000960 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e18b      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 8002b4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b62:	601a      	str	r2, [r3, #0]
  return result;
 8002b64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	fab3 f383 	clz	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	095b      	lsrs	r3, r3, #5
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d102      	bne.n	8002b84 <HAL_RCC_OscConfig+0xb24>
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	e01b      	b.n	8002bbc <HAL_RCC_OscConfig+0xb5c>
 8002b84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	fa93 f2a3 	rbit	r2, r3
 8002b98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fa93 f2a3 	rbit	r2, r3
 8002bb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002bc4:	6011      	str	r1, [r2, #0]
 8002bc6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	fa92 f1a2 	rbit	r1, r2
 8002bd0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bd4:	6011      	str	r1, [r2, #0]
  return result;
 8002bd6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	f002 021f 	and.w	r2, r2, #31
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f202 	lsl.w	r2, r1, r2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d19e      	bne.n	8002b36 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c06:	1d3b      	adds	r3, r7, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	4925      	ldr	r1, [pc, #148]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	fa93 f2a3 	rbit	r2, r3
 8002c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c2c:	601a      	str	r2, [r3, #0]
  return result;
 8002c2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c32:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	461a      	mov	r2, r3
 8002c46:	2301      	movs	r3, #1
 8002c48:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fd fe89 	bl	8000960 <HAL_GetTick>
 8002c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c52:	e009      	b.n	8002c68 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fd fe84 	bl	8000960 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0fc      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 8002c68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	fa93 f2a3 	rbit	r2, r3
 8002c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c80:	601a      	str	r2, [r3, #0]
  return result;
 8002c82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d105      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xc48>
 8002c9c:	4b01      	ldr	r3, [pc, #4]	; (8002ca4 <HAL_RCC_OscConfig+0xc44>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e01e      	b.n	8002ce0 <HAL_RCC_OscConfig+0xc80>
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	fa93 f2a3 	rbit	r2, r3
 8002cbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	4b63      	ldr	r3, [pc, #396]	; (8002e6c <HAL_RCC_OscConfig+0xe0c>)
 8002cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ce4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ce8:	6011      	str	r1, [r2, #0]
 8002cea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	fa92 f1a2 	rbit	r1, r2
 8002cf4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cf8:	6011      	str	r1, [r2, #0]
  return result;
 8002cfa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d09b      	beq.n	8002c54 <HAL_RCC_OscConfig+0xbf4>
 8002d1c:	e0a0      	b.n	8002e60 <HAL_RCC_OscConfig+0xe00>
 8002d1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d36:	601a      	str	r2, [r3, #0]
  return result;
 8002d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2300      	movs	r3, #0
 8002d52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fd fe04 	bl	8000960 <HAL_GetTick>
 8002d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	e009      	b.n	8002d72 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fd fdff 	bl	8000960 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e077      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
 8002d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d8a:	601a      	str	r2, [r3, #0]
  return result;
 8002d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_RCC_OscConfig+0xd4c>
 8002da6:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_RCC_OscConfig+0xe0c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	e01b      	b.n	8002de4 <HAL_RCC_OscConfig+0xd84>
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f107 0320 	add.w	r3, r7, #32
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	fa93 f2a3 	rbit	r2, r3
 8002dc0:	f107 031c 	add.w	r3, r7, #28
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	f107 0318 	add.w	r3, r7, #24
 8002dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f107 0318 	add.w	r3, r7, #24
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f107 0314 	add.w	r3, r7, #20
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_OscConfig+0xe0c>)
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f107 0210 	add.w	r2, r7, #16
 8002de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	f107 0210 	add.w	r2, r7, #16
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	fa92 f1a2 	rbit	r1, r2
 8002df8:	f107 020c 	add.w	r2, r7, #12
 8002dfc:	6011      	str	r1, [r2, #0]
  return result;
 8002dfe:	f107 020c 	add.w	r2, r7, #12
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d19e      	bne.n	8002d5e <HAL_RCC_OscConfig+0xcfe>
 8002e20:	e01e      	b.n	8002e60 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_RCC_OscConfig+0xe0c>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d108      	bne.n	8002e5c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b09e      	sub	sp, #120	; 0x78
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e162      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b90      	ldr	r3, [pc, #576]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	498b      	ldr	r1, [pc, #556]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b89      	ldr	r3, [pc, #548]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e14a      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	497f      	ldr	r1, [pc, #508]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80dc 	beq.w	800309c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13c      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xf6>
 8002eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ef0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xa6>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	e00f      	b.n	8002f36 <HAL_RCC_ClockConfig+0xc6>
 8002f16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	667b      	str	r3, [r7, #100]	; 0x64
 8002f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d17b      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0f3      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d13c      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x178>
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x128>
 8002f92:	4b4f      	ldr	r3, [pc, #316]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
 8002f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40
 8002fac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13a      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b2      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_ClockConfig+0x1a0>
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e00d      	b.n	800302c <HAL_RCC_ClockConfig+0x1bc>
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	617a      	str	r2, [r7, #20]
  return result;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e079      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	491a      	ldr	r1, [pc, #104]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fd fc78 	bl	8000960 <HAL_GetTick>
 8003070:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fd fc74 	bl	8000960 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e061      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4906      	ldr	r1, [pc, #24]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	; (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e040      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	491a      	ldr	r1, [pc, #104]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4912      	ldr	r1, [pc, #72]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003112:	f000 f829 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003120:	22f0      	movs	r2, #240	; 0xf0
 8003122:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	fa92 f2a2 	rbit	r2, r2
 800312a:	60fa      	str	r2, [r7, #12]
  return result;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	40d3      	lsrs	r3, r2
 8003136:	4a09      	ldr	r2, [pc, #36]	; (800315c <HAL_RCC_ClockConfig+0x2ec>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <HAL_RCC_ClockConfig+0x2f0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_RCC_ClockConfig+0x2f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd fbc6 	bl	80008d8 <HAL_InitTick>
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3778      	adds	r7, #120	; 0x78
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	080042b8 	.word	0x080042b8
 8003160:	20000000 	.word	0x20000000
 8003164:	20000004 	.word	0x20000004

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b08b      	sub	sp, #44	; 0x2c
 800316c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003196:	e03c      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 800319a:	623b      	str	r3, [r7, #32]
      break;
 800319c:	e03c      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80031a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	fa92 f2a2 	rbit	r2, r2
 80031b0:	607a      	str	r2, [r7, #4]
  return result;
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	fab2 f282 	clz	r2, r2
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	40d3      	lsrs	r3, r2
 80031bc:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031be:	5cd3      	ldrb	r3, [r2, r3]
 80031c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	220f      	movs	r2, #15
 80031cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	fa92 f2a2 	rbit	r2, r2
 80031d4:	60fa      	str	r2, [r7, #12]
  return result;
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	fab2 f282 	clz	r2, r2
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	40d3      	lsrs	r3, r2
 80031e0:	4a14      	ldr	r2, [pc, #80]	; (8003234 <HAL_RCC_GetSysClockFreq+0xcc>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f0:	4a0e      	ldr	r2, [pc, #56]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	e004      	b.n	800320c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	623b      	str	r3, [r7, #32]
      break;
 8003210:	e002      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003214:	623b      	str	r3, [r7, #32]
      break;
 8003216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003218:	6a3b      	ldr	r3, [r7, #32]
}
 800321a:	4618      	mov	r0, r3
 800321c:	372c      	adds	r7, #44	; 0x2c
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	007a1200 	.word	0x007a1200
 8003230:	080042c8 	.word	0x080042c8
 8003234:	080042d8 	.word	0x080042d8
 8003238:	003d0900 	.word	0x003d0900

0800323c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b092      	sub	sp, #72	; 0x48
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800324c:	2300      	movs	r3, #0
 800324e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80cd 	beq.w	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003260:	4b8e      	ldr	r3, [pc, #568]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b8b      	ldr	r3, [pc, #556]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	4a8a      	ldr	r2, [pc, #552]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	61d3      	str	r3, [r2, #28]
 8003278:	4b88      	ldr	r3, [pc, #544]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	4b85      	ldr	r3, [pc, #532]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	2b00      	cmp	r3, #0
 8003294:	d118      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003296:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a81      	ldr	r2, [pc, #516]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a2:	f7fd fb5d 	bl	8000960 <HAL_GetTick>
 80032a6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032aa:	f7fd fb59 	bl	8000960 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ea      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c8:	4b74      	ldr	r3, [pc, #464]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d07d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d076      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e6:	4b6d      	ldr	r3, [pc, #436]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003300:	fab3 f383 	clz	r3, r3
 8003304:	b2db      	uxtb	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	4b66      	ldr	r3, [pc, #408]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	2301      	movs	r3, #1
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	4b5d      	ldr	r3, [pc, #372]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	2300      	movs	r3, #0
 8003336:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800333c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d045      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd fb0a 	bl	8000960 <HAL_GetTick>
 800334c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd fb06 	bl	8000960 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e095      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	2302      	movs	r3, #2
 8003374:	623b      	str	r3, [r7, #32]
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	61fb      	str	r3, [r7, #28]
  return result;
 800337e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0302 	orr.w	r3, r3, #2
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d102      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	e007      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	2202      	movs	r2, #2
 80033ac:	613a      	str	r2, [r7, #16]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	fa92 f2a2 	rbit	r2, r2
 80033b4:	60fa      	str	r2, [r7, #12]
  return result;
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0bd      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	492e      	ldr	r1, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ee:	4b2b      	ldr	r3, [pc, #172]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	4a2a      	ldr	r2, [pc, #168]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4922      	ldr	r1, [pc, #136]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	4313      	orrs	r3, r2
 8003416:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003424:	4b1d      	ldr	r3, [pc, #116]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f023 0210 	bic.w	r2, r3, #16
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	491a      	ldr	r1, [pc, #104]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003432:	4313      	orrs	r3, r2
 8003434:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4913      	ldr	r1, [pc, #76]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003450:	4313      	orrs	r3, r2
 8003452:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	490b      	ldr	r1, [pc, #44]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346e:	4313      	orrs	r3, r2
 8003470:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4904      	ldr	r1, [pc, #16]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800348c:	4313      	orrs	r3, r2
 800348e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3748      	adds	r7, #72	; 0x48
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40021000 	.word	0x40021000
 80034a0:	40007000 	.word	0x40007000
 80034a4:	10908100 	.word	0x10908100

080034a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f924 	bl	800071c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fa84 	bl	80039f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_TIM_PWM_Start_IT+0x28>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e03c      	b.n	80035fa <HAL_TIM_PWM_Start_IT+0xa2>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d109      	bne.n	800359a <HAL_TIM_PWM_Start_IT+0x42>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e02f      	b.n	80035fa <HAL_TIM_PWM_Start_IT+0xa2>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_PWM_Start_IT+0x5c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e022      	b.n	80035fa <HAL_TIM_PWM_Start_IT+0xa2>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2b0c      	cmp	r3, #12
 80035b8:	d109      	bne.n	80035ce <HAL_TIM_PWM_Start_IT+0x76>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	bf14      	ite	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	2300      	moveq	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e015      	b.n	80035fa <HAL_TIM_PWM_Start_IT+0xa2>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d109      	bne.n	80035e8 <HAL_TIM_PWM_Start_IT+0x90>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b01      	cmp	r3, #1
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <HAL_TIM_PWM_Start_IT+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e0d3      	b.n	80037aa <HAL_TIM_PWM_Start_IT+0x252>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start_IT+0xba>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003610:	e023      	b.n	800365a <HAL_TIM_PWM_Start_IT+0x102>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start_IT+0xca>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003620:	e01b      	b.n	800365a <HAL_TIM_PWM_Start_IT+0x102>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start_IT+0xda>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003630:	e013      	b.n	800365a <HAL_TIM_PWM_Start_IT+0x102>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b0c      	cmp	r3, #12
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start_IT+0xea>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003640:	e00b      	b.n	800365a <HAL_TIM_PWM_Start_IT+0x102>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b10      	cmp	r3, #16
 8003646:	d104      	bne.n	8003652 <HAL_TIM_PWM_Start_IT+0xfa>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003650:	e003      	b.n	800365a <HAL_TIM_PWM_Start_IT+0x102>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d841      	bhi.n	80036e4 <HAL_TIM_PWM_Start_IT+0x18c>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_TIM_PWM_Start_IT+0x110>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036e5 	.word	0x080036e5
 8003670:	080036e5 	.word	0x080036e5
 8003674:	080036e5 	.word	0x080036e5
 8003678:	080036af 	.word	0x080036af
 800367c:	080036e5 	.word	0x080036e5
 8003680:	080036e5 	.word	0x080036e5
 8003684:	080036e5 	.word	0x080036e5
 8003688:	080036c1 	.word	0x080036c1
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036e5 	.word	0x080036e5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036d3 	.word	0x080036d3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0202 	orr.w	r2, r2, #2
 80036aa:	60da      	str	r2, [r3, #12]
      break;
 80036ac:	e01d      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	60da      	str	r2, [r3, #12]
      break;
 80036be:	e014      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	60da      	str	r2, [r3, #12]
      break;
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0210 	orr.w	r2, r2, #16
 80036e0:	60da      	str	r2, [r3, #12]
      break;
 80036e2:	e002      	b.n	80036ea <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d15b      	bne.n	80037a8 <HAL_TIM_PWM_Start_IT+0x250>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2201      	movs	r2, #1
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fc99 	bl	8004030 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_TIM_PWM_Start_IT+0x25c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_PWM_Start_IT+0x1ce>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <HAL_TIM_PWM_Start_IT+0x260>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIM_PWM_Start_IT+0x1ce>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a29      	ldr	r2, [pc, #164]	; (80037bc <HAL_TIM_PWM_Start_IT+0x264>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIM_PWM_Start_IT+0x1ce>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a27      	ldr	r2, [pc, #156]	; (80037c0 <HAL_TIM_PWM_Start_IT+0x268>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Start_IT+0x1d2>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_TIM_PWM_Start_IT+0x1d4>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_PWM_Start_IT+0x1e8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_TIM_PWM_Start_IT+0x25c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00e      	beq.n	8003768 <HAL_TIM_PWM_Start_IT+0x210>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d009      	beq.n	8003768 <HAL_TIM_PWM_Start_IT+0x210>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIM_PWM_Start_IT+0x26c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <HAL_TIM_PWM_Start_IT+0x210>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <HAL_TIM_PWM_Start_IT+0x260>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d115      	bne.n	8003794 <HAL_TIM_PWM_Start_IT+0x23c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_TIM_PWM_Start_IT+0x270>)
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d015      	beq.n	80037a6 <HAL_TIM_PWM_Start_IT+0x24e>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d011      	beq.n	80037a6 <HAL_TIM_PWM_Start_IT+0x24e>
      {
        __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003792:	e008      	b.n	80037a6 <HAL_TIM_PWM_Start_IT+0x24e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_PWM_Start_IT+0x250>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400
 80037c0:	40014800 	.word	0x40014800
 80037c4:	40000400 	.word	0x40000400
 80037c8:	00010007 	.word	0x00010007

080037cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e0ff      	b.n	80039ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b14      	cmp	r3, #20
 80037f6:	f200 80f0 	bhi.w	80039da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037fa:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003800:	08003855 	.word	0x08003855
 8003804:	080039db 	.word	0x080039db
 8003808:	080039db 	.word	0x080039db
 800380c:	080039db 	.word	0x080039db
 8003810:	08003895 	.word	0x08003895
 8003814:	080039db 	.word	0x080039db
 8003818:	080039db 	.word	0x080039db
 800381c:	080039db 	.word	0x080039db
 8003820:	080038d7 	.word	0x080038d7
 8003824:	080039db 	.word	0x080039db
 8003828:	080039db 	.word	0x080039db
 800382c:	080039db 	.word	0x080039db
 8003830:	08003917 	.word	0x08003917
 8003834:	080039db 	.word	0x080039db
 8003838:	080039db 	.word	0x080039db
 800383c:	080039db 	.word	0x080039db
 8003840:	08003959 	.word	0x08003959
 8003844:	080039db 	.word	0x080039db
 8003848:	080039db 	.word	0x080039db
 800384c:	080039db 	.word	0x080039db
 8003850:	08003999 	.word	0x08003999
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	4618      	mov	r0, r3
 800385c:	f000 f942 	bl	8003ae4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0208 	orr.w	r2, r2, #8
 800386e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0204 	bic.w	r2, r2, #4
 800387e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6999      	ldr	r1, [r3, #24]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	619a      	str	r2, [r3, #24]
      break;
 8003892:	e0a5      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f9a8 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	021a      	lsls	r2, r3, #8
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	619a      	str	r2, [r3, #24]
      break;
 80038d4:	e084      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fa07 	bl	8003cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0208 	orr.w	r2, r2, #8
 80038f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0204 	bic.w	r2, r2, #4
 8003900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69d9      	ldr	r1, [r3, #28]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	61da      	str	r2, [r3, #28]
      break;
 8003914:	e064      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa65 	bl	8003dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	61da      	str	r2, [r3, #28]
      break;
 8003956:	e043      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 faa8 	bl	8003eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0208 	orr.w	r2, r2, #8
 8003972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0204 	bic.w	r2, r2, #4
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003996:	e023      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fae6 	bl	8003f70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	021a      	lsls	r2, r3, #8
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039d8:	e002      	b.n	80039e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
      break;
 80039de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop

080039f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a32      	ldr	r2, [pc, #200]	; (8003ad0 <TIM_Base_SetConfig+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d007      	beq.n	8003a1c <TIM_Base_SetConfig+0x28>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a12:	d003      	beq.n	8003a1c <TIM_Base_SetConfig+0x28>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a2f      	ldr	r2, [pc, #188]	; (8003ad4 <TIM_Base_SetConfig+0xe0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d108      	bne.n	8003a2e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a27      	ldr	r2, [pc, #156]	; (8003ad0 <TIM_Base_SetConfig+0xdc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <TIM_Base_SetConfig+0x6a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d00f      	beq.n	8003a5e <TIM_Base_SetConfig+0x6a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a24      	ldr	r2, [pc, #144]	; (8003ad4 <TIM_Base_SetConfig+0xe0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <TIM_Base_SetConfig+0x6a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a23      	ldr	r2, [pc, #140]	; (8003ad8 <TIM_Base_SetConfig+0xe4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <TIM_Base_SetConfig+0x6a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a22      	ldr	r2, [pc, #136]	; (8003adc <TIM_Base_SetConfig+0xe8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_Base_SetConfig+0x6a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <TIM_Base_SetConfig+0xec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d108      	bne.n	8003a70 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <TIM_Base_SetConfig+0xdc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_Base_SetConfig+0xc0>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ad8 <TIM_Base_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_Base_SetConfig+0xc0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <TIM_Base_SetConfig+0xe8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0xc0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a0c      	ldr	r2, [pc, #48]	; (8003ae0 <TIM_Base_SetConfig+0xec>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f023 0201 	bic.w	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f023 0302 	bic.w	r3, r3, #2
 8003b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a28      	ldr	r2, [pc, #160]	; (8003be0 <TIM_OC1_SetConfig+0xfc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <TIM_OC1_SetConfig+0x78>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <TIM_OC1_SetConfig+0x100>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_OC1_SetConfig+0x78>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <TIM_OC1_SetConfig+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_OC1_SetConfig+0x78>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a25      	ldr	r2, [pc, #148]	; (8003bec <TIM_OC1_SetConfig+0x108>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10c      	bne.n	8003b76 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0308 	bic.w	r3, r3, #8
 8003b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a19      	ldr	r2, [pc, #100]	; (8003be0 <TIM_OC1_SetConfig+0xfc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_OC1_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <TIM_OC1_SetConfig+0x100>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_OC1_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <TIM_OC1_SetConfig+0x104>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_OC1_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a16      	ldr	r2, [pc, #88]	; (8003bec <TIM_OC1_SetConfig+0x108>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d111      	bne.n	8003bba <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <TIM_OC2_SetConfig+0xf0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10d      	bne.n	8003c70 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <TIM_OC2_SetConfig+0xf0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_OC2_SetConfig+0xa0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ce4 <TIM_OC2_SetConfig+0xf4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_OC2_SetConfig+0xa0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <TIM_OC2_SetConfig+0xf8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_OC2_SetConfig+0xa0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a18      	ldr	r2, [pc, #96]	; (8003cec <TIM_OC2_SetConfig+0xfc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d113      	bne.n	8003cb8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40014000 	.word	0x40014000
 8003ce8:	40014400 	.word	0x40014400
 8003cec:	40014800 	.word	0x40014800

08003cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0303 	bic.w	r3, r3, #3
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a23      	ldr	r2, [pc, #140]	; (8003ddc <TIM_OC3_SetConfig+0xec>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10d      	bne.n	8003d6e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <TIM_OC3_SetConfig+0xec>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_OC3_SetConfig+0x9e>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <TIM_OC3_SetConfig+0xf0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_OC3_SetConfig+0x9e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <TIM_OC3_SetConfig+0xf4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_OC3_SetConfig+0x9e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <TIM_OC3_SetConfig+0xf8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d113      	bne.n	8003db6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	621a      	str	r2, [r3, #32]
}
 8003dd0:	bf00      	nop
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800

08003dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	031b      	lsls	r3, r3, #12
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <TIM_OC4_SetConfig+0xb8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00b      	beq.n	8003e68 <TIM_OC4_SetConfig+0x7c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <TIM_OC4_SetConfig+0xbc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_OC4_SetConfig+0x7c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <TIM_OC4_SetConfig+0xc0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_OC4_SetConfig+0x7c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <TIM_OC4_SetConfig+0xc4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d109      	bne.n	8003e7c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	019b      	lsls	r3, r3, #6
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800

08003eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a15      	ldr	r2, [pc, #84]	; (8003f60 <TIM_OC5_SetConfig+0xac>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_OC5_SetConfig+0x72>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <TIM_OC5_SetConfig+0xb0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_OC5_SetConfig+0x72>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <TIM_OC5_SetConfig+0xb4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_OC5_SetConfig+0x72>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <TIM_OC5_SetConfig+0xb8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d109      	bne.n	8003f3a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000
 8003f68:	40014400 	.word	0x40014400
 8003f6c:	40014800 	.word	0x40014800

08003f70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	021b      	lsls	r3, r3, #8
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	051b      	lsls	r3, r3, #20
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a16      	ldr	r2, [pc, #88]	; (8004020 <TIM_OC6_SetConfig+0xb0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_OC6_SetConfig+0x74>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <TIM_OC6_SetConfig+0xb4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_OC6_SetConfig+0x74>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a14      	ldr	r2, [pc, #80]	; (8004028 <TIM_OC6_SetConfig+0xb8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_OC6_SetConfig+0x74>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <TIM_OC6_SetConfig+0xbc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d109      	bne.n	8003ff8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	029b      	lsls	r3, r3, #10
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	bf00      	nop
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	2201      	movs	r2, #1
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	43db      	mvns	r3, r3
 8004052:	401a      	ands	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1a      	ldr	r2, [r3, #32]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 031f 	and.w	r3, r3, #31
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	fa01 f303 	lsl.w	r3, r1, r3
 8004068:	431a      	orrs	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004090:	2302      	movs	r3, #2
 8004092:	e054      	b.n	800413e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d108      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00e      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fc:	d009      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d004      	beq.n	8004112 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a11      	ldr	r2, [pc, #68]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10c      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4313      	orrs	r3, r2
 8004122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40012c00 	.word	0x40012c00
 8004150:	40000400 	.word	0x40000400
 8004154:	40014000 	.word	0x40014000

08004158 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e060      	b.n	8004236 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d115      	bne.n	8004224 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	051b      	lsls	r3, r3, #20
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40012c00 	.word	0x40012c00

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4d0d      	ldr	r5, [pc, #52]	; (8004280 <__libc_init_array+0x38>)
 800424c:	4c0d      	ldr	r4, [pc, #52]	; (8004284 <__libc_init_array+0x3c>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	2600      	movs	r6, #0
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	4d0b      	ldr	r5, [pc, #44]	; (8004288 <__libc_init_array+0x40>)
 800425a:	4c0c      	ldr	r4, [pc, #48]	; (800428c <__libc_init_array+0x44>)
 800425c:	f000 f820 	bl	80042a0 <_init>
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	2600      	movs	r6, #0
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	080042e8 	.word	0x080042e8
 8004284:	080042e8 	.word	0x080042e8
 8004288:	080042e8 	.word	0x080042e8
 800428c:	080042ec 	.word	0x080042ec

08004290 <memset>:
 8004290:	4402      	add	r2, r0
 8004292:	4603      	mov	r3, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <_init>:
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042a2:	bf00      	nop
 80042a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042a6:	bc08      	pop	{r3}
 80042a8:	469e      	mov	lr, r3
 80042aa:	4770      	bx	lr

080042ac <_fini>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr
